
var tangram_component = {
	nameSpace: [{n: 'baidu.data', p: 'baidu'}, {n: 'baidu.data.dataSource', p: 'baidu.data'}, {n: 'baidu.data.dataSource.local', p: 'baidu.data.dataSource'}, {n: 'baidu.data.dataSource.sio', p: 'baidu.data.dataSource'}, {n: 'baidu.data.XPC', p: 'baidu.data'}, {n: 'baidu.flash.fileUploader', p: 'baidu.flash'}, {n: 'baidu.flash.imageUploader', p: 'baidu.flash'}, {n: 'baidu.form', p: 'baidu'}, {n: 'baidu.fx.collapse', p: 'baidu.fx'}, {n: 'baidu.fx.current', p: 'baidu.fx'}, {n: 'baidu.fx.fadeOut', p: 'baidu.fx'}, {n: 'baidu.fx.getTransition', p: 'baidu.fx'}, {n: 'baidu.fx.highlight', p: 'baidu.fx'}, {n: 'baidu.fx.mask', p: 'baidu.fx'}, {n: 'baidu.fx.move', p: 'baidu.fx'}, {n: 'baidu.fx.moveTo', p: 'baidu.fx'}, {n: 'baidu.fx.opacity', p: 'baidu.fx'}, {n: 'baidu.fx.pulsate', p: 'baidu.fx'}, {n: 'baidu.fx.remove', p: 'baidu.fx'}, {n: 'baidu.fx.scale', p: 'baidu.fx'}, {n: 'baidu.fx.scrollBy', p: 'baidu.fx'}, {n: 'baidu.fx.shake', p: 'baidu.fx'}, {n: 'baidu.fx.zoomIn', p: 'baidu.fx'}, {n: 'baidu.ui', p: 'baidu'}, {n: 'baidu.ui.Base.getParent', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.setParent', p: 'baidu.ui.Base'}, {n: 'baidu.ui.behavior', p: 'baidu.ui'}, {n: 'baidu.ui.behavior.coverable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.decorator', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.draggable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.droppable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.posable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.posable.setPositionByMouse', p: 'baidu.ui.behavior.posable'}, {n: 'baidu.ui.behavior.resizable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.sortable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.Carousel', p: 'baidu.ui'}, {n: 'baidu.ui.ColorPalette', p: 'baidu.ui'}, {n: 'baidu.ui.ColorPicker.ColorPicker$click', p: 'baidu.ui.ColorPicker'}, {n: 'baidu.ui.Combox', p: 'baidu.ui'}, {n: 'baidu.ui.createPopup', p: 'baidu.ui'}, {n: 'baidu.ui.Decorator', p: 'baidu.ui'}, {n: 'baidu.ui.Dialog', p: 'baidu.ui'}, {n: 'baidu.ui.get', p: 'baidu.ui'}, {n: 'baidu.ui.getAttribute', p: 'baidu.ui'}, {n: 'baidu.ui.getUI', p: 'baidu.ui'}, {n: 'baidu.ui.Input', p: 'baidu.ui'}, {n: 'baidu.ui.ItemSet', p: 'baidu.ui'}, {n: 'baidu.ui.Menubar', p: 'baidu.ui'}, {n: 'baidu.ui.Modal', p: 'baidu.ui'}, {n: 'baidu.ui.Pager', p: 'baidu.ui'}, {n: 'baidu.ui.Popup', p: 'baidu.ui'}, {n: 'baidu.ui.ProgressBar', p: 'baidu.ui'}, {n: 'baidu.ui.setup', p: 'baidu.ui'}, {n: 'baidu.ui.Slider', p: 'baidu.ui'}, {n: 'baidu.ui.StarRate', p: 'baidu.ui'}, {n: 'baidu.ui.Tab', p: 'baidu.ui'}, {n: 'baidu.ui.Toolbar', p: 'baidu.ui'}, {n: 'baidu.ui.Tree', p: 'baidu.ui'}, {n: 'baidu.ui.Tree.TreeNode', p: 'baidu.ui.Tree'}, {n: 'baidu.widget', p: 'baidu'}, {n: 'baidu.widget.dispose', p: 'baidu.widget'}, {n: 'baidu.widget.get', p: 'baidu.widget'}],
	docMap: {'baidu.data.dataSource.local': {name: 'local', desc: '本地数据源类', options: [{name: 'source', type: 'Object', desc: '数据源'}, {name: 'options', type: 'Object', desc: '配置'}, {name: 'options.maxCache', type: 'Number', desc: '缓存数据的最大个数'}, {name: 'options.cache', type: 'Boolean', desc: '是否使用缓存'}, {name: 'optons.transition', type: 'Function', desc: '转换数据算法'}, {name: 'options.onbeforeget', type: 'Function', desc: 'beforeget事件'}]}, 'baidu.data.dataSource.sio': {name: 'sio', desc: '跨域数据源类', options: [{name: 'url', type: 'String', desc: '数据源地址'}, {name: 'options', type: 'Object', desc: '配置'}, {name: 'options.maxCache', type: 'Number', desc: '缓存数据的最大个数'}, {name: 'options.cache', type: 'Boolean', desc: '是否使用缓存'}, {name: 'optons.transition', type: 'Function', desc: '转换数据算法'}, {name: 'options.onbeforeget', type: 'Function', desc: 'beforeget事件'}]}, 'baidu.data.XPC': {name: 'XPC', desc: 'XPC(cross page channel) 跨域通信模块', options: [{name: 'isParent', type: 'boolean', desc: '确定当前页面角色，如果是父页面，则为true，跨域的子页面为false，默认值为false.'}, {name: 'url', type: 'string', desc: '在对方域下部署的子页面，如果isParent为true，则此参数为必须，否则可以省略.'}, {name: 'timeout', type: 'number', desc: '设置超时时间(ms)，超过这个时间视为初始化失败，默认值是3000.'}]}, 'baidu.flash.fileUploader': {name: 'fileUploader', desc: '创建flash based fileUploader', options: [{name: 'createOptions', type: 'Object', desc: '创建flash时需要的参数，请参照baidu.swf.create文档'}, {name: 'width', type: 'String'}, {name: 'height', type: 'String'}, {name: 'selectiFile', type: 'Function|String'}, {name: 'exceedMaxSize', type: 'Function|String'}, {name: 'deleteFile', type: 'Function|String'}, {name: 'uploadStart', type: 'Function|String'}, {name: 'uploadComplete', type: 'Function|String'}, {name: 'uploadError', type: 'Function|String'}, {name: 'uploadProgress', type: 'Function|String'}]}, 'baidu.flash.imageUploader': {name: 'imageUploader', desc: '创建flash based imageUploader', options: [{name: 'createOptions', type: 'Object', desc: '创建flash时需要的参数，请参照baidu.swf.create文档'}, {name: 'createOptions.vars', type: 'Object', desc: '创建imageUploader时所需要的参数'}, {name: 'createOptions.vars.url', type: 'String', desc: '图片上传的url地址,默认值\'Upload.php\''}, {name: 'createOptions.vars.fileType', type: 'String', desc: '可上传的图片的类型字符串，默认值                 \'{\"description\":\"图片\", \"extension\":\"*.gif; *.jpeg; *.png; *.jpg; *.bmp\"}\''}, {name: 'createOptions.vars.maxNum', type: 'Number', desc: '允许上传的最大图片数量，默认值32'}, {name: 'createOptions.vars.maxSize', type: 'Number', desc: '允许上传的单张图片的最大体积,默认值3MB'}, {name: 'createOptions.vars.compressSize', type: 'Number', desc: '超过多少MB的图片需要压缩,默认值3MB'}, {name: 'createOptions.vars.compressLength', type: 'Number', desc: '允许上传的图片最大尺寸,默认值1200px'}, {name: 'createOptions.vars.uploadDataFieldName', type: 'String', desc: '上传的图片数据在POST请求中的key值,默认值\'uploadDataField\''}, {name: 'createOptions.vars.picDescFieldName', type: 'String', desc: '图片的描述信息在POST请求中的key值,默认值\'uploadDescField\''}, {name: 'createOptions.vars.ext', type: 'object', desc: '其他需要通过post上传的参数，默认值null'}, {name: 'createOptions.vars.supportGif', type: 'Number', desc: '是否支持动态gif图片,取值范围[0,1]，默认值为0'}]}, 'baidu.fx.collapse': {name: 'collapse', desc: '从下向上收拢DOM元素的效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.orientation', type: 'String', desc: '动画收拢方向，取值：vertical（默认），horizontal'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//在onafterfinish与oncancel时默认调用'}]}, 'baidu.fx.current': {name: 'current', type: 'Array', desc: '获取DOM元素正在运行的效果实例列表', options: [{name: 'element', type: 'string|HTMLElement', desc: '被查询的DOM元素或元素id'}], returns: [{type: 'Array', desc: '效果对象'}]}, 'baidu.fx.fadeOut': {name: 'fadeOut', desc: '渐隐渐变效果，效果执行结束后会将元素完全隐藏起来。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.getTransition': {name: 'getTransition', type: 'function', desc: '获取线型函数', options: [{name: 'name', type: 'String', desc: 'transition的名称'}], returns: [{type: 'function', desc: '线型函数'}]}, 'baidu.fx.highlight': {name: 'highlight', desc: '这个方法改变DOM元素的背景色，实现高亮的效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.beginColor', type: 'String', desc: '渐变开始时的背景色，如果设置了背景色则以设置的颜色为默认开始颜色，否则默认为\'#FFFF00\''}, {name: 'options.endColor', type: 'String', desc: '渐变结束时的背景色，如果设置了背景色则以设置的颜色为默认结束颜色，否则默认为\'#FFFFFF\''}, {name: 'options.finalColor', type: 'String', desc: '渐变结束时的背景色，如果设置了背景色则以设置的颜色为结束时背景色，否则默认为endColor值'}, {name: 'options.textColor', type: 'String', desc: '渐变结束时的背景色，如果设置了背景色则以设置的颜色为结束时文本的颜色，否则默认为原文本色值'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.mask': {name: 'mask', desc: '面具遮罩效果。注意：只适用于绝对定位的DOM元素.', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.startOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标。取值包括像素(含px字符)，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '0,//效果起始值。介于0到1之间的一个数字，默认为0。'}, {name: 'options.to', type: 'Number', desc: '1,//效果结束值。介于0到1之间的一个数字，默认为1。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.move': {name: 'move', desc: '移动元素，将参数元素移动到指定位置。注意：对static定位的DOM元素无效。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.x', type: 'Number', desc: '0,//横坐标移动的偏移量，默认值为0px。'}, {name: 'options.y', type: 'Number', desc: '0,//纵坐标移动的偏移量，默认值为0px。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.moveTo': {name: 'moveTo', desc: '移动渐变效果，该效果使元素移动到指定的位置。注意：对static定位的DOM元素无效。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'point', type: 'Array|Object', desc: '目标点坐标。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向；单位：px，默认值：元素本来的坐标。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.opacity': {name: 'opacity', desc: '控制元素的透明度 渐变', options: [{name: 'element', type: 'String|Object', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.from', type: 'Number', desc: '0,//效果起始值。介于0到1之间的一个数字，默认为0。'}, {name: 'options.to', type: 'Number', desc: '1,//效果结束值。介于0到1之间的一个数字，默认为1。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.pulsate': {name: 'pulsate', desc: '心跳闪现效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'loop', type: 'Number', desc: '心跳次数，小于0则为永远跳动，默认为0次。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.remove': {name: 'remove', desc: '删除元素的时候使用fadeOut效果', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.scale': {name: 'scale', desc: '将元素放大或缩小的效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.transformOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标，取值包括像素(含px字符，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '效果起始值，介于0到1之间的一个数字。'}, {name: 'options.to', type: 'Number', desc: '效果结束值，介于0到1之间的一个数字。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.fade', type: 'Boolean', desc: 'true，//渐变，默认为true'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.scrollBy': {name: 'scrollBy', desc: '按指定量移动滚动条。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'distance', type: 'Array|JSON', desc: '移动的距离 [,] | {x,y}，支持数组与JSON格式'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.shake': {name: 'shake', desc: '颤动的效果。说明：在效果执行过程中会修改DOM元素的position属性，可能会对包含的DOM元素带来影响', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'offset', type: 'Array|Object', desc: '震动范围。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向；单位：px，默认值：元素本来的坐标。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}], methods: [{name: 'tt'}]}, 'baidu.fx.zoomIn': {name: 'zoomIn', desc: '将元素放大的展现效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.transformOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标，取值包括像素(含px字符)，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '0.1,//效果默认起始值'}, {name: 'options.to', type: 'Number', desc: '1,//效果结束默认值，输入的数值越大，图片显示的越大。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.ui.Base.getParent': {name: 'getParent', type: 'UI', desc: '获取UI控件的父控件', returns: [{type: 'UI', desc: '父控件'}]}, 'baidu.ui.Base.setParent': {name: 'setParent', desc: '设置UI控件的父控件', options: [{name: '父控件', type: 'UI'}]}, 'baidu.ui.behavior': {name: 'behavior', desc: '为各个控件增加装饰器。', methods: [{name: 'posable', methods: [{name: 'setPositionByMouse', desc: '将控件或者指定元素放置到当前鼠标位置', options: [{name: 'element', type: 'HTMLElement|string', desc: 'optional 要对齐的元素或元素id，如果不指定，默认为当前控件的主元素.'}, {name: 'options', type: 'Object', desc: 'optional 选项，同setPosition方法.'}]}]}, {name: 'coverable'}, {name: 'draggable'}, {name: 'resizable'}, {name: 'droppable'}, {name: 'decorator'}, {name: 'sortable'}]}, 'baidu.ui.behavior.posable.setPositionByMouse': {name: 'setPositionByMouse', desc: '将控件或者指定元素放置到当前鼠标位置', options: [{name: 'element', type: 'HTMLElement|string', desc: 'optional 要对齐的元素或元素id，如果不指定，默认为当前控件的主元素.'}, {name: 'options', type: 'Object', desc: 'optional 选项，同setPosition方法.'}]}, 'baidu.ui.Carousel': {name: 'Carousel', desc: '创建一个简单的滚动组件', options: [{name: 'options', type: 'Object', desc: 'config参数.'}, {name: 'options.orientation', type: 'String', desc: '描述该组件是创建一个横向滚动组件或是竖向滚动组件，取值：horizontal:横向, vertical:竖向'}, {name: 'options.contentText', type: 'Object', desc: '定义carousel组件每一项的字符数据，格式：[{content: \'text-0\'}, {content: \'text-1\'}, {content: \'text-2\'}...]'}, {name: 'options.flip', type: 'String', desc: '定义组件的翻页方式，取值：item:一次滚动一个项, page:一次滚动一页'}, {name: 'options.pageSize', type: 'Number', desc: '描述一页显示多少个滚动项，默认值是3'}, {name: 'options.onload', type: 'function', desc: '当渲染完组件时触发该事件'}, {name: 'options.onbeforescroll', type: 'function', desc: '当开始滚动时触发该事件，该事件的event参数中可以得到四个属性：index:当前需要滚动的索引, scrollOffset:滚动到可视区域的位置, direction:滚动方向, scrollUnit:需要滚动过多少个项'}, {name: 'options.onafterscroll', type: 'function', desc: '当结束一次滚动时触发该事件，该事件的event参数中可以得到四个属性：index:当前需要滚动的索引, scrollOffset:滚动到可视区域的位置, direction:滚动方向, scrollUnit:需要滚动过多少个项'}, {name: 'options.onprev', type: 'function', desc: '当翻到前一项或前一页时触发该事件'}, {name: 'options.onnext', type: 'function', desc: '当翻到下一项或下一页时触发该事件'}, {name: 'options.onitemclick', type: 'function', desc: '当点击某个项时触发该事件'}], methods: [{name: 'render', desc: '渲染滚动组件到参数指定的容器中', options: [{name: 'target', type: 'HTMLElement', desc: '一个用来存放组件的容器对象.'}]}, {name: 'getCurrentIndex', type: 'Number', desc: '取得当前得到焦点项在所有数据项中的索引值', returns: [{type: 'Number', desc: '索引值.'}]}, {name: 'getTotalCount', type: 'Number', desc: '取得数据项的总数目', returns: [{type: 'Number', desc: '总数.'}]}, {name: 'getItem', type: 'HTMLElement', desc: '根据数据的索引值取得对应在页面的DOM节点，当节点不存时返回null', options: [{name: 'index', type: 'Number', desc: '在数据中的索引值.'}], returns: [{type: 'HTMLElement', desc: '返回一个DOM节点.'}]}, {name: 'scrollTo', desc: '从当前项滚动到index指定的项，并将该项放在scrollOffset的位置', options: [{name: 'index', type: 'Number', desc: '在滚动数据中的索引.'}, {name: 'scrollOffset', type: 'Number', desc: '在页面的显示位置，该参数如果不填默认值取0.'}, {name: 'direction', type: 'String', desc: '滚动方向，取值: prev:强制滚动到上一步, next:强制滚动到下一步，当不给出该值时，会自动运算一个方向来滚动.'}]}, {name: 'prev', desc: '翻到上一项或是翻到上一页'}, {name: 'next', desc: '翻到下一项或是翻到下一页'}, {name: 'isFirst', type: 'Boolean', desc: '是否已经处在第一项或第一页', returns: [{type: 'Boolean', desc: 'true:当前已是到第一项或第一页.'}]}, {name: 'isLast', type: 'Boolean', desc: '是否已经处在末项或是末页', returns: [{type: 'Boolean', desc: 'true:当前已是到末项或末页.'}]}, {name: 'focus', desc: '使某一项得到焦点', options: [{name: 'index', type: 'Number', desc: '需要得到焦点项的索引.'}]}, {name: 'getScrollContainer', type: 'HTMLElement', desc: '取得存放所有项的上层容器', returns: [{type: 'HTMLElement', desc: '一个HTML元素.'}]}, {name: 'dispose', desc: '析构函数'}, {name: 'startAutoScroll', desc: '从停止状态开始自动滚动'}, {name: 'stopAutoScroll', desc: '停止当前自动滚动状态'}, {name: 'addText', desc: '将一个字符串的内容插入到索引指定的位置', options: [{name: 'content', type: 'String', desc: '需要插入项的字符内容'}, {name: 'index', type: 'Number', desc: '插入位置'}]}, {name: 'addItem', options: [{name: 'element', type: 'HTMLElement', desc: '将一个element项的内容插入到索引指定的位置'}, {name: 'index', type: 'Number', desc: '插入位置'}]}, {name: 'removeItem', type: 'HTMLElement', desc: '移除索引指定的某一项', options: [{name: 'index', type: 'Number', desc: '要移除项的索引'}], returns: [{type: 'HTMLElement', desc: '当移除项存在于页面时返回该节点'}]}, {name: 'addTableItem', desc: '在指定索引处插入一个新的多行多列表格', options: [{name: 'data', type: 'Object', desc: '需要插入的数据（一维数组），格式：[{content: \'col-0\'}, {content: \'col-1\'}, {content: \'col-2\'}....]'}, {name: 'index', type: 'Number', desc: '在指定的索引处插入，默认在末端插入'}]}, {name: 'removeTableItem', type: 'HTMLElement', desc: '移除由索引指定的项', options: [{name: 'index', type: 'Number', desc: '需要移除的索引项'}], returns: [{type: 'HTMLElement', desc: '被移除的表格对象，不存在该对象或不存在于当前页面的返回null'}]}, {name: 'getTable', type: 'baidu.ui.Table', desc: '根据索引取得表格', options: [{name: 'index', type: 'Number', desc: '索引'}], returns: [{type: 'baidu.ui.Table', desc: '该索引对应的表格对象，不存在该表格对象的返回null'}]}, {name: 'getString', type: 'string', desc: '获得控件字符串', returns: [{type: 'string', desc: 'HTML string.'}]}, {name: 'update', desc: '更新progressBar状态', options: [{name: 'options', type: 'object', desc: '参数.'}]}, {name: 'getValue', type: 'number', desc: '获得当前的value', returns: [{type: 'number', desc: 'value.'}]}, {name: 'disable', desc: '禁用进度条'}, {name: 'enable', desc: '启用进度条'}, {name: 'getTarget', type: 'HTMLElement', desc: '获取target元素', returns: [{type: 'HTMLElement', desc: 'target.'}]}, {name: 'getBar', type: 'HTMLElement', desc: '获取进度条元素', returns: [{type: 'HTMLElement', desc: 'bar.'}]}, {name: 'addCheckbox', desc: '添加单个checkbox到行中', options: [{name: 'rowId', type: 'String', desc: '该行的id'}, {name: 'index'}]}, {name: 'removeCheckbox', desc: '移除一个checkbox', options: [{name: 'rowId', type: 'Object', desc: '该行的id'}]}, {name: 'getTitleCheckbox', type: 'html-element', desc: '取得表格标题的全选checkbox', returns: [{type: 'html-element'}]}, {name: 'setTitleCheckbox', desc: '设置一个自定义的全选checkbox', options: [{name: 'checkboxId', type: 'String', desc: '该checkbox的id'}]}, {name: 'select', desc: '根据给定的数组索引选中checkbox', options: [{name: 'indexArr', type: 'Object', desc: '格式：[1, 3, 8]'}]}, {name: 'unselect', desc: '根据给定的数组索引反选checkbox', options: [{name: 'indexArr', type: 'Object'}]}, {name: 'toggle', desc: '单项的切换选中或反选', options: [{name: 'rsid', type: 'Object'}]}, {name: 'selectAll', desc: '全部选中checkbox'}, {name: 'unselectAll', desc: '全部反选checkbox'}, {name: 'toggleAll', desc: '当全选的checkbox存在时才可以切换全选和全反选'}, {name: 'getSelected', type: 'TypeName', desc: '取得已经选中的数据，如果该行的row.data中设置id则返回所选中的id数组，否则返回该row的data', returns: [{type: 'TypeName'}]}, {name: 'gotoPage', desc: '直接翻到索引指定的页数', options: [{name: 'index', type: 'Object'}]}, {name: 'prevPage', desc: '翻到上一页'}, {name: 'nextPage', desc: '翻到下一页'}, {name: 'getTotalPage', type: 'number', desc: '取得总页数', returns: [{type: 'number'}]}, {name: 'getCurrentPage', type: 'number', desc: '取得当前页数', returns: [{type: 'number'}]}, {name: 'addRow', desc: '新增一个行，', options: [{name: 'options', type: 'Object', desc: '格式同table的addRow'}, {name: 'index', type: 'Number', desc: '在索引的行之前插入，可选项，默认值是在最后插入'}]}, {name: 'removeRow', desc: '移除一个行', options: [{name: 'index', type: 'Object', desc: '需要移除的行的索引'}]}, {name: 'getPagerContainer', type: 'html-element', desc: '取得存放pager的容器', returns: [{type: 'html-element'}]}, {name: 'resize', desc: '重设pager容器的大小'}, {name: 'getTitleBody', type: 'html-element', desc: '取得表格的table对象', returns: [{type: 'html-element'}]}, {name: 'getDaysInMonth', type: 'Number', desc: '获取某年某个月的天数', options: [{name: 'year', type: 'Number', desc: '年份.'}, {name: 'month', type: 'Number', desc: '月份.'}], returns: [{type: 'Number'}]}, {name: 'isLeapYear', type: 'Boolean', desc: '判断传入年份是否时润年', options: [{name: 'year', type: 'Number', desc: '年份.'}], returns: [{type: 'Boolean'}]}, {name: 'toLocaleDate', type: 'Date', desc: '将传入的date对象转换成指定地区的date对象', options: [{name: 'dateObject', type: 'Date'}, {name: 'sLocale', type: 'String', desc: 'dateObject 的地区标识，可选参数，传则以dateObject中获取的为准'}, {name: 'tLocale', type: 'String', desc: '地区名称简写字符.'}], returns: [{type: 'Date'}]}, {name: 'onRegisterSuccess', options: [{name: 'obj'}, {name: 'json'}]}, {name: 'onRegisterFailure', options: [{name: 'obj'}, {name: 'json'}]}, {name: 'open'}, {name: 'changeTab', options: [{name: 'type'}]}, {name: 'renderReg'}, {name: 'setData', options: [{name: 'word'}, {name: 'data'}, {name: 'noShow'}]}, {name: 'beforedeactivateHandler'}, {name: 'getTargetKeydownHandler', methods: [{name: 'keyUpDown', options: [{name: 'up'}]}]}, {name: 'getWindowResizeHandler'}, {name: 'adjustPosition', options: [{name: 'onlyAdjustShown'}]}, {name: 'bodyClick', desc: 'body点击事件，点击body关闭菜单', options: [{name: 'e', type: 'Object', desc: '事件.'}]}, {name: 'trim', type: 'String', desc: '按照某种语言的格式去掉字符串两边的空白字符', options: [{name: 'source', type: 'String', desc: '需要格式化的语言'}, {name: 'locale', type: 'String', desc: '目标语言'}], returns: [{type: 'String'}]}, {name: 'translation', type: 'String', desc: '将传入的字符串翻译成目标语言', options: [{name: 'source', type: 'String', desc: '需要进行翻译的字符串'}, {name: 'locale', type: 'String', desc: '目标语言'}], returns: [{type: 'String'}]}, {name: 'hideModal'}, {name: 'format', type: 'String', desc: '将传入的数字或者文字某种语言的格式进行格式化', options: [{name: 'number', type: 'String|Number', desc: '需要进行格式化的数字或者文字'}, {name: 'sLocale', type: 'String', desc: '可选参数，若传入的number格式为字符串，则该参数必须传入'}, {name: 'tLocale', type: 'String', desc: '目标语言'}], returns: [{type: 'String'}]}]}, 'baidu.ui.ColorPalette': {name: 'ColorPalette', desc: '复杂颜色拾取器', options: [{name: 'options', type: 'Object', desc: '配置.'}, {name: 'options.sliderLength', type: 'Number', desc: '滑动条长度.'}, {name: 'options.coverImgSrc', type: 'String', desc: '调色板渐变背景图片地址.'}, {name: 'options.sliderImgSrc', type: 'String', desc: '滑动条背景图片地址.'}]}, 'baidu.ui.ColorPicker.ColorPicker$click': {name: 'ColorPicker$click', desc: '创建一个鼠标点击触发的colorPicker'}, 'baidu.ui.Combox': {name: 'Combox', desc: 'combox类', options: [{name: 'options', type: 'Object', desc: '选项，用于创建combox。'}, {name: 'options.target', type: 'Element', desc: 'combox的触发元素'}, {name: 'options.width', type: 'Number|String', desc: '宽度值。当指定element时，默认为element宽度；否则不设置（可以通过css指定）。'}, {name: 'options.height', type: 'Number|String', desc: '高度值。当指定element时，默认为element宽度；否则不设置（可以通过css指定）。'}, {name: 'options.skin', type: 'String', desc: '自定义样式前缀'}, {name: 'options.editable', type: 'Boolean', desc: '是否可以输入'}, {name: 'options.data', type: 'Array', desc: '储存combox每个条目的数据。每个条目数据格式: { content: \'some html string\', value : \'\'}。'}, {name: 'options.offset', type: 'Array|Object', desc: '偏移量，若为数组，索引0为x方向，索引1为y方向; 若为Object，键x为x方向，键y为y方向。单位：px，默认值：[0,0]。'}, {name: 'options.zIndex', type: 'Number', desc: '浮起combox层的z-index值，默认为1200。'}, {name: 'options.onitemclick', type: 'Function', desc: 'combox中单个条目鼠标点击的回调函数，参数:{data : {value: Item对应的数据, index : Item索引值}}'}, {name: 'options.onitemclick', type: 'Function', desc: 'combox中单个条目鼠标点击的回调函数，function(evt){}，evt.index返回item的索引，evt.value返回一个json，{content: \'\', value: \'\'}'}, {name: 'options.onbeforeclose', type: 'Function', desc: '关闭之前触发'}, {name: 'options.onclose', type: 'Function', desc: '关闭时触发'}, {name: 'options.onbeforeopen', type: 'Function', desc: '打开之前触发'}, {name: 'options.onopen', type: 'Function', desc: '打开时触发'}, {name: 'options.onmouseover', type: 'Function', desc: '悬停时触发'}, {name: 'options.onmouseout', type: 'Function', desc: '离开时触发'}, {name: 'options.onmousedown', type: 'Function', desc: '鼠标按下时触发'}, {name: 'options.onmouseup', type: 'Function', desc: '鼠标抬起时触发'}], methods: [{name: 'filter', desc: '过滤方法', options: [{name: 'filterStr', type: 'String', desc: '需检索的字符串值'}, {name: 'data', type: 'Array', desc: '目标数据'}]}, {name: 'render', desc: '渲染控件', options: [{name: 'target', type: 'Object', desc: '目标渲染对象'}]}, {name: 'getInput', type: 'HTMLElement', desc: '获取input元素', returns: [{type: 'HTMLElement', desc: 'input元素'}]}, {name: 'getArrow', type: 'HTMLElement', desc: '获取下拉箭头元素', returns: [{type: 'HTMLElement', desc: 'arrow元素'}]}, {name: 'chooseItem', desc: '响应条目被选择,并发出 onitemclick 事件', options: [{name: 'data', type: 'Object', desc: '选中的数据'}]}, {name: 'setValue', desc: '设置input的值', options: [{name: 'value', type: 'String', desc: '值'}]}, {name: 'dispose', desc: '销毁Combox'}]}, 'baidu.ui.createPopup': {name: 'createPopup', desc: '创建一个 Popup 层', options: [{name: 'options', type: 'JSON', desc: '配置信息'}], methods: [{name: 'initIframe', options: [{name: 'delay'}]}]}, 'baidu.ui.Decorator': {name: 'Decorator', desc: '装饰器控件基类'}, 'baidu.ui.Dialog': {name: 'Dialog', desc: 'Dialog基类，建立一个dialog实例', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.content', type: 'DOMElement', desc: '要放到dialog中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'dialog中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度，默认值为400，注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度，默认值为300'}, {name: 'options.top', type: 'String|Number', desc: 'dialog距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'dialog距离页面左方的距离'}, {name: 'options.titleText', type: 'String', desc: 'dialog标题文字'}, {name: 'options.classPrefix', type: 'String', desc: 'dialog样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'dialog的zIndex值，默认值为1000'}, {name: 'options.onopen', type: 'Function', desc: 'dialog打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'dialog关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'dialog关闭前触发，如果此函数返回false，则组织dialog关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'dialog更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭dialog。'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的title。'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}], methods: [{name: 'isShown', type: 'Boolean', desc: '查询当前窗口是否处于显示状态', returns: [{type: 'Boolean', desc: '是否处于显示状态'}]}, {name: 'render', type: 'HTMLElement', desc: '绘制dialog到页面', returns: [{type: 'HTMLElement', desc: 'mainDiv'}]}, {name: 'open', desc: '显示当前dialog'}, {name: 'close', desc: '隐藏当前dialog'}, {name: 'update', desc: '更新dialog状态', options: [{name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到dialog中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'dialog中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度，默认值为400，注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度，默认值为300'}, {name: 'options.top', type: 'String|Number', desc: 'dialog距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'dialog距离页面左方的距离'}, {name: 'options.titleText', type: 'String', desc: 'dialog标题文字'}, {name: 'options.classPrefix', type: 'String', desc: 'dialog样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'dialog的zIndex值，默认值为1000'}, {name: 'options.onopen', type: 'Function', desc: 'dialog打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'dialog关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'dialog关闭前触发，如果此函数返回false，则组织dialog关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'dialog更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭dialog。'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的title。'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}]}, {name: 'getTitle', type: 'HTMLElement', desc: '获得title对应的dom元素', returns: [{type: 'HTMLElement', desc: 'title'}]}, {name: 'getTitleInner', type: 'HTMLElement', desc: '获得title文字对应的dom元素', returns: [{type: 'HTMLElement', desc: 'titleInner'}]}, {name: 'getContent', type: 'HTMLElement', desc: '获得content对应的dom元素', returns: [{type: 'HTMLElement', desc: 'content'}]}, {name: 'getFooter', type: 'HTMLElement', desc: '获得footer对应的dom元素', returns: [{type: 'HTMLElement', desc: 'footer'}]}, {name: 'dispose', desc: '销毁dialog实例'}]}, 'baidu.ui.get': {name: 'get', type: 'object', desc: '获取元素所在的控件', options: [{name: '要查找的元素，如果是字符串，则查找这个guid为此字符串的控件', type: 'HTMLElement|string'}, {name: 'optional', type: 'string', desc: 'type 匹配查找指定类型的控件【暂未支持】'}], returns: [{type: 'object', desc: 'ui控件'}]}, 'baidu.ui.getAttribute': {name: 'getAttribute', desc: '从指定的dom元素中获取ui控件的属性值 todo: &datasource支持', options: [{name: 'element'}]}, 'baidu.ui.getUI': {name: 'getUI', type: 'object', desc: '通过uiType找到UI类查找规则：suggestion -> baidu.ui.Suggestiontoolbar-spacer -> baidu.ui.Toolbar.Spacer.', options: [{name: 'uiType', type: 'String'}], returns: [{type: 'object', desc: 'UI类'}]}, 'baidu.ui.Input': {name: 'Input', type: 'Boolean', desc: 'Input基类，创建一个input实例。', options: [{name: 'target', type: 'String|HTMLElement', desc: '存放input控件的元素，input控件会渲染到该元素内。'}, {name: 'options', type: 'Object', desc: '选项'}, {name: 'options.text', type: 'String', desc: 'input文本信息'}, {name: 'options.disabled', type: 'Boolean', desc: '控件是否有效，默认为false（有效）。'}, {name: 'options.onfocus', type: 'Function', desc: '聚焦时触发'}, {name: 'options.onblur', type: 'Function', desc: '失去焦点时触发'}, {name: 'options.onchage', type: 'Function', desc: 'input内容改变时触发'}, {name: 'options.onkeydown', type: 'Function', desc: '按下键盘时触发'}, {name: 'options.onkeyup', type: 'Function', desc: '释放键盘时触发'}, {name: 'options.onmouseover', type: 'Function', desc: '鼠标悬停在input上时触发'}, {name: 'options.onmouseout', type: 'Function', desc: '鼠标移出input时触发'}, {name: 'options.ondisable', type: 'Function', desc: '当调用input的实例方法disable，使得input失效时触发。'}, {name: 'options.onenable', type: 'Function', desc: '当调用input的实例方法enable，使得input有效时触发。'}, {name: 'options.ondispose', type: 'Function', desc: '销毁实例时触发'}], methods: [{name: 'render', desc: '将input绘制到DOM树中。target参数不可省，否则无法渲染。', options: [{name: 'target', type: 'String|HTMLElement', desc: '目标渲染对象'}]}, {name: 'isDisabled', type: 'Boolean', desc: '判断input是否处于失效状态。', returns: [{type: 'Boolean', desc: '是否处于失效状态'}]}, {name: 'getText', type: 'String', desc: '获得input文字。', returns: [{type: 'String', desc: '输入框的文字'}]}, {name: 'enable', desc: '使input控件有效。'}, {name: 'disable', desc: '使input控件失效。'}, {name: 'dispose', desc: '销毁实例。'}], returns: [{type: 'Boolean', desc: '是否有效，true(失效)/false(有效)。'}]}, 'baidu.ui.ItemSet': {name: 'ItemSet', desc: 'ItemSet是accordion, tab等多item操作的抽象', options: [{name: 'options', type: 'Object', desc: 'config参数.'}, {name: 'options.switchType', type: 'String', desc: '事件激发类型，item由什么类型的事件来打开，取值如：click, mouseover等等'}, {name: 'options.defaultIndex', type: 'Number', desc: '初始化后的默认找开项索引，默认值是0'}]}, 'baidu.ui.Modal': {name: 'Modal', desc: '为控件增加遮罩。', methods: [{name: 'getContainer', type: 'HTMLElement', desc: '获取modal的Container', returns: [{type: 'HTMLElement', desc: 'container.'}]}, {name: 'render', type: 'NULL', desc: '渲染遮罩层', returns: [{type: 'NULL'}]}, {name: 'show', type: 'NULL', desc: '显示遮罩层', options: [{name: 'options', type: 'Object', desc: '显示选项,任何合法的style属性.'}], returns: [{type: 'NULL'}]}, {name: 'hide', type: 'NULL', desc: '隐藏遮罩层', returns: [{type: 'NULL'}]}, {name: 'getWindowHandle', type: 'NULL', desc: 'window.resize & window.scroll 事件调用的function', returns: [{type: 'NULL'}]}, {name: 'update', type: 'NULL', desc: '更新遮罩层', options: [{name: 'options', type: 'Object', desc: '显示选项，同show.'}], returns: [{type: 'NULL'}]}, {name: 'dispose', type: 'Null', desc: '销毁', returns: [{type: 'Null'}]}]}, 'baidu.ui.Pager': {name: 'Pager', desc: '生成分页功能，默认会有一个横向的页面跳转链接列表，其两端有首页，尾页，上一页，下一页。若要自定义样式（如隐藏某些部件），请使用css（注：控件中各部件的css类名都有控件的tangram类名前缀）首页：first，尾页：last，上一页：previous，下一页：next，当前页：current。若要自定义控件生成的HTML，请参考源代码中以tpl开头的模板属性，类中的属性和方法都可以通过options动态覆盖。', options: [{name: 'options', type: 'Object', desc: '更新选项，若选项值不符合规则，则此次更新不予更新任何选项'}, {name: 'options.beginPage', type: 'Number', desc: '页码范围：起始页码，默认值1。'}, {name: 'options.endPage', type: 'Number', desc: '页码范围：最后页码+1，必须大于起始页码，默认值100。'}, {name: 'options.currentPage', type: 'Number', desc: '必须在页码范围内，若未指定currentPage且当前页码已超出页码范围，则会自动将currentPage更新到beginPage。'}, {name: 'options.itemCount', type: 'Number', desc: '默认显示多少个页面的链接（不包括“首页”等特殊链接），默认值10。'}, {name: 'options.leftItemCount', type: 'Number', desc: '当前页面链接在页面链接列表中的默认位置，必须小于itemCount，默认值4。'}, {name: 'options.specialLabelMap', type: 'Object', desc: '设置首页，上一页，下一页链接显示的内容。默认为{first:\'首页\',next:\'下一页\',previous:\'上一页\'}'}, {name: 'options.tplHref', type: 'String', desc: '链接显示样式，默认为\"##{page}\"'}, {name: 'options.tplLabel', type: 'String', desc: '页码显示样式，默认为\"[#{page}]\"'}, {name: 'options.tplCurrentLabel', type: 'String', desc: '选中页码的显示样式'}], methods: [{name: 'update', desc: '更新设置', options: [{name: 'options', type: 'Object', desc: '更新设置'}, {name: 'options.beginPage', type: 'Number', desc: '开始页'}, {name: 'options.endPage', type: 'Number', desc: '结束页'}, {name: 'options.currentPage', type: 'Number', desc: '跳转目标页的索引'}, {name: 'options.itemCount', type: 'Number', desc: '默认列出多少个a标签'}, {name: 'options.leftItemCount', type: 'Function', desc: '当前页的显示位置, 有默认实现'}]}, {name: 'render', desc: '将控件渲染到目标元素', options: [{name: 'container', type: 'String|HTMLElement', desc: '目标元素或元素id'}]}, {name: 'dispose', desc: '销毁控件', methods: [{name: 'callee'}]}]}, 'baidu.ui.Popup': {name: 'Popup', type: 'baidu.ui.Popup', desc: 'popup基类，建立一个popup实例', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.content', type: 'DOMElement', desc: '要放到popup中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'popup中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度。注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'popup距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'popup距离页面左方的距离'}, {name: 'options.classPrefix', type: 'String', desc: 'popup样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'popup的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'popup打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'popup关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'popup关闭前触发，如果此函数返回false，则组织popup关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'popup更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭popup'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的文字'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}], methods: [{name: 'isShown', type: 'Boolean', desc: '查询当前窗口是否处于显示状态', returns: [{type: 'Boolean', desc: '是否处于显示状态'}]}, {name: 'open', desc: '显示当前popup', options: [{name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到popup中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'popup中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度。注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'popup距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'popup距离页面左方的距离'}, {name: 'options.classPrefix', type: 'String', desc: 'popup样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'popup的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'popup打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'popup关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'popup关闭前触发，如果此函数返回false，则组织popup关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'popup更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭popup'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的文字'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}]}, {name: 'close', desc: '隐藏当前popup'}, {name: 'update', desc: '更新popup状态', options: [{name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到popup中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'popup中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度。注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'popup距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'popup距离页面左方的距离'}, {name: 'options.classPrefix', type: 'String', desc: 'popup样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'popup的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'popup打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'popup关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'popup关闭前触发，如果此函数返回false，则组织popup关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'popup更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭popup'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的文字'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}]}, {name: 'dispose', desc: '销毁控件'}], returns: [{type: 'baidu.ui.Popup', desc: 'Popup类'}]}, 'baidu.ui.ProgressBar': {name: 'ProgressBar', desc: '进度条控件', options: [{name: 'options'}]}, 'baidu.ui.setup': {name: 'setup', desc: '从当前页面批量setup所有控件（DOM - 控件）', options: [{name: 'element', type: 'DOMElement', desc: '渲染查找的根元素'}]}, 'baidu.ui.Slider': {name: 'Slider', desc: '拖动条控件，可用作音乐播放进度。', options: [{name: 'target', type: 'String|HTMLElement', desc: '存放滑块控件的元素，按钮会渲染到该元素内。'}, {name: 'options', type: 'Object', desc: '选项layout'}, {name: 'options.value', type: 'Number', desc: '记录滑块的当前进度值'}, {name: 'options.layout', type: 'Number', desc: '滑块的布局[水平：horizontal,垂直：vertical]'}, {name: 'options.min', type: 'Number', desc: '进度条最左边代表的值，默认值取0'}, {name: 'options.max', type: 'Number', desc: '进度条最右边代表的值，默认值取100'}, {name: 'options.range', type: 'Array', desc: '可拖动的范围，取值min到max之间，例如[30, 80]'}, {name: 'options.disabled', type: 'Boolean', desc: '是否禁用'}, {name: 'options.skin', type: 'String', desc: '自定义样式名称前缀'}]}, 'baidu.ui.Tab': {name: 'Tab', desc: 'Tab标签组', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.items', type: 'Function', desc: 'tab中的内容<pre> [{head : \"label1\",body : \"<p>content1</p>\"},{head : \"label2\",body : \"<p>content2</p>\"},{head : \"label3\",body : \"<p>content3</p>\"}]</pre>'}], methods: [{name: 'insertItemHTML', desc: '插入item html', options: [{name: 'item', type: 'Object', desc: '选项内容'}, {name: 'index', type: 'int', desc: '选项的索引'}]}, {name: 'dispose', desc: '销毁实例的析构'}]}, 'baidu.ui.Tree.TreeNode': {name: 'TreeNode', desc: '树节点类', options: [{name: 'options', type: 'Object'}, {name: 'options.isExpand', type: 'Boolean', desc: '是否是展开, 默认值为false'}, {name: 'options.children', type: 'Array', desc: '子节点options数组  默认值为null'}, {name: 'options.isRoot', type: 'Boolean', desc: '是否是根节点,默认值为false'}, {name: 'options.type', type: 'Boolean', desc: '节点类型 trunk|leaf, 默认值为\'leaf\''}, {name: 'options.id', type: 'String', desc: '节点的唯一标识ID。默认为null'}, {name: 'options.text', type: 'String', desc: '节点显示名称. 默认值为null'}, {name: 'options.href', type: 'String', desc: '节点的链接href. 默认值为null'}, {name: 'options.target', type: 'String', desc: '节点链接的target,有href的时候才生效。默认值为null'}, {name: 'options.icon', type: 'String', desc: '节点图标的路径. 默认值为null'}, {name: 'options.skin', type: 'String', desc: '节点样式选择符. 默认值为null'}, {name: 'options.isToggle', type: 'Boolean', desc: '是否支持节点展开或收起 默认值为true'}], methods: [{name: 'getParentNode', type: 'TreeNode', desc: '取得节点的父节点', returns: [{type: 'TreeNode', desc: 'treeNode.'}]}, {name: 'setParentNode', desc: '设置节点的父节点', options: [{name: 'treeNode', type: 'TreeNode'}]}, {name: 'getChildNodes', type: 'Array', desc: '取得节点的子节点数组', returns: [{type: 'Array', desc: 'treeNodes.'}]}, {name: 'setTree', desc: '设置节点的对应的Tree', options: [{name: 'tree', type: 'Tree'}]}, {name: 'getTree', type: 'Tree', desc: '取得节点的对应的Tree', returns: [{type: 'Tree', desc: 'tree.'}]}, {name: 'appendData', desc: '增加一组children数据。数据格式:[{text:\"\",href:\"\",children:[{text:\"\",href:\"\"},{text:\"\",href:\"\"}]},{text:\"\"},{text:\"\"}]可以数组里面嵌套数组', options: [{name: 'array', type: 'Array'}]}, {name: 'isParent', desc: '递归判断本节点是否是传进来treeNode的父节点', options: [{name: 'treeNode', type: 'TreeNode', desc: '节点.'}]}, {name: 'appendTo', desc: '将已有节点添加到目标节点中，成为这个目标节点的子节点。', options: [{name: ':', desc: 'parentNode'}]}, {name: 'moveTo', desc: '将此节点移动至一个目标节点,成为这个目标节点的next节点', options: [{name: 'treeNode'}]}, {name: 'appendChild', type: 'TreeNode', desc: '新增一个子节点1.先判断子节点是否被渲染过，如果渲染过，就将子节点append到自己subNodes容器里  否则就inertHTML的子节点的getString2.对parentNode与childNodes进行变更。3.更新treeNode与tree的update', options: [{name: '需要加入的节点(分为已经渲染的节点和为被渲染的节点)', type: 'TreeNode', desc: '通过treeNode._getContainer()返回值来判断是否被渲染.'}, {name: '此节点做为', type: 'index', desc: '节点集合的[index+1]的值'}], returns: [{type: 'TreeNode', desc: 'treeNode 返回被新增的child'}]}, {name: 'removeAllChildren', desc: '批量删除一个节点下的所有子节点'}, {name: 'removeChild', desc: '删除一个子节点1.删除此节点对象的数据结构2.删除此节点所对应的dom元素对象', options: [{name: 'treeNode', type: 'TreeNode'}]}, {name: 'update', desc: '更新节点的一系列属性1.如有text,就更新text.2.如有icon', options: [{name: 'options', type: 'Object'}]}, {name: 'expand', desc: '展开节点分步渲染。第一次expand会渲染节点'}, {name: 'collapse', desc: '收起节点'}, {name: 'toggle', desc: '切换，收起或者展开'}, {name: 'blur', desc: '失去焦点,让当前节点取消高亮。'}, {name: 'focus', desc: '取得焦点,并且让当前节点高亮，让上一节点取消高亮。'}, {name: 'hide', desc: '隐藏节点，但不包括它的子节点。'}, {name: 'show', desc: '显示节点。'}, {name: 'expandAll', desc: '递归展开所有子节点'}, {name: 'collapseAll', desc: '递归收起所有子节点'}, {name: 'getIndex', type: 'int', desc: '取得本节点所对应父节点的索引', returns: [{type: 'int', desc: 'index.'}]}, {name: 'getNext', type: 'TreeNode', desc: '取得本节点的下一个节点如果没有就返回自己', returns: [{type: 'TreeNode', desc: 'next.'}]}, {name: 'getPrevious', type: 'TreeNode', desc: '取得本节点的上一个节点如果没有就返回自己', returns: [{type: 'TreeNode', desc: 'previous.'}]}, {name: 'getFirstChild', type: 'TreeNode', desc: '取得本节点的第一个子节点如果没有就返回null', returns: [{type: 'TreeNode', desc: 'previous.'}]}, {name: 'getLastChild', type: 'TreeNode', desc: '取得本节点的最后一个子节点如果没有就返回null', returns: [{type: 'TreeNode', desc: 'previous.'}]}, {name: 'isLastNode', type: 'Boolean', desc: '是否是最后一个节点在初始渲染节点的时候，自己维护了一个_isLast,就不用去动态算是否是最后一个子节点。而在动态新增，删除节点时，动态的处理是否是最后一个节点能方便代码实现，这样做的目的既能保证初始化时的性能，也能够方便动态功能的实现。.', options: [{name: 'isInit'}], returns: [{type: 'Boolean', desc: 'true | false.'}]}]}, 'baidu.widget.dispose': {name: 'dispose', desc: '析构widget. 如果widget有dispose方法,则执行.', options: [{name: 'name', type: 'String', desc: 'widget名.'}]}, 'baidu.widget.get': {name: 'get', type: 'Object', desc: '获取已加载的widget.', options: [{name: 'name', type: 'String', desc: 'widget名.'}], returns: [{type: 'Object', desc: 'widget'}]}}
}
