
var tangram_component_api = {
	nameSpace: [{n: 'baidu.data', p: 'baidu'}, {n: 'baidu.data.dataSource', p: 'baidu.data'}, {n: 'baidu.data.dataSource.ajax', p: 'baidu.data.dataSource'}, {n: 'baidu.data.dataSource.DataSource', p: 'baidu.data.dataSource'}, {n: 'baidu.data.dataSource.local', p: 'baidu.data.dataSource'}, {n: 'baidu.data.dataSource.sio', p: 'baidu.data.dataSource'}, {n: 'baidu.data.storage', p: 'baidu.data'}, {n: 'baidu.data.XPC', p: 'baidu.data'}, {n: 'baidu.flash', p: 'baidu'}, {n: 'baidu.flash.avatarMaker', p: 'baidu.flash'}, {n: 'baidu.flash.fileUploader', p: 'baidu.flash'}, {n: 'baidu.flash.imageUploader', p: 'baidu.flash'}, {n: 'baidu.form', p: 'baidu'}, {n: 'baidu.form.Validator', p: 'baidu.form'}, {n: 'baidu.form.Validator.register', p: 'baidu.form.Validator'}, {n: 'baidu.form.ValidRule', p: 'baidu.form'}, {n: 'baidu.fx', p: 'baidu'}, {n: 'baidu.fx.collapse', p: 'baidu.fx'}, {n: 'baidu.fx.create', p: 'baidu.fx'}, {n: 'baidu.fx.current', p: 'baidu.fx'}, {n: 'baidu.fx.expand', p: 'baidu.fx'}, {n: 'baidu.fx.fadeIn', p: 'baidu.fx'}, {n: 'baidu.fx.fadeOut', p: 'baidu.fx'}, {n: 'baidu.fx.getTransition', p: 'baidu.fx'}, {n: 'baidu.fx.highlight', p: 'baidu.fx'}, {n: 'baidu.fx.mask', p: 'baidu.fx'}, {n: 'baidu.fx.move', p: 'baidu.fx'}, {n: 'baidu.fx.moveBy', p: 'baidu.fx'}, {n: 'baidu.fx.moveTo', p: 'baidu.fx'}, {n: 'baidu.fx.opacity', p: 'baidu.fx'}, {n: 'baidu.fx.puff', p: 'baidu.fx'}, {n: 'baidu.fx.pulsate', p: 'baidu.fx'}, {n: 'baidu.fx.remove', p: 'baidu.fx'}, {n: 'baidu.fx.scale', p: 'baidu.fx'}, {n: 'baidu.fx.scrollBy', p: 'baidu.fx'}, {n: 'baidu.fx.scrollTo', p: 'baidu.fx'}, {n: 'baidu.fx.shake', p: 'baidu.fx'}, {n: 'baidu.fx.Timeline', p: 'baidu.fx'}, {n: 'baidu.fx.zoomIn', p: 'baidu.fx'}, {n: 'baidu.fx.zoomOut', p: 'baidu.fx'}, {n: 'baidu.history', p: 'baidu'}, {n: 'baidu.i18n', p: 'baidu'}, {n: 'baidu.tools', p: 'baidu'}, {n: 'baidu.tools.log', p: 'baidu.tools'}, {n: 'baidu.tools.log.Dialog', p: 'baidu.tools.log'}, {n: 'baidu.ui', p: 'baidu'}, {n: 'baidu.ui.Accordion', p: 'baidu.ui'}, {n: 'baidu.ui.Base', p: 'baidu.ui'}, {n: 'baidu.ui.Base.dispose', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.getBody', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.getCallRef', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.getCallString', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.getClass', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.getId', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.getMain', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.getParent', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.on', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.renderMain', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.setParent', p: 'baidu.ui.Base'}, {n: 'baidu.ui.Base.uiType', p: 'baidu.ui.Base'}, {n: 'baidu.ui.behavior', p: 'baidu.ui'}, {n: 'baidu.ui.behavior.coverable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.decorator', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.draggable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.droppable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.posable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.posable.setPositionByElement', p: 'baidu.ui.behavior.posable'}, {n: 'baidu.ui.behavior.posable.setPositionByMouse', p: 'baidu.ui.behavior.posable'}, {n: 'baidu.ui.behavior.resizable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.sortable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.behavior.statable', p: 'baidu.ui.behavior'}, {n: 'baidu.ui.Button', p: 'baidu.ui'}, {n: 'baidu.ui.Calendar', p: 'baidu.ui'}, {n: 'baidu.ui.Carousel', p: 'baidu.ui'}, {n: 'baidu.ui.ColorPalette', p: 'baidu.ui'}, {n: 'baidu.ui.ColorPicker', p: 'baidu.ui'}, {n: 'baidu.ui.ColorPicker.ColorPicker$click', p: 'baidu.ui.ColorPicker'}, {n: 'baidu.ui.ColorPicker.ColorPicker$more', p: 'baidu.ui.ColorPicker'}, {n: 'baidu.ui.Combox', p: 'baidu.ui'}, {n: 'baidu.ui.create', p: 'baidu.ui'}, {n: 'baidu.ui.createPopup', p: 'baidu.ui'}, {n: 'baidu.ui.createUI', p: 'baidu.ui'}, {n: 'baidu.ui.DatePicker', p: 'baidu.ui'}, {n: 'baidu.ui.Decorator', p: 'baidu.ui'}, {n: 'baidu.ui.Dialog', p: 'baidu.ui'}, {n: 'baidu.ui.get', p: 'baidu.ui'}, {n: 'baidu.ui.getAttribute', p: 'baidu.ui'}, {n: 'baidu.ui.getUI', p: 'baidu.ui'}, {n: 'baidu.ui.Input', p: 'baidu.ui'}, {n: 'baidu.ui.ItemSet', p: 'baidu.ui'}, {n: 'baidu.ui.Login', p: 'baidu.ui'}, {n: 'baidu.ui.Menubar', p: 'baidu.ui'}, {n: 'baidu.ui.Modal', p: 'baidu.ui'}, {n: 'baidu.ui.Pager', p: 'baidu.ui'}, {n: 'baidu.ui.Popup', p: 'baidu.ui'}, {n: 'baidu.ui.ProgressBar', p: 'baidu.ui'}, {n: 'baidu.ui.ScrollBar', p: 'baidu.ui'}, {n: 'baidu.ui.ScrollPanel', p: 'baidu.ui'}, {n: 'baidu.ui.setup', p: 'baidu.ui'}, {n: 'baidu.ui.Slider', p: 'baidu.ui'}, {n: 'baidu.ui.StarRate', p: 'baidu.ui'}, {n: 'baidu.ui.Suggestion', p: 'baidu.ui'}, {n: 'baidu.ui.Tab', p: 'baidu.ui'}, {n: 'baidu.ui.Table', p: 'baidu.ui'}, {n: 'baidu.ui.Toolbar', p: 'baidu.ui'}, {n: 'baidu.ui.Tooltip', p: 'baidu.ui'}, {n: 'baidu.ui.Tree', p: 'baidu.ui'}, {n: 'baidu.ui.Tree.TreeNode', p: 'baidu.ui.Tree'}, {n: 'baidu.widget', p: 'baidu'}, {n: 'baidu.widget.create', p: 'baidu.widget'}, {n: 'baidu.widget.dispose', p: 'baidu.widget'}, {n: 'baidu.widget.get', p: 'baidu.widget'}, {n: 'baidu.widget.getPath', p: 'baidu.widget'}, {n: 'baidu.widget.load', p: 'baidu.widget'}],
	docMap: {'baidu.data.dataSource.ajax': {name: 'ajax', desc: '异步调用数据源类', grammar: '', options: [{name: 'url', type: 'String', desc: '数据源地址'}, {name: 'options', type: 'Object', desc: '配置'}, {name: 'options.maxCache', type: 'Number', desc: '缓存数据的最大个数'}, {name: 'options.cache', type: 'Boolean', desc: '是否使用缓存'}, {name: 'optons.transition', type: 'Function', desc: '转换数据算法'}, {name: 'options.onbeforeget', type: 'Function', desc: 'beforeget事件'}]}, 'baidu.data.dataSource.local': {name: 'local', desc: '本地数据源类', grammar: '', options: [{name: 'source', type: 'Object', desc: '数据源'}, {name: 'options', type: 'Object', desc: '配置'}, {name: 'options.maxCache', type: 'Number', desc: '缓存数据的最大个数'}, {name: 'options.cache', type: 'Boolean', desc: '是否使用缓存'}, {name: 'optons.transition', type: 'Function', desc: '转换数据算法'}, {name: 'options.onbeforeget', type: 'Function', desc: 'beforeget事件'}]}, 'baidu.data.dataSource.sio': {name: 'sio', desc: '跨域数据源类', grammar: '', options: [{name: 'url', type: 'String', desc: '数据源地址'}, {name: 'options', type: 'Object', desc: '配置'}, {name: 'options.maxCache', type: 'Number', desc: '缓存数据的最大个数'}, {name: 'options.cache', type: 'Boolean', desc: '是否使用缓存'}, {name: 'optons.transition', type: 'Function', desc: '转换数据算法'}, {name: 'options.onbeforeget', type: 'Function', desc: 'beforeget事件'}]}, 'baidu.data.storage': {name: 'storage', desc: '一个本地存储对象，使用key-value的方式来存值，不具备夸浏览器通信功能，根据浏览器的不同自动选择userData或是localStorage或是cookie来存值.', grammar: ''}, 'baidu.data.XPC': {name: 'XPC', desc: 'XPC(cross page channel) 跨域通信模块', grammar: 'new baidu.data.XPC(true, url[, {timeout:1000}])', options: [{name: 'isParent', type: 'boolean', desc: '确定当前页面角色，如果是父页面，则为true，跨域的子页面为false，默认值为false.'}, {name: 'url', type: 'string', desc: '在对方域下部署的子页面，如果isParent为true，则此参数为必须，否则可以省略.'}, {name: 'timeout', type: 'number', desc: '设置超时时间(ms)，超过这个时间视为初始化失败，默认值是3000.'}]}, 'baidu.flash.avatarMaker': {name: 'avatarMaker', desc: '创建flash based avatarMaker', grammar: '', options: [{name: 'createOptions', type: 'Object', desc: '创建flash时需要的参数，请参照baidu.swf.create文档'}, {name: 'createOptions.vars', type: 'Object', desc: '创建avatarMaker时所需要的参数'}, {name: 'createOptions.vars.locale', type: 'String', desc: '地区,现在支持vi、th、ar三种，分别是越南语、泰语和阿拉伯语，当使用阿拉伯语时，界面会变成rtl形式,默认为[zh-cn]'}, {name: 'createOptions.vars.bigFileName', type: 'String', desc: '80*80图片文件数据字段名，默认为\'bigFile\''}, {name: 'createOptions.vars.middleFileName', type: 'String', desc: '60*60图片文件数据字段名，默认为\'middleFile\''}, {name: 'createOptions.vars.smallFileName', type: 'String', desc: '60*60图片文件数据字段名，默认为’middleFile‘'}, {name: 'createOptions.vars.imageQuality', type: 'Number', desc: '图片的压缩质量0-100， 默认为 80'}, {name: 'createOptions.uploadURL', type: 'String', desc: '上传图片到的url地址'}, {name: 'createOptions.tipHandler', type: 'Function|String', desc: 'js提示函数，当flash发生异常，调用此函数显示出错信息。该函数接收一个String类型的参数，为需要显示的文字'}, {name: 'createOptions.uploadCallBack', type: 'Function|String', desc: '上传之后的回调函数'}]}, 'baidu.flash.fileUploader': {name: 'fileUploader', desc: '创建flash based fileUploader', grammar: '', options: [{name: 'createOptions', type: 'Object', desc: '创建flash时需要的参数，请参照baidu.swf.create文档'}, {name: 'width', type: 'String'}, {name: 'height', type: 'String'}, {name: 'selectiFile', type: 'Function|String'}, {name: 'exceedMaxSize', type: 'Function|String'}, {name: 'deleteFile', type: 'Function|String'}, {name: 'uploadStart', type: 'Function|String'}, {name: 'uploadComplete', type: 'Function|String'}, {name: 'uploadError', type: 'Function|String'}, {name: 'uploadProgress', type: 'Function|String'}]}, 'baidu.flash.imageUploader': {name: 'imageUploader', desc: '创建flash based imageUploader', grammar: '', options: [{name: 'createOptions', type: 'Object', desc: '创建flash时需要的参数，请参照baidu.swf.create文档'}, {name: 'createOptions.vars', type: 'Object', desc: '创建imageUploader时所需要的参数'}, {name: 'createOptions.vars.url', type: 'String', desc: '图片上传的url地址,默认值\'Upload.php\''}, {name: 'createOptions.vars.fileType', type: 'String', desc: '可上传的图片的类型字符串，默认值                 \'{\"description\":\"图片\", \"extension\":\"*.gif; *.jpeg; *.png; *.jpg; *.bmp\"}\''}, {name: 'createOptions.vars.maxNum', type: 'Number', desc: '允许上传的最大图片数量，默认值32'}, {name: 'createOptions.vars.maxSize', type: 'Number', desc: '允许上传的单张图片的最大体积,默认值3MB'}, {name: 'createOptions.vars.compressSize', type: 'Number', desc: '超过多少MB的图片需要压缩,默认值3MB'}, {name: 'createOptions.vars.compressLength', type: 'Number', desc: '允许上传的图片最大尺寸,默认值1200px'}, {name: 'createOptions.vars.uploadDataFieldName', type: 'String', desc: '上传的图片数据在POST请求中的key值,默认值\'uploadDataField\''}, {name: 'createOptions.vars.picDescFieldName', type: 'String', desc: '图片的描述信息在POST请求中的key值,默认值\'uploadDescField\''}, {name: 'createOptions.vars.ext', type: 'object', desc: '其他需要通过post上传的参数，默认值null'}, {name: 'createOptions.vars.supportGif', type: 'Number', desc: '是否支持动态gif图片,取值范围[0,1]，默认值为0'}]}, 'baidu.form.Validator': {name: 'Validator', desc: '表单验证组件', grammar: '', options: [{name: 'form', type: 'HTMLElement|String', desc: '一个表单对象的引用或是该id的字符串标识'}, {name: 'fieldRule', type: 'Object', desc: '对验证规则的配置，一个验证域需要的配置包括验证域名称，验证规则，提示信息(可选，需要Validator$message支持)，提示信息存放容器(可选，需要Validator$message支持)，验证触发事件(可选)，一个完整的配置大致如：fieldName: {rule: {required: {param: true, message: {success: \'success msg\', failure: \'failure msg\'}}, maxlength: {param: 50, message: \'failure msg\'}, email: true}, messageContainer: \'myMsgElement\', eventName: \'keyup,blur\'}'}, {name: 'options参数描述', type: 'Object'}, {name: 'options参数描述.validateEvent：描述全局的各个验证域的触发验证事件，如\'blur,click\'，默认是blur', type: 'String'}, {name: 'options参数描述.validateOnSubmit：描述是否当提交表单时做验证，默认是true.', type: 'Boolean'}, {name: 'options参数描述.onvalidatefield:', type: 'Function', desc: '验证单个验证域结束时的触发事件，function(event){}，event.field返回当次验证域的名称，event.resultList返回验证失败的项目数组(当验证成功时该数组长度为0)，各个项是json数据，格式如：{type: 类型, field: 被验证域名称}.'}, {name: 'options参数描述.onvalidate：验证全部验证域结束时的触发事件，function(event){}，event.resultList返回验证失败的项目数组(当验证成功时该数组长度为0)，各个项是json数据，格式如：{type:', type: 'Function', desc: '类型, field: 被验证域名称}.'}], methods: [{name: 'addRule', desc: '添加一条规则到当前的验证器中', grammar: '', options: [{name: 'name', type: 'String', desc: '规则名称'}, {name: 'handler', type: 'Functioin|RegExp', desc: '验证函数或是验证正则表达式，当是函数时需要在实现在显示返回一个boolean值'}, {name: 'message', type: 'Object|String', desc: '验证结果的提示信息，如：{success: \'success msg\', failure: \'failure msg\'}，当只有传入字符串时表示只有failure的提示'}]}, {name: 'validate', desc: '对所有表单进行验证，并把验证结果返回在callback函数中', grammar: '', options: [{name: 'callback', type: 'Function', desc: '验证结束后的回调函数，第一参数表示验证结果，第二参数表示验证的失败项数组，各个项的json格式如：{type: 类型, field: 被验证域名称}'}]}, {name: 'validateField', desc: '对单个验证域进行验证，结果返回在callback回调函数中', grammar: '', options: [{name: 'name', type: 'String', desc: '单个验证域的名称'}, {name: 'callback', type: 'Function', desc: '验证结束后的回调函数，第一参数表示验证结果，第二参数表示验证的失败项数组，各个项的json格式如：{type: 类型, field: 被验证域名称}'}], methods: [{name: 'finish', grammar: ''}]}, {name: 'dispose', desc: '析构函数', grammar: ''}, {name: 'register', grammar: '', options: [{name: 'fn'}]}, {name: 'getMessageContainer', type: 'HTMLElement', desc: '取得一个验证域对应的信息提示容器，如果该容器不存在返回空值', grammar: '', options: [{name: 'field', type: 'String', desc: '验证域的name'}], returns: [{type: 'HTMLElement', desc: '存放信息提示的容器'}]}]}, 'baidu.form.ValidRule': {name: 'ValidRule', desc: '验证规则组件，提供各种基础验证，默认的验证方式有以下几种：required(必填)，remote(Ajax验证)，email(电子邮件验证)，number(数字验证)，maxlength(最大长度验证)，minlength(最小长度验证)，rangelength(长度范围验证)，equal(等于验证)，telephone(电话号码)', grammar: '', methods: [{name: 'match', desc: '用一个验证方法对一个已经存在的值进行验证，并将结果返回到回调中。说明：如果是一个remote验证，则是一个ajax验证，请让服务器返回true或是false来表示验证结果', grammar: '', options: [{name: 'name', type: 'String', desc: '验证方法的名称，如：required,email等'}, {name: 'val', type: 'String', desc: '需要被验证的字符串值，如果是remote该参数可以忽视'}, {name: 'callback', type: 'Function', desc: '验证结束的回调，第一参数为验证结果'}, {name: 'options', type: 'Object', desc: '表示验证需要的参数，如当验证类型是maxlength时，需要options是{param:10}'}]}, {name: 'addRule', desc: '增加一条验证规则', grammar: '', options: [{name: 'name', type: 'String', desc: '验证规则的名称'}, {name: 'handler', type: 'Function|RegExp', desc: '执行验证的函数或是正则表达式，如果是函数，需要返回一个boolean'}]}]}, 'baidu.fx.collapse': {name: 'collapse', desc: '从下向上收拢DOM元素的效果。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.orientation', type: 'String', desc: '动画收拢方向，取值：vertical（默认），horizontal'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//在onafterfinish与oncancel时默认调用'}]}, 'baidu.fx.create': {name: 'create', type: 'baidu.fx.Timeline', desc: '效果基类。', grammar: '', options: [{name: 'element', type: 'HTMLElement', desc: '添加效果的DOM元素'}, {name: 'options', type: 'JSON', desc: '时间线的配置参数对象'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}, {name: 'fxName', type: 'String', desc: '效果名（可选）'}], returns: [{type: 'baidu.fx.Timeline', desc: '时间线类的一个实例'}]}, 'baidu.fx.current': {name: 'current', type: 'Array', desc: '获取DOM元素正在运行的效果实例列表', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '被查询的DOM元素或元素id'}], returns: [{type: 'Array', desc: '效果对象'}]}, 'baidu.fx.expand': {name: 'expand', desc: '自上而下展开DOM元素的效果。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.orientation', type: 'String', desc: '动画展开方向，取值：vertical（默认），horizontal'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.fadeIn': {name: 'fadeIn', desc: '渐现渐变效果。注意，如果元素的visibility属性如果为hidden，效果将表现不出来。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.fadeOut': {name: 'fadeOut', desc: '渐隐渐变效果，效果执行结束后会将元素完全隐藏起来。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.getTransition': {name: 'getTransition', type: 'function', desc: '获取线型函数', grammar: '', options: [{name: 'name', type: 'String', desc: 'transition的名称'}], returns: [{type: 'function', desc: '线型函数'}]}, 'baidu.fx.highlight': {name: 'highlight', desc: '这个方法改变DOM元素的背景色，实现高亮的效果。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.beginColor', type: 'String', desc: '渐变开始时的背景色，如果设置了背景色则以设置的颜色为默认开始颜色，否则默认为\'#FFFF00\''}, {name: 'options.endColor', type: 'String', desc: '渐变结束时的背景色，如果设置了背景色则以设置的颜色为默认结束颜色，否则默认为\'#FFFFFF\''}, {name: 'options.finalColor', type: 'String', desc: '渐变结束时的背景色，如果设置了背景色则以设置的颜色为结束时背景色，否则默认为endColor值'}, {name: 'options.textColor', type: 'String', desc: '渐变结束时的背景色，如果设置了背景色则以设置的颜色为结束时文本的颜色，否则默认为原文本色值'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.mask': {name: 'mask', desc: '面具遮罩效果。注意：只适用于绝对定位的DOM元素.', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.startOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标。取值包括像素(含px字符)，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '0,//效果起始值。介于0到1之间的一个数字，默认为0。'}, {name: 'options.to', type: 'Number', desc: '1,//效果结束值。介于0到1之间的一个数字，默认为1。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.move': {name: 'move', desc: '移动元素，将参数元素移动到指定位置。注意：对static定位的DOM元素无效。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.x', type: 'Number', desc: '0,//横坐标移动的偏移量，默认值为0px。'}, {name: 'options.y', type: 'Number', desc: '0,//纵坐标移动的偏移量，默认值为0px。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.moveBy': {name: 'moveBy', desc: '移动渐变效果。这个效果会使目标元素移动指定的距离。注意: 对static定位的DOM元素无效。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'distance', type: 'Array|Object', desc: '偏移距离。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向；单位：px，默认值为：0。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.restore', type: 'Function', desc: 'restore方法,在onafterfinish与oncancel时默认调用'}, {name: 'options.restoreAfterFinish', type: 'Boolean', desc: '默认为true，在onafterfinish与oncancel事件中调用restore方法。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.moveTo': {name: 'moveTo', desc: '移动渐变效果，该效果使元素移动到指定的位置。注意：对static定位的DOM元素无效。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'point', type: 'Array|Object', desc: '目标点坐标。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向；单位：px，默认值：元素本来的坐标。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.opacity': {name: 'opacity', desc: '控制元素的透明度 渐变', grammar: '', options: [{name: 'element', type: 'String|Object', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.from', type: 'Number', desc: '0,//效果起始值。介于0到1之间的一个数字，默认为0。'}, {name: 'options.to', type: 'Number', desc: '1,//效果结束值。介于0到1之间的一个数字，默认为1。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.puff': {name: 'puff', desc: '将DOM元素放大，关逐渐透明消失。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '800,//效果持续时间，默认值为800ms。'}, {name: 'options.to', type: 'Number', desc: '1.8,//放大倍数，默认1.8。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.pulsate': {name: 'pulsate', desc: '心跳闪现效果。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'loop', type: 'Number', desc: '心跳次数，小于0则为永远跳动，默认为0次。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.remove': {name: 'remove', desc: '删除元素的时候使用fadeOut效果', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.scale': {name: 'scale', desc: '将元素放大或缩小的效果。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.transformOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标，取值包括像素(含px字符，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '效果起始值，介于0到1之间的一个数字。'}, {name: 'options.to', type: 'Number', desc: '效果结束值，介于0到1之间的一个数字。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.fade', type: 'Boolean', desc: 'true，//渐变，默认为true'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.scrollBy': {name: 'scrollBy', desc: '按指定量移动滚动条。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'distance', type: 'Array|JSON', desc: '移动的距离 [,] | {x,y}，支持数组与JSON格式'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.scrollTo': {name: 'scrollTo', desc: '滚动条滚动到指定位置。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'point', type: 'Array|JSON', desc: '移动的距离 [,] | {x,y}，支持数组与JSON格式'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.shake': {name: 'shake', desc: '颤动的效果。说明：在效果执行过程中会修改DOM元素的position属性，可能会对包含的DOM元素带来影响', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'offset', type: 'Array|Object', desc: '震动范围。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向；单位：px，默认值：元素本来的坐标。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}], methods: [{name: 'tt', grammar: ''}]}, 'baidu.fx.Timeline': {name: 'Timeline', desc: '提供一个按时间进程的时间线类本类提供两个方法： cancel()    取消操作 end()       直接结束使用本类时需要实现五个接口： initialize()            用于类初始化时的操作 transition(percent)    重新计算时间线进度曲线 finish()                用于类结束时时的操作 render(schedule)        每个脉冲在DOM上的效果展现 restore()               效果被取消时作的恢复操作', grammar: '', options: [{name: 'arguments.interval', type: 'Number', desc: '脉冲间隔时间（毫秒）'}, {name: 'arguments.duration', type: 'Number', desc: '时间线总时长（毫秒）'}, {name: 'arguments.percent', type: 'Number', desc: '时间线进度的百分比'}]}, 'baidu.fx.zoomIn': {name: 'zoomIn', desc: '将元素放大的展现效果。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.transformOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标，取值包括像素(含px字符)，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '0.1,//效果默认起始值'}, {name: 'options.to', type: 'Number', desc: '1,//效果结束默认值，输入的数值越大，图片显示的越大。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.zoomOut': {name: 'zoomOut', desc: '将元素缩小的消失效果。', grammar: '', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.transformOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标，取值包括像素(含px字符)，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '1,//效果起始值。介于0到1之间的一个数字，默认为1。'}, {name: 'options.to', type: 'Number', desc: '0.1,//效果结束值。介于0到1之间的一个数字，默认为0.1。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.tools.log': {name: 'log', desc: '打印日志', grammar: '', methods: [{name: 'Dialog', grammar: '', options: [{name: 'options'}], methods: [{name: 'open', type: 'Null', desc: '打开dialog', grammar: '', returns: [{type: 'Null'}]}, {name: 'close', type: 'Null', desc: '关闭dialog', grammar: '', returns: [{type: 'Null'}]}, {name: 'push', type: 'Null', desc: '向dialog中pushlog日志', grammar: '', options: [{name: 'data'}], returns: [{type: 'Null'}]}, {name: 'clear', type: 'Null', desc: '清空数据', grammar: '', options: [{name: 'type'}], returns: [{type: 'Null'}]}]}]}, 'baidu.ui.Base': {name: 'Base', desc: 'UI基类，所有的UI都应该从这个类中派生出去', grammar: '', methods: [{name: 'getId', type: 'string', desc: '获得当前控件的id', grammar: '', options: [{name: 'optional', type: 'string', desc: 'key'}], returns: [{type: 'string', desc: 'id'}]}, {name: 'getClass', type: 'string', desc: '获得class，支持skin', grammar: '', options: [{name: 'optional', type: 'string', desc: 'key'}], returns: [{type: 'string', desc: 'className'}]}, {name: 'getMain', grammar: ''}, {name: 'getBody', grammar: ''}, {name: 'getCallRef', desc: '获取调用的字符串的引用前缀', grammar: ''}, {name: 'getCallString', desc: '获取调用的字符串', grammar: '', options: [{name: 'fn'}]}, {name: 'on', desc: '添加事件. 避免析构中漏掉注销事件.', grammar: '', options: [{name: 'element', type: 'HTMLElement|string|window', desc: '目标元素或目标元素id'}, {name: 'type', type: 'string', desc: '事件类型'}, {name: 'listener', type: 'Function', desc: '需要添加的监听器'}]}, {name: 'renderMain', type: 'HTMLElement', desc: '渲染控件到指定的元素', grammar: '', options: [{name: 'main', type: 'HTMLElement', desc: 'optional   要渲染到的元素，可选。                                     如果不传此参数，则会在body下创建一个绝对定位的div做为main'}], returns: [{type: 'HTMLElement', desc: 'main 渲染到的元素'}]}, {name: 'dispose', desc: '销毁当前实例', grammar: ''}, {name: 'setParent', desc: '设置UI控件的父控件', grammar: '', options: [{name: '父控件', type: 'UI'}]}, {name: 'getParent', type: 'UI', desc: '获取UI控件的父控件', grammar: '', returns: [{type: 'UI', desc: '父控件'}]}]}, 'baidu.ui.Base.dispose': {name: 'dispose', desc: '销毁当前实例', grammar: ''}, 'baidu.ui.Base.getCallRef': {name: 'getCallRef', desc: '获取调用的字符串的引用前缀', grammar: ''}, 'baidu.ui.Base.getCallString': {name: 'getCallString', desc: '获取调用的字符串', grammar: '', options: [{name: 'fn'}]}, 'baidu.ui.Base.getClass': {name: 'getClass', type: 'string', desc: '获得class，支持skin', grammar: '', options: [{name: 'optional', type: 'string', desc: 'key'}], returns: [{type: 'string', desc: 'className'}]}, 'baidu.ui.Base.getId': {name: 'getId', type: 'string', desc: '获得当前控件的id', grammar: '', options: [{name: 'optional', type: 'string', desc: 'key'}], returns: [{type: 'string', desc: 'id'}]}, 'baidu.ui.Base.getParent': {name: 'getParent', type: 'UI', desc: '获取UI控件的父控件', grammar: '', returns: [{type: 'UI', desc: '父控件'}]}, 'baidu.ui.Base.on': {name: 'on', desc: '添加事件. 避免析构中漏掉注销事件.', grammar: '', options: [{name: 'element', type: 'HTMLElement|string|window', desc: '目标元素或目标元素id'}, {name: 'type', type: 'string', desc: '事件类型'}, {name: 'listener', type: 'Function', desc: '需要添加的监听器'}]}, 'baidu.ui.Base.renderMain': {name: 'renderMain', type: 'HTMLElement', desc: '渲染控件到指定的元素', grammar: '', options: [{name: 'main', type: 'HTMLElement', desc: 'optional   要渲染到的元素，可选。                                     如果不传此参数，则会在body下创建一个绝对定位的div做为main'}], returns: [{type: 'HTMLElement', desc: 'main 渲染到的元素'}]}, 'baidu.ui.Base.setParent': {name: 'setParent', desc: '设置UI控件的父控件', grammar: '', options: [{name: '父控件', type: 'UI'}]}, 'baidu.ui.Base.uiType': {name: 'uiType', desc: '控件类型：如dialog', grammar: ''}, 'baidu.ui.behavior': {name: 'behavior', desc: '为各个控件增加装饰器。', grammar: '', methods: [{name: 'resizable', grammar: ''}, {name: 'draggable', grammar: ''}, {name: 'coverable', grammar: ''}, {name: 'statable', grammar: ''}, {name: 'decorator', grammar: ''}, {name: 'droppable', grammar: ''}, {name: 'posable', grammar: '', methods: [{name: 'setPositionByElement', desc: '将控件或者指定元素与指定的元素对齐', grammar: '', options: [{name: 'target', type: 'HTMLElement|string', desc: '要对齐到的元素.'}, {name: 'element', type: 'HTMLElement|string', desc: 'optional 要对齐的元素或元素id，如果不指定，默认为当前控件的主元素.'}, {name: 'options', type: 'Object', desc: 'optional 选项，同setPosition方法.'}]}, {name: 'setPositionByMouse', desc: '将控件或者指定元素放置到当前鼠标位置', grammar: '', options: [{name: 'element', type: 'HTMLElement|string', desc: 'optional 要对齐的元素或元素id，如果不指定，默认为当前控件的主元素.'}, {name: 'options', type: 'Object', desc: 'optional 选项，同setPosition方法.'}]}]}, {name: 'sortable', grammar: ''}]}, 'baidu.ui.behavior.posable.setPositionByElement': {name: 'setPositionByElement', desc: '将控件或者指定元素与指定的元素对齐', grammar: '', options: [{name: 'target', type: 'HTMLElement|string', desc: '要对齐到的元素.'}, {name: 'element', type: 'HTMLElement|string', desc: 'optional 要对齐的元素或元素id，如果不指定，默认为当前控件的主元素.'}, {name: 'options', type: 'Object', desc: 'optional 选项，同setPosition方法.'}]}, 'baidu.ui.behavior.posable.setPositionByMouse': {name: 'setPositionByMouse', desc: '将控件或者指定元素放置到当前鼠标位置', grammar: '', options: [{name: 'element', type: 'HTMLElement|string', desc: 'optional 要对齐的元素或元素id，如果不指定，默认为当前控件的主元素.'}, {name: 'options', type: 'Object', desc: 'optional 选项，同setPosition方法.'}]}, 'baidu.ui.Button': {name: 'Button', type: 'Button', desc: 'button基类，创建一个button实例', grammar: '', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.content', type: 'String', desc: '按钮文本信息'}, {name: 'options.disabled', type: 'Boolean', desc: '按钮是否有效，默认为false（有效）。'}, {name: 'options.onmouseover', type: 'Function', desc: '鼠标悬停在按钮上时触发'}, {name: 'options.onmousedown', type: 'Function', desc: '鼠标按下按钮时触发'}, {name: 'options.onmouseup', type: 'Function', desc: '按钮弹起时触发'}, {name: 'options.onmouseout', type: 'Function', desc: '鼠标移出按钮时触发'}, {name: 'options.onclick', type: 'Function', desc: '鼠标点击按钮时触发'}, {name: 'options.onupdate', type: 'Function', desc: '更新按钮时触发'}, {name: 'options.onload', type: 'Function', desc: '页面加载时触发'}, {name: 'options.ondisable', type: 'Function', desc: '当调用button的实例方法disable，使得按钮失效时触发。'}, {name: 'options.onenable', type: 'Function', desc: '当调用button的实例方法enable，使得按钮有效时触发。'}], methods: [{name: 'render', desc: '将button绘制到DOM树中。', grammar: '', options: [{name: 'target', type: 'HTMLElement|String', desc: '需要渲染到的元素'}]}, {name: 'isDisabled', type: 'Boolean', desc: '判断按钮是否处于失效状态。', grammar: '', returns: [{type: 'Boolean', desc: '是否失效的状态'}]}, {name: 'dispose', desc: '销毁实例。', grammar: ''}, {name: 'disable', desc: '设置disabled属性', grammar: ''}, {name: 'enable', desc: '删除disabled属性', grammar: ''}, {name: 'fire', desc: '触发button事件', grammar: '', options: [{name: 'eventName', type: 'String', desc: '要触发的事件名称'}, {name: 'e', type: 'Object', desc: '事件event'}]}, {name: 'update', desc: '更新button的属性', grammar: '', options: [{name: 'options', type: 'Object', desc: '更新button的属性'}, {name: 'options.content', type: 'String', desc: '按钮文本信息'}, {name: 'options.disabled', type: 'Boolean', desc: '按钮是否有效，默认为false（有效）。'}, {name: 'options.onmouseover', type: 'Function', desc: '鼠标悬停在按钮上时触发'}, {name: 'options.onmousedown', type: 'Function', desc: '鼠标按下按钮时触发'}, {name: 'options.onmouseup', type: 'Function', desc: '按钮弹起时触发'}, {name: 'options.onmouseout', type: 'Function', desc: '鼠标移出按钮时触发'}, {name: 'options.onclick', type: 'Function', desc: '鼠标点击按钮时触发'}, {name: 'options.onupdate', type: 'Function', desc: '更新按钮时触发'}, {name: 'options.onload', type: 'Function', desc: '页面加载时触发'}, {name: 'options.ondisable', type: 'Function', desc: '当调用button的实例方法disable，使得按钮失效时触发。'}, {name: 'options.onenable', type: 'Function', desc: '当调用button的实例方法enable，使得按钮有效时触发。'}]}], returns: [{type: 'Button', desc: 'Button类'}]}, 'baidu.ui.Calendar': {name: 'Calendar', desc: '创建一个简单的日历对象', grammar: '', options: [{name: 'options', type: 'Object', desc: 'config参数'}, {name: 'options.weekStart', type: 'String', desc: '定义周的第一天，取值:\'Mon\'|\'Tue\'|\'Web\'|\'Thu\'|\'Fri\'|\'Sat\'|\'Sun\'，默认值\'Sun\''}, {name: 'options.initDate', type: 'Date', desc: '以某个本地日期打开日历，默认值是当前日期'}, {name: 'options.highlightDates', type: 'Array', desc: '设定需要高亮显示的某几个日期或日期区间，格式:[date, {start:date, end:date}, date, date...]'}, {name: 'options.disableDates', type: 'Array', desc: '设定不可使用的某几个日期或日期区间，格式:[date, {start:date, end:date}, date, date...]'}, {name: 'options.flipContent', type: 'Object', desc: '设置翻转月份按钮的内容，格式{prev: \'\', next: \'\'}'}, {name: 'options.language', type: 'string', desc: '日历显示的语言，默认为中文'}, {name: 'options.onclickdate', type: 'function', desc: '当点击某个日期的某天时触发该事件'}], methods: [{name: 'renderTitle', desc: '渲染日历表的标题说明，如果对标题说明有特列要求，可以覆盖方法来实现', grammar: '', methods: [{name: 'getOptions', grammar: '', options: [{name: 'pos'}]}]}, {name: 'render', desc: '渲染日期组件到参数指定的容器中', grammar: '', options: [{name: 'target', type: 'HTMLElement', desc: '一个用来存放组件的容器对象'}]}, {name: 'update', desc: '更新日期的参数', grammar: '', options: [{name: 'options', type: 'Object', desc: '参数，具体请参照构造中的options'}]}, {name: 'gotoDate', desc: '跳转到某一天', grammar: '', options: [{name: 'date', type: 'Date', desc: '一个非本地化的日期对象'}]}, {name: 'gotoYear', desc: '跳转到某一年', grammar: '', options: [{name: 'year', type: 'Number', desc: '年份'}]}, {name: 'gotoMonth', desc: '跳转到当前年份的某个月份', grammar: '', options: [{name: 'month', type: 'Number', desc: '月份，取值(0, 11)'}]}, {name: 'getToday', type: 'Date', desc: '取得一个本地化的当天的日期', grammar: '', returns: [{type: 'Date', desc: '返回一个本地当天的时间'}]}, {name: 'getDate', type: 'Date', desc: '返回一个当前选中的当地日期对象', grammar: '', returns: [{type: 'Date', desc: '返回一个本地日期对象'}]}, {name: 'setDate', desc: '用一个本地化的日期设置当前的显示日期', grammar: '', options: [{name: 'date', type: 'Date', desc: '一个当地的日期对象'}]}, {name: 'prevMonth', desc: '翻页到上一个月份，当在年初时会翻到上一年的最后一个月份', grammar: ''}, {name: 'nextMonth', desc: '翻页到下一个月份，当在年末时会翻到下一年的第一个月份', grammar: ''}, {name: 'dispose', desc: '析构函数', grammar: ''}]}, 'baidu.ui.Carousel': {name: 'Carousel', desc: '创建一个简单的滚动组件', grammar: '', options: [{name: 'options', type: 'Object', desc: 'config参数.'}, {name: 'options.orientation', type: 'String', desc: '描述该组件是创建一个横向滚动组件或是竖向滚动组件，取值：horizontal:横向, vertical:竖向'}, {name: 'options.contentText', type: 'Object', desc: '定义carousel组件每一项的字符数据，格式：[{content: \'text-0\'}, {content: \'text-1\'}, {content: \'text-2\'}...]'}, {name: 'options.flip', type: 'String', desc: '定义组件的翻页方式，取值：item:一次滚动一个项, page:一次滚动一页'}, {name: 'options.pageSize', type: 'Number', desc: '描述一页显示多少个滚动项，默认值是3'}, {name: 'options.onload', type: 'function', desc: '当渲染完组件时触发该事件'}, {name: 'options.onbeforescroll', type: 'function', desc: '当开始滚动时触发该事件，该事件的event参数中可以得到四个属性：index:当前需要滚动的索引, scrollOffset:滚动到可视区域的位置, direction:滚动方向, scrollUnit:需要滚动过多少个项'}, {name: 'options.onafterscroll', type: 'function', desc: '当结束一次滚动时触发该事件，该事件的event参数中可以得到四个属性：index:当前需要滚动的索引, scrollOffset:滚动到可视区域的位置, direction:滚动方向, scrollUnit:需要滚动过多少个项'}, {name: 'options.onprev', type: 'function', desc: '当翻到前一项或前一页时触发该事件'}, {name: 'options.onnext', type: 'function', desc: '当翻到下一项或下一页时触发该事件'}, {name: 'options.onitemclick', type: 'function', desc: '当点击某个项时触发该事件'}, {name: 'options.onfocus', type: 'function', desc: '当某一项获得焦点时触发该事件'}], methods: [{name: 'render', desc: '渲染滚动组件到参数指定的容器中', grammar: '', options: [{name: 'target', type: 'HTMLElement', desc: '一个用来存放组件的容器对象.'}]}, {name: 'getCurrentIndex', type: 'Number', desc: '取得当前得到焦点项在所有数据项中的索引值', grammar: '', returns: [{type: 'Number', desc: '索引值.'}]}, {name: 'getTotalCount', type: 'Number', desc: '取得数据项的总数目', grammar: '', returns: [{type: 'Number', desc: '总数.'}]}, {name: 'getItem', type: 'HTMLElement', desc: '根据数据的索引值取得对应在页面的DOM节点，当节点不存时返回null', grammar: '', options: [{name: 'index', type: 'Number', desc: '在数据中的索引值.'}], returns: [{type: 'HTMLElement', desc: '返回一个DOM节点.'}]}, {name: 'scrollTo', desc: '从当前项滚动到index指定的项，并将该项放在scrollOffset的位置', grammar: '', options: [{name: 'index', type: 'Number', desc: '在滚动数据中的索引.'}, {name: 'scrollOffset', type: 'Number', desc: '在页面的显示位置，该参数如果不填默认值取0.'}, {name: 'direction', type: 'String', desc: '滚动方向，取值: prev:强制滚动到上一步, next:强制滚动到下一步，当不给出该值时，会自动运算一个方向来滚动.'}]}, {name: 'prev', desc: '翻到上一项或是翻到上一页', grammar: ''}, {name: 'next', desc: '翻到下一项或是翻到下一页', grammar: ''}, {name: 'isFirst', type: 'Boolean', desc: '是否已经处在第一项或第一页', grammar: '', returns: [{type: 'Boolean', desc: 'true:当前已是到第一项或第一页.'}]}, {name: 'isLast', type: 'Boolean', desc: '是否已经处在末项或是末页', grammar: '', returns: [{type: 'Boolean', desc: 'true:当前已是到末项或末页.'}]}, {name: 'focus', desc: '使某一项得到焦点', grammar: '', options: [{name: 'index', type: 'Number', desc: '需要得到焦点项的索引.'}]}, {name: 'getScrollContainer', type: 'HTMLElement', desc: '取得存放所有项的上层容器', grammar: '', returns: [{type: 'HTMLElement', desc: '一个HTML元素.'}]}, {name: 'dispose', desc: '析构函数', grammar: ''}, {name: 'startAutoScroll', desc: '从停止状态开始自动滚动', grammar: ''}, {name: 'stopAutoScroll', desc: '停止当前自动滚动状态', grammar: ''}, {name: 'addText', desc: '将一个字符串的内容插入到索引指定的位置', grammar: '', options: [{name: 'content', type: 'String', desc: '需要插入项的字符内容'}, {name: 'index', type: 'Number', desc: '插入位置'}]}, {name: 'addItem', grammar: '', options: [{name: 'element', type: 'HTMLElement', desc: '将一个element项的内容插入到索引指定的位置'}, {name: 'index', type: 'Number', desc: '插入位置'}]}, {name: 'removeItem', type: 'HTMLElement', desc: '移除索引指定的某一项', grammar: '', options: [{name: 'index', type: 'Number', desc: '要移除项的索引'}], returns: [{type: 'HTMLElement', desc: '当移除项存在于页面时返回该节点'}]}, {name: 'update', desc: '更新表格', grammar: '', options: [{name: 'options', type: 'object', desc: '选项'}, {name: 'options.data', type: 'Object', desc: '生成表格的数据，格式[{id : \"rsid0\", content : [\"column0\", \"column1\"]}, {id : \"rsid0\", content : [\"column0\", \"column1\"]}], id不是必要，当有选择列时用来定义用户的checkbox的value'}, {name: 'options.columns', type: 'Object', desc: '各个列的高级定义，格式[{index : 1, width : 100, type : \"select\"}, {index : 2, width : \"100%\", enableEdit : true}, {index : 3, width : \"200px\"}]'}, {name: 'options.title', type: 'Object', desc: '定义表格列的title说明，格式：[\"colName0\", \"删除\", \"colName2\", \"colName3\"]'}, {name: 'options.pageSize', type: 'Number', desc: '一页显示多少行数据，默认全部显示'}]}, {name: 'getRow', type: 'baidu.ui.table.Row|null', desc: '获得指定行控件', grammar: '', options: [{name: 'index', type: 'number', desc: '索引'}], returns: [{type: 'baidu.ui.table.Row|null', desc: '指定行控件'}]}, {name: 'getRowCount', type: 'number', desc: '获得表格中的行数', grammar: '', returns: [{type: 'number', desc: 'count'}]}, {name: 'removeRow', desc: '删除行', grammar: '', options: [{name: 'index', type: 'number', desc: '要删除的数据索引'}]}, {name: 'getMain', type: 'HTMLElement', desc: '重写默认的getMain方法在Row控件中，main元素就是getId获得的元素', grammar: '', returns: [{type: 'HTMLElement', desc: 'main main元素'}]}, {name: 'getString', desc: '获得控件字符串', grammar: '', options: [{name: 'data', type: 'array', desc: '行中每一列中的数据'}]}, {name: 'insertTo', desc: '使用dom的方式在指定的索引位置插入一行', grammar: '', options: [{name: 'index', type: 'Number', desc: '插入位置的索引'}]}, {name: 'select', desc: '选中当前行', grammar: ''}, {name: 'unselect', desc: '去掉当前行的选中状态', grammar: ''}, {name: 'remove', desc: '移除当前行', grammar: ''}, {name: 'toggle', desc: '如果指定行处于选中状态，让其取消选中状态，否则反之', grammar: ''}, {name: 'getCell', type: 'baidu.ui.table.Cell', desc: '根据索引取得单元格对象', grammar: '', options: [{name: 'index', type: 'Number'}], returns: [{type: 'baidu.ui.table.Cell'}]}, {name: 'getParent', type: 'baidu.ui.table.Row', desc: '取得baidu.ui.table.Row对象', grammar: '', returns: [{type: 'baidu.ui.table.Row'}]}, {name: 'setParent', desc: '设置父对象', grammar: '', options: [{name: '_parent', type: 'Object'}]}, {name: 'getHTML', type: 'string', desc: '取得单元格的字符串内容', grammar: '', returns: [{type: 'string'}]}, {name: 'setHTML', desc: '设置单元格的字符串内容', grammar: '', options: [{name: 'content', type: 'Object'}]}, {name: 'addTableItem', desc: '在指定索引处插入一个新的多行多列表格', grammar: '', options: [{name: 'data', type: 'Object', desc: '需要插入的数据（一维数组），格式：[{content: \'col-0\'}, {content: \'col-1\'}, {content: \'col-2\'}....]'}, {name: 'index', type: 'Number', desc: '在指定的索引处插入，默认在末端插入'}]}, {name: 'removeTableItem', type: 'HTMLElement', desc: '移除由索引指定的项', grammar: '', options: [{name: 'index', type: 'Number', desc: '需要移除的索引项'}], returns: [{type: 'HTMLElement', desc: '被移除的表格对象，不存在该对象或不存在于当前页面的返回null'}]}, {name: 'getTable', type: 'baidu.ui.Table', desc: '根据索引取得表格', grammar: '', options: [{name: 'index', type: 'Number', desc: '索引'}], returns: [{type: 'baidu.ui.Table', desc: '该索引对应的表格对象，不存在该表格对象的返回null'}]}, {name: 'getSliderBody', type: 'HTMLElement', desc: '获取滑动条容器对象', grammar: '', returns: [{type: 'HTMLElement', desc: 'dom节点.'}]}, {name: 'getSliderDot', type: 'HTMLElement', desc: '获取滑动块对象', grammar: '', returns: [{type: 'HTMLElement', desc: 'dom节点.'}]}, {name: 'getPad', type: 'HTMLElement', desc: '获取调色板对象', grammar: '', returns: [{type: 'HTMLElement', desc: 'dom节点.'}]}, {name: 'getPadDot', type: 'HTMLElement', desc: '获取调色块对象', grammar: '', returns: [{type: 'HTMLElement', desc: 'dom节点.'}]}, {name: 'setSliderDot', desc: '设置滑动块位置', grammar: '', options: [{name: 'value', type: 'Object', desc: '滑动块top位置值.'}]}, {name: 'setPadDot', desc: '设置调色块位置', grammar: '', options: [{name: 'top', type: 'Object', desc: '调色块 offsetTop值.'}, {name: 'left', type: 'Object', desc: '调色块 offsetLeft值.'}]}, {name: 'getColor', type: 'String', desc: '获取当前颜色值', grammar: '', returns: [{type: 'String', desc: '颜色值.'}]}, {name: 'open', desc: '打开 colorPicker', grammar: ''}, {name: 'close', desc: '关闭 colorPicker', grammar: ''}, {name: 'getTarget', type: 'HTMLElement', desc: '获取target元素', grammar: '', returns: [{type: 'HTMLElement', desc: 'HTML元素.'}]}, {name: 'bodyClick', desc: 'body点击事件，点击body关闭菜单', grammar: '', options: [{name: 'e', type: 'Object', desc: '事件.'}]}, {name: 'createButton', desc: '创建底部按钮', grammar: '', options: [{name: 'option', type: 'Object', desc: '创建按钮的options'}, {name: 'name', type: 'String', desc: '按钮的唯一标识符'}], returns: [{desc: 'void'}]}, {name: 'removeButton', desc: '删除底部按钮', grammar: '', options: [{name: 'name', type: 'String', desc: '按钮的唯一标识符'}], returns: [{desc: 'void'}]}, {name: 'hideModal', grammar: ''}, {name: 'onLoginSuccess', grammar: '', options: [{name: 'obj'}, {name: 'json'}]}, {name: 'onLoginFailure', grammar: '', options: [{name: 'obj'}, {name: 'json'}]}, {name: 'renderLogin', grammar: ''}, {name: 'onRegisterSuccess', grammar: '', options: [{name: 'obj'}, {name: 'json'}]}, {name: 'onRegisterFailure', grammar: '', options: [{name: 'obj'}, {name: 'json'}]}, {name: 'changeTab', grammar: '', options: [{name: 'type'}]}, {name: 'renderReg', grammar: ''}, {name: 'targetHover', desc: '鼠标浮动到target上显示菜单', grammar: ''}, {name: 'targetMouseOut', desc: '鼠标移出target关闭菜单', grammar: ''}, {name: 'clearHideHandler', desc: '清除hideHandler', grammar: ''}, {name: 'updateIcons', desc: '更新item图标', grammar: ''}, {name: 'getValue', type: 'number', desc: '获得当前的value', grammar: '', returns: [{type: 'number', desc: 'value.'}]}, {name: 'disable', desc: '禁用进度条', grammar: ''}, {name: 'enable', desc: '启用进度条', grammar: ''}, {name: 'getBar', type: 'HTMLElement', desc: '获取进度条元素', grammar: '', returns: [{type: 'HTMLElement', desc: 'bar.'}]}, {name: 'getContainer', type: 'HTMLElement', desc: '取得用户传入的需要被滚动条管理的对象', grammar: '', returns: [{type: 'HTMLElement'}]}, {name: 'getProgressBarString', desc: '根据tplProgressbar生成一个容器用来存入progressBar组件', grammar: ''}, {name: 'setData', grammar: '', options: [{name: 'word'}, {name: 'data'}, {name: 'noShow'}]}, {name: 'getWindowResizeHandler', grammar: ''}, {name: 'adjustPosition', grammar: '', options: [{name: 'onlyAdjustShown'}]}, {name: 'beforedeactivateHandler', grammar: ''}, {name: 'getTargetKeydownHandler', grammar: '', methods: [{name: 'keyUpDown', grammar: '', options: [{name: 'up'}]}]}, {name: 'gotoPage', desc: '直接翻到索引指定的页数', grammar: '', options: [{name: 'index', type: 'Object'}]}, {name: 'prevPage', desc: '翻到上一页', grammar: ''}, {name: 'nextPage', desc: '翻到下一页', grammar: ''}, {name: 'getTotalPage', type: 'number', desc: '取得总页数', grammar: '', returns: [{type: 'number'}]}, {name: 'getCurrentPage', type: 'number', desc: '取得当前页数', grammar: '', returns: [{type: 'number'}]}, {name: 'addRow', desc: '新增一个行，', grammar: '', options: [{name: 'options', type: 'Object', desc: '格式同table的addRow'}, {name: 'index', type: 'Number', desc: '在索引的行之前插入，可选项，默认值是在最后插入'}]}, {name: 'getPagerContainer', type: 'html-element', desc: '取得存放pager的容器', grammar: '', returns: [{type: 'html-element'}]}, {name: 'resize', desc: '重设pager容器的大小', grammar: ''}, {name: 'attachEdit', desc: '绑定一行中的某列拥有双击事件', grammar: '', options: [{name: 'row', type: 'baidu.ui.table.Row', desc: '行对象'}]}, {name: 'addCheckbox', desc: '添加单个checkbox到行中', grammar: '', options: [{name: 'rowId', type: 'String', desc: '该行的id'}, {name: 'index'}]}, {name: 'removeCheckbox', desc: '移除一个checkbox', grammar: '', options: [{name: 'rowId', type: 'Object', desc: '该行的id'}]}, {name: 'getTitleCheckbox', type: 'html-element', desc: '取得表格标题的全选checkbox', grammar: '', returns: [{type: 'html-element'}]}, {name: 'setTitleCheckbox', desc: '设置一个自定义的全选checkbox', grammar: '', options: [{name: 'checkboxId', type: 'String', desc: '该checkbox的id'}]}, {name: 'selectAll', desc: '全部选中checkbox', grammar: ''}, {name: 'unselectAll', desc: '全部反选checkbox', grammar: ''}, {name: 'toggleAll', desc: '当全选的checkbox存在时才可以切换全选和全反选', grammar: ''}, {name: 'getSelected', type: 'TypeName', desc: '取得已经选中的数据，如果该行的row.data中设置id则返回所选中的id数组，否则返回该row的data', grammar: '', returns: [{type: 'TypeName'}]}, {name: 'getTitleBody', type: 'html-element', desc: '取得表格的table对象', grammar: '', returns: [{type: 'html-element'}]}, {name: 'add', type: 'baidu.ui', desc: '使用传入config的方式添加ui组件到toolBar', grammar: '', options: [{name: 'options', type: 'Object', desc: 'ui控件的config参数，格式参照构造函数options.items.'}, {name: 'container', type: 'HTMLElement', desc: 'ui控件的container,若没有container参数，则会自动根据当前toolbar的显示规则在最后创建container.'}], returns: [{type: 'baidu.ui', desc: 'uiInstance 创建好的ui对象.'}]}, {name: 'addRaw', desc: '直接向toolbar中添加已经创建好的uiInstance', grammar: '', options: [{name: 'uiInstance', type: 'Object'}, {name: 'container', type: 'HTMLElement'}], returns: [{desc: 'void.'}]}, {name: 'removeAll', desc: '删除所有ui控件', grammar: '', returns: [{desc: 'void.'}]}, {name: 'enableAll', desc: '激活toolbar中所有的item', grammar: '', returns: [{desc: 'void.'}]}, {name: 'disableAll', desc: '禁用toolbar中所有的item', grammar: '', returns: [{desc: 'void.'}]}, {name: 'getItemByName', type: 'baidu.ui.Instance', desc: '通过name获取ui组件', grammar: '', options: [{name: 'name', type: 'String', desc: 'ui组件唯一标识符.'}], returns: [{type: 'baidu.ui.Instance', desc: '返回查找到的item.'}]}]}, 'baidu.ui.ColorPalette': {name: 'ColorPalette', desc: '复杂颜色拾取器', grammar: '', options: [{name: 'options', type: 'Object', desc: '配置.'}, {name: 'options.sliderLength', type: 'Number', desc: '滑动条长度.'}, {name: 'options.coverImgSrc', type: 'String', desc: '调色板渐变背景图片地址.'}, {name: 'options.sliderImgSrc', type: 'String', desc: '滑动条背景图片地址.'}]}, 'baidu.ui.ColorPicker': {name: 'ColorPicker', desc: '颜色拾取器', grammar: '', options: [{name: 'options', type: 'Object', desc: '配置.'}, {name: 'options.gridSize', type: 'Number', desc: '一行显示的颜色块个数.'}, {name: 'options.onchosen', type: 'Function', desc: '颜色选择事件.'}]}, 'baidu.ui.ColorPicker.ColorPicker$click': {name: 'ColorPicker$click', desc: '创建一个鼠标点击触发的colorPicker', grammar: ''}, 'baidu.ui.ColorPicker.ColorPicker$more': {name: 'ColorPicker$more', desc: 'ColorPalette 插件', grammar: '', options: [{name: 'options.sliderLength', type: 'Number', desc: '滑动条长度.'}, {name: 'options.coverImgSrc', type: 'String', desc: '调色板背景渐变图片路径.'}, {name: 'options.sliderImgSrc', type: 'String', desc: '滑动条背景图片路径.'}, {name: 'options.titleText', type: 'String', desc: '标题文字.'}, {name: 'options.dilogOption', type: 'Object', desc: '填出对话框配置.'}, {name: 'options.more', type: 'Object', desc: '是否开启插件功能.'}]}, 'baidu.ui.Combox': {name: 'Combox', desc: 'combox类', grammar: '', options: [{name: 'options', type: 'Object', desc: '选项，用于创建combox。'}, {name: 'options.target', type: 'Element', desc: 'combox的触发元素'}, {name: 'options.width', type: 'Number|String', desc: '宽度值。当指定element时，默认为element宽度；否则不设置（可以通过css指定）。'}, {name: 'options.height', type: 'Number|String', desc: '高度值。当指定element时，默认为element宽度；否则不设置（可以通过css指定）。'}, {name: 'options.skin', type: 'String', desc: '自定义样式前缀'}, {name: 'options.editable', type: 'Boolean', desc: '是否可以输入'}, {name: 'options.data', type: 'Array', desc: '储存combox每个条目的数据。每个条目数据格式: { content: \'some html string\', value : \'\'}。'}, {name: 'options.offset', type: 'Array|Object', desc: '偏移量，若为数组，索引0为x方向，索引1为y方向; 若为Object，键x为x方向，键y为y方向。单位：px，默认值：[0,0]。'}, {name: 'options.zIndex', type: 'Number', desc: '浮起combox层的z-index值，默认为1200。'}, {name: 'options.onitemclick', type: 'Function', desc: 'combox中单个条目鼠标点击的回调函数，参数:{data : {value: Item对应的数据, index : Item索引值}}'}, {name: 'options.onitemclick', type: 'Function', desc: 'combox中单个条目鼠标点击的回调函数，function(evt){}，evt.index返回item的索引，evt.value返回一个json，{content: \'\', value: \'\'}'}, {name: 'options.onbeforeclose', type: 'Function', desc: '关闭之前触发'}, {name: 'options.onclose', type: 'Function', desc: '关闭时触发'}, {name: 'options.onbeforeopen', type: 'Function', desc: '打开之前触发'}, {name: 'options.onopen', type: 'Function', desc: '打开时触发'}, {name: 'options.onmouseover', type: 'Function', desc: '悬停时触发'}, {name: 'options.onmouseout', type: 'Function', desc: '离开时触发'}, {name: 'options.onmousedown', type: 'Function', desc: '鼠标按下时触发'}, {name: 'options.onmouseup', type: 'Function', desc: '鼠标抬起时触发'}], methods: [{name: 'filter', desc: '过滤方法', grammar: '', options: [{name: 'filterStr', type: 'String', desc: '需检索的字符串值'}, {name: 'data', type: 'Array', desc: '目标数据'}]}, {name: 'render', desc: '渲染控件', grammar: '', options: [{name: 'target', type: 'Object', desc: '目标渲染对象'}]}, {name: 'getInput', type: 'HTMLElement', desc: '获取input元素', grammar: '', returns: [{type: 'HTMLElement', desc: 'input元素'}]}, {name: 'getArrow', type: 'HTMLElement', desc: '获取下拉箭头元素', grammar: '', returns: [{type: 'HTMLElement', desc: 'arrow元素'}]}, {name: 'chooseItem', desc: '响应条目被选择,并发出 onitemclick 事件', grammar: '', options: [{name: 'data', type: 'Object', desc: '选中的数据'}]}, {name: 'setValue', desc: '设置input的值', grammar: '', options: [{name: 'value', type: 'String', desc: '值'}]}, {name: 'dispose', desc: '销毁Combox', grammar: ''}]}, 'baidu.ui.create': {name: 'create', type: 'object', desc: '创建一个ui控件', grammar: '', options: [{name: 'UI控件类或者uiType', type: 'object|String'}, {name: 'options', type: 'object', desc: 'optional 控件的初始化属性autoRender : 是否自动render，默认trueelement : render到的元素parent : 父控件'}], returns: [{type: 'object', desc: '创建好的控件实例'}]}, 'baidu.ui.createPopup': {name: 'createPopup', desc: '创建一个 Popup 层', grammar: '', options: [{name: 'options', type: 'JSON', desc: '配置信息'}], methods: [{name: 'initIframe', grammar: '', options: [{name: 'delay'}]}]}, 'baidu.ui.createUI': {name: 'createUI', type: 'object', desc: '创建一个UI控件类', grammar: '', options: [{name: 'constructor', type: 'function', desc: 'ui控件构造器'}, {name: 'options', type: 'object', desc: '选项'}], returns: [{type: 'object', desc: 'ui控件'}]}, 'baidu.ui.DatePicker': {name: 'DatePicker', desc: '创建一个日历对象绑定于一个input输入域', grammar: '', options: [{name: 'options', type: 'Object', desc: 'config参数'}, {name: 'options.width', type: 'Number', desc: '日历组件的宽度'}, {name: 'options.height', type: 'Number', desc: '日历组件的高度'}, {name: 'options.format', type: 'String', desc: '日历组件格式化日历的格式，默认：yyyy-MM-dd'}, {name: 'options.popupOptions', type: 'Object', desc: 'Picker组件的浮动层由Popup组件渲染，该参数用来设置Popup的属性，具体参考Popup'}, {name: 'options.calendarOptions', type: 'Object', desc: 'Picker组件的日历由Calendar组件渲染，该参数来用设置Calendar的属性，具体参考Calendar'}, {name: 'options.onpick', type: 'Function', desc: '当选中某个日期时的触发事件'}, {name: 'options.language', type: 'String', desc: '当前语言，默认为中文'}], methods: [{name: 'render', desc: '渲染日期组件到body中并绑定input', grammar: '', options: [{name: 'target', type: 'HTMLElement', desc: '一个input对象，该input和组件绑定'}]}, {name: 'pick', desc: '当点击某个日期时执行pick方法来向input写入日期', grammar: '', options: [{name: 'date', type: 'Date', desc: '将日期写到input中'}]}, {name: 'show', desc: '显示日历', grammar: ''}, {name: 'hide', desc: '隐藏日历', grammar: ''}, {name: 'dispose', grammar: ''}]}, 'baidu.ui.Decorator': {name: 'Decorator', desc: '装饰器控件基类', grammar: ''}, 'baidu.ui.Dialog': {name: 'Dialog', desc: 'Dialog基类，建立一个dialog实例', grammar: '', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.content', type: 'DOMElement', desc: '要放到dialog中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'dialog中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度，默认值为400，注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度，默认值为300'}, {name: 'options.top', type: 'String|Number', desc: 'dialog距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'dialog距离页面左方的距离'}, {name: 'options.titleText', type: 'String', desc: 'dialog标题文字'}, {name: 'options.classPrefix', type: 'String', desc: 'dialog样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'dialog的zIndex值，默认值为1000'}, {name: 'options.onopen', type: 'Function', desc: 'dialog打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'dialog关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'dialog关闭前触发，如果此函数返回false，则组织dialog关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'dialog更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭dialog。'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的title。'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}], methods: [{name: 'isShown', type: 'Boolean', desc: '查询当前窗口是否处于显示状态', grammar: '', returns: [{type: 'Boolean', desc: '是否处于显示状态'}]}, {name: 'render', type: 'HTMLElement', desc: '绘制dialog到页面', grammar: '', returns: [{type: 'HTMLElement', desc: 'mainDiv'}]}, {name: 'open', desc: '显示当前dialog', grammar: ''}, {name: 'close', desc: '隐藏当前dialog', grammar: ''}, {name: 'update', desc: '更新dialog状态', grammar: '', options: [{name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到dialog中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'dialog中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度，默认值为400，注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度，默认值为300'}, {name: 'options.top', type: 'String|Number', desc: 'dialog距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'dialog距离页面左方的距离'}, {name: 'options.titleText', type: 'String', desc: 'dialog标题文字'}, {name: 'options.classPrefix', type: 'String', desc: 'dialog样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'dialog的zIndex值，默认值为1000'}, {name: 'options.onopen', type: 'Function', desc: 'dialog打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'dialog关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'dialog关闭前触发，如果此函数返回false，则组织dialog关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'dialog更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭dialog。'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的title。'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}]}, {name: 'getTitle', type: 'HTMLElement', desc: '获得title对应的dom元素', grammar: '', returns: [{type: 'HTMLElement', desc: 'title'}]}, {name: 'getTitleInner', type: 'HTMLElement', desc: '获得title文字对应的dom元素', grammar: '', returns: [{type: 'HTMLElement', desc: 'titleInner'}]}, {name: 'getContent', type: 'HTMLElement', desc: '获得content对应的dom元素', grammar: '', returns: [{type: 'HTMLElement', desc: 'content'}]}, {name: 'getFooter', type: 'HTMLElement', desc: '获得footer对应的dom元素', grammar: '', returns: [{type: 'HTMLElement', desc: 'footer'}]}, {name: 'dispose', desc: '销毁dialog实例', grammar: ''}, {name: 'getValue', type: 'Number', desc: '获得当前的value', grammar: '', returns: [{type: 'Number', desc: 'value     当前滑块位置的值'}]}, {name: 'getThumb', type: 'HTMLElement', desc: '获取滑块元素', grammar: '', returns: [{type: 'HTMLElement', desc: 'thumb     滑块元素'}]}, {name: 'disable', grammar: ''}, {name: 'enable', grammar: ''}]}, 'baidu.ui.get': {name: 'get', type: 'object', desc: '获取元素所在的控件', grammar: '', options: [{name: '要查找的元素，如果是字符串，则查找这个guid为此字符串的控件', type: 'HTMLElement|string'}, {name: 'optional', type: 'string', desc: 'type 匹配查找指定类型的控件【暂未支持】'}], returns: [{type: 'object', desc: 'ui控件'}]}, 'baidu.ui.getAttribute': {name: 'getAttribute', desc: '从指定的dom元素中获取ui控件的属性值 todo: &datasource支持', grammar: '', options: [{name: 'element'}]}, 'baidu.ui.getUI': {name: 'getUI', type: 'object', desc: '通过uiType找到UI类查找规则：suggestion -> baidu.ui.Suggestiontoolbar-spacer -> baidu.ui.Toolbar.Spacer.', grammar: '', options: [{name: 'uiType', type: 'String'}], returns: [{type: 'object', desc: 'UI类'}]}, 'baidu.ui.Input': {name: 'Input', type: 'Boolean', desc: 'Input基类，创建一个input实例。', grammar: '', options: [{name: 'target', type: 'String|HTMLElement', desc: '存放input控件的元素，input控件会渲染到该元素内。'}, {name: 'options', type: 'Object', desc: '选项'}, {name: 'options.text', type: 'String', desc: 'input文本信息'}, {name: 'options.disabled', type: 'Boolean', desc: '控件是否有效，默认为false（有效）。'}, {name: 'options.onfocus', type: 'Function', desc: '聚焦时触发，function(evt){}，evt.DOMEvent取得浏览器的event事件'}, {name: 'options.onblur', type: 'Function', desc: '失去焦点时触发，function(evt){}，evt.DOMEvent取得浏览器的event事件'}, {name: 'options.onchage', type: 'Function', desc: 'input内容改变时触发，function(evt){}，evt.DOMEvent取得浏览器的event事件'}, {name: 'options.onkeydown', type: 'Function', desc: '按下键盘时触发，function(evt){}，evt.DOMEvent取得浏览器的event事件'}, {name: 'options.onkeyup', type: 'Function', desc: '释放键盘时触发，function(evt){}，evt.DOMEvent取得浏览器的event事件'}, {name: 'options.onmouseover', type: 'Function', desc: '鼠标悬停在input上时触发，function(evt){}，evt.DOMEvent取得浏览器的event事件'}, {name: 'options.onmouseout', type: 'Function', desc: '鼠标移出input时触发，function(evt){}，evt.DOMEvent取得浏览器的event事件'}, {name: 'options.ondisable', type: 'Function', desc: '当调用input的实例方法disable，使得input失效时触发。'}, {name: 'options.onenable', type: 'Function', desc: '当调用input的实例方法enable，使得input有效时触发。'}, {name: 'options.ondispose', type: 'Function', desc: '销毁实例时触发'}], methods: [{name: 'render', desc: '将input绘制到DOM树中。target参数不可省，否则无法渲染。', grammar: '', options: [{name: 'target', type: 'String|HTMLElement', desc: '目标渲染对象'}]}, {name: 'isDisabled', type: 'Boolean', desc: '判断input是否处于失效状态。', grammar: '', returns: [{type: 'Boolean', desc: '是否处于失效状态'}]}, {name: 'getText', type: 'String', desc: '获得input文字。', grammar: '', returns: [{type: 'String', desc: '输入框的文字'}]}, {name: 'enable', desc: '使input控件有效。', grammar: ''}, {name: 'disable', desc: '使input控件失效。', grammar: ''}, {name: 'dispose', desc: '销毁实例。', grammar: ''}], returns: [{type: 'Boolean', desc: '是否有效，true(失效)/false(有效)'}]}, 'baidu.ui.ItemSet': {name: 'ItemSet', desc: 'ItemSet是accordion, tab等多item操作的抽象', grammar: '', options: [{name: 'options', type: 'Object', desc: 'config参数.'}, {name: 'options.switchType', type: 'String', desc: '事件激发类型，item由什么类型的事件来打开，取值如：click, mouseover等等'}, {name: 'options.defaultIndex', type: 'Number', desc: '初始化后的默认找开项索引，默认值是0'}]}, 'baidu.ui.Login': {name: 'Login', desc: '应用实现 login 备注：涉及passport的API接口参数可以参见http://fe.baidu.com/doc/zhengxin/passport/openapi_help.text', grammar: '', options: [{name: 'content', type: 'String|DOMElement', desc: '内容或者内容对应的元素'}, {name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到dialog中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'dialog中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度，注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'dialog距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'dialog距离页面左方的距离'}, {name: 'options.titleText', type: 'String', desc: 'dialog标题文字'}, {name: 'options.classPrefix', type: 'String', desc: 'dialog样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'dialog的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'dialog打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'dialog关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'dialog关闭前触发，如果此函数返回false，则组织dialog关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'dialog更新内容时触发 * @config {Boolean}            closeOnEscape         keyboardSupport模块提供支持，当esc键按下时关闭dialog。 * @config {String}             closeText             closeButton模块提供支持，关闭按钮上的title。'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}, {name: 'options.autoOpen', type: 'Boolean', desc: '是否一开始就打开，默认为true'}, {name: 'options.loginURL', type: 'String', desc: '登陆地址,无须改动'}, {name: 'options.regURL', type: 'String', desc: '注册地址,无须改动'}, {name: 'options.loginJumpURL', type: 'String', desc: '登陆跳转地址,必须，为提交表单跨域使用，可前往 http://fe.baidu.com/~zhengxin/passport/jump.html  下载，或者线上 http://passport.baidu.com/jump.html'}, {name: 'options.regJumpURL', type: 'String', desc: '注册跳转地址,必须，为提交表单跨域使用，可前往 http://fe.baidu.com/~zhengxin/passport/jump.html  下载，或者线上http://passport.baidu.com/jump.html'}, {name: 'options.defaultStatus', type: 'String', desc: '弹出时初始状态(登录或注册),取值 [\'login\',\'reg\'],默认为 login'}, {name: 'options.onLoginSuccess', type: 'Function', desc: '登录成功回调 TODO 默认处理函数 json.un'}, {name: 'options.onLoginFailure', type: 'Function', desc: '登录失败回调 TODO 默认处理函数, json.error'}, {name: 'options.onRegisterSuccess', type: 'Function', desc: '注册成功回调函数'}, {name: 'options.onRegisterFailure', type: 'Function', desc: '注册失败回调函数'}]}, 'baidu.ui.Modal': {name: 'Modal', desc: '为控件增加遮罩。', grammar: '', methods: [{name: 'getContainer', type: 'HTMLElement', desc: '获取modal的Container', grammar: '', returns: [{type: 'HTMLElement', desc: 'container.'}]}, {name: 'render', type: 'NULL', desc: '渲染遮罩层', grammar: '', returns: [{type: 'NULL'}]}, {name: 'show', type: 'NULL', desc: '显示遮罩层', grammar: '', options: [{name: 'options', type: 'Object', desc: '显示选项,任何合法的style属性.'}], returns: [{type: 'NULL'}]}, {name: 'hide', type: 'NULL', desc: '隐藏遮罩层', grammar: '', returns: [{type: 'NULL'}]}, {name: 'getWindowHandle', type: 'NULL', desc: 'window.resize & window.scroll 事件调用的function', grammar: '', returns: [{type: 'NULL'}]}, {name: 'update', type: 'NULL', desc: '更新遮罩层', grammar: '', options: [{name: 'options', type: 'Object', desc: '显示选项，同show.'}], returns: [{type: 'NULL'}]}, {name: 'dispose', type: 'Null', desc: '销毁', grammar: '', returns: [{type: 'Null'}]}]}, 'baidu.ui.Pager': {name: 'Pager', desc: '生成分页功能，默认会有一个横向的页面跳转链接列表，其两端有首页，尾页，上一页，下一页。若要自定义样式（如隐藏某些部件），请使用css（注：控件中各部件的css类名都有控件的tangram类名前缀）首页：first，尾页：last，上一页：previous，下一页：next，当前页：current。若要自定义控件生成的HTML，请参考源代码中以tpl开头的模板属性，类中的属性和方法都可以通过options动态覆盖。', grammar: '', options: [{name: 'options', type: 'Object', desc: '更新选项，若选项值不符合规则，则此次更新不予更新任何选项'}, {name: 'options.beginPage', type: 'Number', desc: '页码范围：起始页码，默认值1。'}, {name: 'options.endPage', type: 'Number', desc: '页码范围：最后页码+1，必须大于起始页码，默认值100。'}, {name: 'options.currentPage', type: 'Number', desc: '必须在页码范围内，若未指定currentPage且当前页码已超出页码范围，则会自动将currentPage更新到beginPage。'}, {name: 'options.itemCount', type: 'Number', desc: '默认显示多少个页面的链接（不包括“首页”等特殊链接），默认值10。'}, {name: 'options.leftItemCount', type: 'Number', desc: '当前页面链接在页面链接列表中的默认位置，必须小于itemCount，默认值4。'}, {name: 'options.specialLabelMap', type: 'Object', desc: '设置首页，上一页，下一页链接显示的内容。默认为{first:\'首页\',next:\'下一页\',previous:\'上一页\'}'}, {name: 'options.tplHref', type: 'String', desc: '链接显示样式，默认为\"##{page}\"'}, {name: 'options.tplLabel', type: 'String', desc: '页码显示样式，默认为\"[#{page}]\"'}, {name: 'options.tplCurrentLabel', type: 'String', desc: '选中页码的显示样式'}], methods: [{name: 'update', desc: '更新设置', grammar: '', options: [{name: 'options', type: 'Object', desc: '更新设置'}, {name: 'options.beginPage', type: 'Number', desc: '开始页'}, {name: 'options.endPage', type: 'Number', desc: '结束页'}, {name: 'options.currentPage', type: 'Number', desc: '跳转目标页的索引'}, {name: 'options.itemCount', type: 'Number', desc: '默认列出多少个a标签'}, {name: 'options.leftItemCount', type: 'Function', desc: '当前页的显示位置, 有默认实现'}]}, {name: 'render', desc: '将控件渲染到目标元素', grammar: '', options: [{name: 'container', type: 'String|HTMLElement', desc: '目标元素或元素id'}]}, {name: 'dispose', desc: '销毁控件', grammar: '', methods: [{name: 'callee', grammar: ''}]}]}, 'baidu.ui.Popup': {name: 'Popup', type: 'baidu.ui.Popup', desc: 'popup基类，建立一个popup实例', grammar: '', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.content', type: 'DOMElement', desc: '要放到popup中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'popup中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度。注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'popup距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'popup距离页面左方的距离'}, {name: 'options.classPrefix', type: 'String', desc: 'popup样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'popup的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'popup打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'popup关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'popup关闭前触发，如果此函数返回false，则组织popup关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'popup更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭popup'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的文字'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}], methods: [{name: 'isShown', type: 'Boolean', desc: '查询当前窗口是否处于显示状态', grammar: '', returns: [{type: 'Boolean', desc: '是否处于显示状态'}]}, {name: 'open', desc: '显示当前popup', grammar: '', options: [{name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到popup中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'popup中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度。注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'popup距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'popup距离页面左方的距离'}, {name: 'options.classPrefix', type: 'String', desc: 'popup样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'popup的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'popup打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'popup关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'popup关闭前触发，如果此函数返回false，则组织popup关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'popup更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭popup'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的文字'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}]}, {name: 'close', desc: '隐藏当前popup', grammar: ''}, {name: 'update', desc: '更新popup状态', grammar: '', options: [{name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到popup中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'popup中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度。注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'popup距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'popup距离页面左方的距离'}, {name: 'options.classPrefix', type: 'String', desc: 'popup样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'popup的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'popup打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'popup关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'popup关闭前触发，如果此函数返回false，则组织popup关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'popup更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭popup'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的文字'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}]}, {name: 'dispose', desc: '销毁控件', grammar: ''}], returns: [{type: 'baidu.ui.Popup', desc: 'Popup类'}]}, 'baidu.ui.ProgressBar': {name: 'ProgressBar', desc: '进度条控件', grammar: '', options: [{name: 'options'}]}, 'baidu.ui.ScrollBar': {name: 'ScrollBar', desc: '创建一个简单的滚动条', grammar: '', options: [{name: 'options', type: 'Object', desc: 'config参数.'}, {name: 'options.orientation', type: 'String', desc: '设置横向或是竖向滚动条，默认值：vertical,可取值：horizontal.'}, {name: 'options.value', type: 'Number', desc: '滚动条滚动的百分比值，定义域(0, 100)'}, {name: 'options.dimension', type: 'Number', desc: '滚动条滑块占全部内容的百分比，定义域(0, 100)'}, {name: 'options.step', type: 'Number', desc: '用户自定义当点击滚动按钮时每次滚动百分比距离，定义域(0, 100)'}, {name: 'options.onscroll', type: 'Function', desc: '当滚动时触发该事件，function(evt){}，evt.value可以取得滚动的百分比'}], methods: [{name: 'render', desc: '将scrollBar的body渲染到用户给出的target', grammar: '', options: [{name: 'target', type: 'String|HTMLElement', desc: '一个dom的id字符串或是dom对象.'}]}, {name: 'flushUI', desc: '更新组件的外观，通过传入的value来使滚动滑块滚动到指定的百分比位置，通过dimension来更新滑块所占整个内容的百分比宽度', grammar: '', options: [{name: 'value', type: 'Number', desc: '滑块滑动的百分比，定义域(0, 100).'}, {name: 'dimension', type: 'Number', desc: '滑块的宽点占内容的百分比，定义域(0, 100).'}]}, {name: 'scrollTo', desc: '滚动内容到参数指定的百分比位置', grammar: '', options: [{name: 'val', type: 'Number', desc: '一个百分比值.'}]}, {name: 'setVisible', desc: '设置滚动条的隐藏或显示', grammar: '', options: [{name: 'val', type: 'Boolean', desc: '布尔值 true:显示, false:隐藏.'}]}, {name: 'isVisible', type: 'Boolean', desc: '取得当前是隐藏或是显示状态', grammar: '', returns: [{type: 'Boolean', desc: 'true:显示, false:隐藏.'}]}, {name: 'getSize', type: 'Object', desc: '取得滚动条的宽度和高度', grammar: '', returns: [{type: 'Object', desc: '一个json，有width和height属性.'}]}, {name: 'update', desc: '更新滚动条的外观', grammar: '', options: [{name: 'options', type: 'Object', desc: '参考构造函数参数.'}]}, {name: 'dispose', desc: '销毁对象', grammar: ''}]}, 'baidu.ui.ScrollPanel': {name: 'ScrollPanel', desc: '创建一个panel来作为滚动条的容器', grammar: '', options: [{name: 'options', type: 'Object', desc: 'config参数.'}, {name: 'options.overflow', type: 'String', desc: '取值\'overflow-y\':创建竖向滚动, \'overflow-x\':创建横向滚动条, \'auto\':创建滚动条(默认)'}, {name: 'options.container', type: 'String|HTMLElement', desc: '需要被滚动条管理的容器对象'}], methods: [{name: 'render', desc: '渲染ScrollPanel到页面中', grammar: '', options: [{name: 'target', type: 'String|HTMLElement', desc: 'ScrollPanel依附于target来渲染.'}]}, {name: 'setVisible', desc: '设置滚动条的隐藏或是显示状态', grammar: '', options: [{name: 'val', type: 'Boolean', desc: '必选，true:显示, false:隐藏.'}, {name: 'pos', type: 'String', desc: '可选，当有两个滚动条时可以指定只隐藏其中之一，取值\'x\'或\'y\'，不传该参数隐藏或显示全部.'}]}, {name: 'isVisible', type: 'Boolean', desc: '取得滚动条的隐藏或显示状态', grammar: '', options: [{name: 'pos', type: 'String', desc: '取值\'x\'或是\'y\'来选择要取得哪个滚动条的隐藏或是显示状态.'}], returns: [{type: 'Boolean', desc: '返回布尔值来标示当前的隐藏或是显示状态.'}]}, {name: 'getScrollBar', type: 'ScrollBar|Array', desc: '取得滚动条对象', grammar: '', options: [{name: 'pos', type: 'String', desc: '取值\'x\'或是\'y\'来标示需取得哪个滚动条，当不传该参数则返回所有滚动条.'}], returns: [{type: 'ScrollBar|Array', desc: '返回滚动条对象或数组.'}]}, {name: 'update', desc: '更新所有滚动条的外观', grammar: '', options: [{name: 'options', type: 'Object', desc: '参数请参考构造函数参数.'}]}, {name: 'getPanel', type: 'HTMLElement', desc: '取得panel的dom节点', grammar: '', returns: [{type: 'HTMLElement'}]}, {name: 'getTarget', type: 'HTMLElement', desc: '取得用户传入的目标对象', grammar: '', returns: [{type: 'HTMLElement'}]}, {name: 'getContainer', type: 'HTMLElement', desc: '取得用户传入的container对象', grammar: '', returns: [{type: 'HTMLElement'}]}, {name: 'dispose', desc: '销毁对象', grammar: ''}]}, 'baidu.ui.setup': {name: 'setup', desc: '从当前页面批量setup所有控件（DOM - 控件）', grammar: '', options: [{name: 'element', type: 'DOMElement', desc: '渲染查找的根元素'}]}, 'baidu.ui.Slider': {name: 'Slider', desc: '拖动条控件，可用作音乐播放进度。', grammar: '', options: [{name: 'target', type: 'String|HTMLElement', desc: '存放滑块控件的元素，按钮会渲染到该元素内。'}, {name: 'options', type: 'Object', desc: '选项layout'}, {name: 'options.value', type: 'Number', desc: '记录滑块的当前进度值'}, {name: 'options.layout', type: 'Number', desc: '滑块的布局[水平：horizontal,垂直：vertical]'}, {name: 'options.min', type: 'Number', desc: '进度条最左边代表的值，默认值取0'}, {name: 'options.max', type: 'Number', desc: '进度条最右边代表的值，默认值取100'}, {name: 'options.range', type: 'Array', desc: '可拖动的范围，取值min到max之间，例如[30, 80]'}, {name: 'options.disabled', type: 'Boolean', desc: '是否禁用'}, {name: 'options.skin', type: 'String', desc: '自定义样式名称前缀'}]}, 'baidu.ui.Tab': {name: 'Tab', desc: 'Tab标签组', grammar: '', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.items', type: 'Function', desc: 'tab中的内容<pre> [{head : \"label1\",body : \"<p>content1</p>\"},{head : \"label2\",body : \"<p>content2</p>\"},{head : \"label3\",body : \"<p>content3</p>\"}]</pre>'}], methods: [{name: 'insertItemHTML', desc: '插入item html', grammar: '', options: [{name: 'item', type: 'Object', desc: '选项内容'}, {name: 'index', type: 'int', desc: '选项的索引'}]}, {name: 'dispose', desc: '销毁实例的析构', grammar: ''}]}, 'baidu.ui.Table': {name: 'Table', desc: 'Table表格组件。', grammar: '', options: [{name: 'options', type: 'Object', desc: 'config参数'}, {name: 'options.data', type: 'Object', desc: '生成表格的数据，格式[{id: \"rsid0\", content : [\"column0\", \"column1\"]}, {id : \"rsid0\", content : [\"column0\", \"column1\"]}], id不是必要，当有选择列时用来定义用户的checkbox的value'}, {name: 'options.columns', type: 'Object', desc: '各个列的高级定义，格式[{index : 1, width : 100, type : \"select\"}, {index : 2, width : \"100%\", enableEdit : true}, {index : 3, width : \"200px\"}]'}]}, 'baidu.ui.Tooltip': {name: 'Tooltip', type: 'baidu.ui.Tooltip', desc: '弹出tip层,类似鼠标划过含title属性元素的效果', grammar: '', options: [{name: 'options', type: 'Object', desc: '选项.'}, {name: 'options.target', type: 'String|Array', desc: '目标元素或元素id。可直接设置多个目标元素'}, {name: 'options.type', type: 'String', desc: '（可选）触发展开的类型，可以为:hover和click。默认为click'}, {name: 'options.contentElement', type: 'Element', desc: '（可选）Tooltip元素的内部HTMLElement。'}, {name: 'options.content', type: 'String', desc: '（可选）Tooltip元素的内部HTML String。若target存在title，则以title为准'}, {name: 'options.width', type: 'String', desc: '（可选）宽度'}, {name: 'options.height', type: 'String', desc: '（可选）高度'}, {name: 'options.offset', type: 'Array|Object', desc: '（可选）偏移量。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向。单位：px，默认值：[0,0]。'}, {name: 'options.single', type: 'boolean', desc: '（可选）是否全局单例。若该值为true，则全局共用唯一的浮起tooltip元素，默认为true。'}, {name: 'options.zIndex', type: 'Number', desc: '（可选）浮起tooltip层的z-index值，默认为3000。'}, {name: 'options.positionBy', type: 'String', desc: '（可选）浮起tooltip层的位置参考，取值[\'mouse\',\'element\']，分别对应针对鼠标位置或者element元素计算偏移，默认mouse'}, {name: 'options.positionElement', type: 'Element', desc: '（可选）定位元素，设置此元素且positionBy为element时，根据改元素计算位置'}, {name: 'options.autoRender', type: 'Boolean', desc: '是否自动渲染。'}, {name: 'options.onopen', type: 'Function', desc: '（可选）打开tooltip时触发。'}, {name: 'options.onclose', type: 'Function', desc: '（可选）关闭tooltip时触发。'}, {name: 'options.onbeforeopen', type: 'Function', desc: '（可选）打开tooltip前触发。'}, {name: 'options.onbeforeclose', type: 'Function', desc: '（可选）关闭tooltip前触发。'}], methods: [{name: 'render', desc: '渲染Tooltip到HTML', grammar: ''}, {name: 'open', desc: '打开tooltip', grammar: '', options: [{name: 'target', type: 'HTMLElement', desc: '显示tooltip所参照的html元素'}]}, {name: 'update', desc: '更新options', grammar: '', options: [{name: 'options', type: 'Object', desc: '选项.'}, {name: 'options.target', type: 'String|Array', desc: '目标元素或元素id。可直接设置多个目标元素'}, {name: 'options.type', type: 'String', desc: '（可选）触发展开的类型，可以为:hover和click。默认为click'}, {name: 'options.contentElement', type: 'Element', desc: '（可选）Tooltip元素的内部HTMLElement。'}, {name: 'options.content', type: 'String', desc: '（可选）Tooltip元素的内部HTML String。若target存在title，则以title为准'}, {name: 'options.width', type: 'String', desc: '（可选）宽度'}, {name: 'options.height', type: 'String', desc: '（可选）高度'}, {name: 'options.offset', type: 'Array|Object', desc: '（可选）偏移量。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向。单位：px，默认值：[0,0]。'}, {name: 'options.single', type: 'boolean', desc: '（可选）是否全局单例。若该值为true，则全局共用唯一的浮起tooltip元素，默认为true。'}, {name: 'options.zIndex', type: 'Number', desc: '（可选）浮起tooltip层的z-index值，默认为3000。'}, {name: 'options.positionBy', type: 'String', desc: '（可选）浮起tooltip层的位置参考，取值[\'mouse\',\'element\']，分别对应针对鼠标位置或者element元素计算偏移，默认mouse。'}, {name: 'options.positionElement', type: 'Element', desc: '（可选）定位元素，设置此元素且positionBy为element时，根据改元素计算位置'}, {name: 'options.autoRender', type: 'Boolean', desc: '是否自动渲染。'}, {name: 'options.onopen', type: 'Function', desc: '（可选）打开tooltip时触发。'}, {name: 'options.onclose', type: 'Function', desc: '（可选）关闭tooltip时触发。'}, {name: 'options.onbeforeopen', type: 'Function', desc: '（可选）打开tooltip前触发。'}, {name: 'options.onbeforeclose', type: 'Function', desc: '（可选）关闭tooltip前触发。'}]}, {name: 'close', desc: '关闭tooltip', grammar: ''}, {name: 'dispose', desc: '销毁控件', grammar: ''}], returns: [{type: 'baidu.ui.Tooltip', desc: 'Tooltip实例'}]}, 'baidu.ui.Tree.TreeNode': {name: 'TreeNode', desc: '树节点类', grammar: '', options: [{name: 'options', type: 'Object'}, {name: 'options.isExpand', type: 'Boolean', desc: '是否是展开, 默认值为false'}, {name: 'options.children', type: 'Array', desc: '子节点options数组  默认值为null'}, {name: 'options.isRoot', type: 'Boolean', desc: '是否是根节点,默认值为false'}, {name: 'options.type', type: 'Boolean', desc: '节点类型 trunk|leaf, 默认值为\'leaf\''}, {name: 'options.id', type: 'String', desc: '节点的唯一标识ID。默认为null'}, {name: 'options.text', type: 'String', desc: '节点显示名称. 默认值为null'}, {name: 'options.href', type: 'String', desc: '节点的链接href. 默认值为null'}, {name: 'options.target', type: 'String', desc: '节点链接的target,有href的时候才生效。默认值为null'}, {name: 'options.icon', type: 'String', desc: '节点图标的路径. 默认值为null'}, {name: 'options.skin', type: 'String', desc: '节点样式选择符. 默认值为null'}, {name: 'options.isToggle', type: 'Boolean', desc: '是否支持节点展开或收起 默认值为true'}], methods: [{name: 'getParentNode', type: 'TreeNode', desc: '取得节点的父节点', grammar: '', returns: [{type: 'TreeNode', desc: 'treeNode.'}]}, {name: 'setParentNode', desc: '设置节点的父节点', grammar: '', options: [{name: 'treeNode', type: 'TreeNode'}]}, {name: 'getChildNodes', type: 'Array', desc: '取得节点的子节点数组', grammar: '', returns: [{type: 'Array', desc: 'treeNodes.'}]}, {name: 'setTree', desc: '设置节点的对应的Tree', grammar: '', options: [{name: 'tree', type: 'Tree'}]}, {name: 'getTree', type: 'Tree', desc: '取得节点的对应的Tree', grammar: '', returns: [{type: 'Tree', desc: 'tree.'}]}, {name: 'appendData', desc: '增加一组children数据。数据格式:[{text:\"\",href:\"\",children:[{text:\"\",href:\"\"},{text:\"\",href:\"\"}]},{text:\"\"},{text:\"\"}]可以数组里面嵌套数组', grammar: '', options: [{name: 'array', type: 'Array'}]}, {name: 'isParent', desc: '递归判断本节点是否是传进来treeNode的父节点', grammar: '', options: [{name: 'treeNode', type: 'TreeNode', desc: '节点.'}]}, {name: 'appendTo', desc: '将已有节点添加到目标节点中，成为这个目标节点的子节点。', grammar: '', options: [{name: ':', desc: 'parentNode'}]}, {name: 'moveTo', desc: '将此节点移动至一个目标节点,成为这个目标节点的next节点', grammar: '', options: [{name: 'treeNode'}]}, {name: 'appendChild', type: 'TreeNode', desc: '新增一个子节点1.先判断子节点是否被渲染过，如果渲染过，就将子节点append到自己subNodes容器里  否则就inertHTML的子节点的getString2.对parentNode与childNodes进行变更。3.更新treeNode与tree的update', grammar: '', options: [{name: '需要加入的节点(分为已经渲染的节点和为被渲染的节点)', type: 'TreeNode', desc: '通过treeNode._getContainer()返回值来判断是否被渲染.'}, {name: '此节点做为', type: 'index', desc: '节点集合的[index+1]的值'}], returns: [{type: 'TreeNode', desc: 'treeNode 返回被新增的child'}]}, {name: 'removeAllChildren', desc: '批量删除一个节点下的所有子节点', grammar: ''}, {name: 'removeChild', desc: '删除一个子节点1.删除此节点对象的数据结构2.删除此节点所对应的dom元素对象', grammar: '', options: [{name: 'treeNode', type: 'TreeNode'}]}, {name: 'update', desc: '更新节点的一系列属性1.如有text,就更新text.2.如有icon', grammar: '', options: [{name: 'options', type: 'Object'}]}, {name: 'expand', desc: '展开节点分步渲染。第一次expand会渲染节点', grammar: ''}, {name: 'collapse', desc: '收起节点', grammar: ''}, {name: 'toggle', desc: '切换，收起或者展开', grammar: ''}, {name: 'blur', desc: '失去焦点,让当前节点取消高亮。', grammar: ''}, {name: 'focus', desc: '取得焦点,并且让当前节点高亮，让上一节点取消高亮。', grammar: ''}, {name: 'hide', desc: '隐藏节点，但不包括它的子节点。', grammar: ''}, {name: 'show', desc: '显示节点。', grammar: ''}, {name: 'expandAll', desc: '递归展开所有子节点', grammar: ''}, {name: 'collapseAll', desc: '递归收起所有子节点', grammar: ''}, {name: 'getIndex', type: 'int', desc: '取得本节点所对应父节点的索引', grammar: '', returns: [{type: 'int', desc: 'index.'}]}, {name: 'getNext', type: 'TreeNode', desc: '取得本节点的下一个节点如果没有就返回自己', grammar: '', returns: [{type: 'TreeNode', desc: 'next.'}]}, {name: 'getPrevious', type: 'TreeNode', desc: '取得本节点的上一个节点如果没有就返回自己', grammar: '', returns: [{type: 'TreeNode', desc: 'previous.'}]}, {name: 'getFirstChild', type: 'TreeNode', desc: '取得本节点的第一个子节点如果没有就返回null', grammar: '', returns: [{type: 'TreeNode', desc: 'previous.'}]}, {name: 'getLastChild', type: 'TreeNode', desc: '取得本节点的最后一个子节点如果没有就返回null', grammar: '', returns: [{type: 'TreeNode', desc: 'previous.'}]}, {name: 'isLastNode', type: 'Boolean', desc: '是否是最后一个节点在初始渲染节点的时候，自己维护了一个_isLast,就不用去动态算是否是最后一个子节点。而在动态新增，删除节点时，动态的处理是否是最后一个节点能方便代码实现，这样做的目的既能保证初始化时的性能，也能够方便动态功能的实现。.', grammar: '', options: [{name: 'isInit'}], returns: [{type: 'Boolean', desc: 'true | false.'}]}]}, 'baidu.widget.create': {name: 'create', desc: '根据传入的widget名, 初始化方法等,创建widget.', grammar: 'baidu.widget.create(id, main, [options])', options: [{name: 'id', type: 'String', desc: 'widget名.'}, {name: 'main', type: 'Function', desc: 'widget的初始化方法,第一个参数为获取依赖widget API的方法(require), 第二个参数为API挂载点(exports).'}, {name: 'options', type: 'Object', desc: '配置参数.'}, {name: 'options.depends', type: 'Array<String>|String', desc: '依赖列表, 支持逗号分隔的字符串描述.'}, {name: 'options.dispose', type: 'Function', desc: '析构函数,在dispose时调用.'}, {name: 'options.lazyLoad', type: 'Boolean', desc: '延迟加载.该参数为true时不加载依赖模块,也不执行初始化方法,需显示调用 baidu.widget.load方法.'}]}, 'baidu.widget.dispose': {name: 'dispose', desc: '析构widget. 如果widget有dispose方法,则执行.', grammar: 'baidu.widget.dispose(widget)', options: [{name: 'name', type: 'String', desc: 'widget名.'}]}, 'baidu.widget.get': {name: 'get', type: 'Object', desc: '获取已加载的widget.', grammar: 'baidu.widget.get(name)', options: [{name: 'name', type: 'String', desc: 'widget名.'}], returns: [{type: 'Object', desc: 'widget'}]}, 'baidu.widget.getPath': {name: 'getPath', type: 'String', desc: '获取widget的url路径. <br/> 优先查找baidu.widget._pathInfo下的配置, 默认会将\"pkg1.pkg2.widget\" 映射成\"pkg1/pkg2/widget.js\"', grammar: 'baidu.widget.getPath(name)', options: [{name: 'name', type: 'String', desc: 'widget名.'}], returns: [{type: 'String', desc: 'widget路径.'}]}, 'baidu.widget.load': {name: 'load', desc: '加载widget, 并在widget加载完成后执行传入的方法.', grammar: 'baidu.widget.load(widgets, executer)', options: [{name: 'widgets', type: 'Array<String>|String', desc: 'widget名称数组.'}, {name: 'executer', type: 'Function', desc: 'widget加载完成时执行,第一个参数为获取widget API的方法(require).'}]}}
}
