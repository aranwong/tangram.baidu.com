
var tangram_component = {
	nameSpace: ['baidu.ajax', 'baidu.ajax.form', 'baidu.ajax.get', 'baidu.ajax.post', 'baidu.ajax.request', 'baidu.array', 'baidu.array.contains', 'baidu.array.each', 'baidu.array.empty', 'baidu.array.every', 'baidu.array.filter', 'baidu.array.find', 'baidu.array.hash', 'baidu.array.indexOf', 'baidu.array.lastIndexOf', 'baidu.array.map', 'baidu.array.reduce', 'baidu.array.remove', 'baidu.array.removeAt', 'baidu.array.some', 'baidu.array.unique', 'baidu.async', 'baidu.async.get', 'baidu.async.post', 'baidu.async.when', 'baidu.browser', 'baidu.browser.chrome', 'baidu.browser.firefox', 'baidu.browser.ie', 'baidu.browser.isGecko', 'baidu.browser.isStrict', 'baidu.browser.isWebkit', 'baidu.browser.maxthon', 'baidu.browser.opera', 'baidu.browser.safari', 'baidu.cookie', 'baidu.cookie.get', 'baidu.cookie.getRaw', 'baidu.cookie.remove', 'baidu.cookie.set', 'baidu.cookie.setRaw', 'baidu.data', 'baidu.data.dataSource', 'baidu.data.dataSource.ajax', 'baidu.data.dataSource.DataSource', 'baidu.data.dataSource.local', 'baidu.data.dataSource.sio', 'baidu.data.storage', 'baidu.data.XPC', 'baidu.date', 'baidu.date.format', 'baidu.date.parse', 'baidu.dom', 'baidu.dom.addClass', 'baidu.dom.children', 'baidu.dom.contains', 'baidu.dom.create', 'baidu.dom.ddManager', 'baidu.dom.drag', 'baidu.dom.draggable', 'baidu.dom.droppable', 'baidu.dom.empty', 'baidu.dom.first', 'baidu.dom.fixable', 'baidu.dom.g', 'baidu.dom.getAncestorBy', 'baidu.dom.getAncestorByClass', 'baidu.dom.getAncestorByTag', 'baidu.dom.getAttr', 'baidu.dom.getComputedStyle', 'baidu.dom.getDocument', 'baidu.dom.getParent', 'baidu.dom.getPosition', 'baidu.dom.getStyle', 'baidu.dom.getText', 'baidu.dom.getWindow', 'baidu.dom.hasAttr', 'baidu.dom.hasClass', 'baidu.dom.hide', 'baidu.dom.insertAfter', 'baidu.dom.insertBefore', 'baidu.dom.insertHTML', 'baidu.dom.intersect', 'baidu.dom.last', 'baidu.dom.next', 'baidu.dom.prev', 'baidu.dom.q', 'baidu.dom.query', 'baidu.dom.ready', 'baidu.dom.remove', 'baidu.dom.removeClass', 'baidu.dom.removeStyle', 'baidu.dom.resizable', 'baidu.dom.setAttr', 'baidu.dom.setAttrs', 'baidu.dom.setBorderBoxHeight', 'baidu.dom.setBorderBoxSize', 'baidu.dom.setBorderBoxWidth', 'baidu.dom.setPosition', 'baidu.dom.setStyle', 'baidu.dom.setStyles', 'baidu.dom.show', 'baidu.dom.toggle', 'baidu.dom.toggleClass', 'baidu.e', 'baidu.element', 'baidu.element.each', 'baidu.element.Element', 'baidu.element.events', 'baidu.element.extend', 'baidu.event', 'baidu.event.EventArg', 'baidu.event.fire', 'baidu.event.get', 'baidu.event.getKeyCode', 'baidu.event.getPageX', 'baidu.event.getPageY', 'baidu.event.getTarget', 'baidu.event.on', 'baidu.event.once', 'baidu.event.preventDefault', 'baidu.event.stop', 'baidu.event.stopPropagation', 'baidu.event.un', 'baidu.flash.avatarMaker', 'baidu.flash.fileUploader', 'baidu.flash.imageUploader', 'baidu.fn', 'baidu.fn.abstractMethod', 'baidu.fn.bind', 'baidu.fn.blank', 'baidu.fn.methodize', 'baidu.fn.multize', 'baidu.fn.wrapReturnValue', 'baidu.form', 'baidu.form.Validate', 'baidu.form.Validator.register', 'baidu.form.ValidRule', 'baidu.fx.collapse', 'baidu.fx.create', 'baidu.fx.current', 'baidu.fx.expand', 'baidu.fx.fadeIn', 'baidu.fx.fadeOut', 'baidu.fx.getTransition', 'baidu.fx.highlight', 'baidu.fx.mask', 'baidu.fx.move', 'baidu.fx.moveBy', 'baidu.fx.moveTo', 'baidu.fx.opacity', 'baidu.fx.puff', 'baidu.fx.pulsate', 'baidu.fx.remove', 'baidu.fx.scale', 'baidu.fx.scrollBy', 'baidu.fx.scrollTo', 'baidu.fx.shake', 'baidu.fx.Timeline', 'baidu.fx.zoomIn', 'baidu.fx.zoomOut', 'baidu.json', 'baidu.json.decode', 'baidu.json.encode', 'baidu.json.parse', 'baidu.json.stringify', 'baidu.lang', 'baidu.lang.Class', 'baidu.lang.createClass', 'baidu.lang.createSingle', 'baidu.lang.decontrol', 'baidu.lang.Event', 'baidu.lang.eventCenter', 'baidu.lang.eventCenter.addEventListener', 'baidu.lang.getModule', 'baidu.lang.guid', 'baidu.lang.inherits', 'baidu.lang.instance', 'baidu.lang.isArray', 'baidu.lang.isBoolean', 'baidu.lang.isDate', 'baidu.lang.isElement', 'baidu.lang.isFunction', 'baidu.lang.isNumber', 'baidu.lang.isObject', 'baidu.lang.isString', 'baidu.lang.module', 'baidu.lang.toArray', 'baidu.number', 'baidu.number.comma', 'baidu.number.pad', 'baidu.number.randomInt', 'baidu.object', 'baidu.object.clone', 'baidu.object.each', 'baidu.object.extend', 'baidu.object.isEmpty', 'baidu.object.isPlain', 'baidu.object.keys', 'baidu.object.map', 'baidu.object.merge', 'baidu.object.values', 'baidu.page', 'baidu.page.createStyleSheet', 'baidu.page.getHeight', 'baidu.page.getMousePosition', 'baidu.page.getScrollLeft', 'baidu.page.getScrollTop', 'baidu.page.getViewHeight', 'baidu.page.getViewWidth', 'baidu.page.getWidth', 'baidu.page.lazyLoadImage', 'baidu.page.load', 'baidu.page.loadCssFile', 'baidu.page.loadJsFile', 'baidu.platform', 'baidu.platform.isAndroid', 'baidu.platform.isIpad', 'baidu.platform.isIphone', 'baidu.platform.isMacintosh', 'baidu.platform.isWindows', 'baidu.platform.isX11', 'baidu.sio', 'baidu.sio.callByBrowser', 'baidu.sio.callByServer', 'baidu.sio.log', 'baidu.string', 'baidu.string.decodeHTML', 'baidu.string.encodeHTML', 'baidu.string.escapeReg', 'baidu.string.filterFormat', 'baidu.string.filterFormat.escapeJs', 'baidu.string.filterFormat.escapeString', 'baidu.string.filterFormat.toInt', 'baidu.string.format', 'baidu.string.formatColor', 'baidu.string.getByteLength', 'baidu.string.stripTags', 'baidu.string.subByte', 'baidu.string.toCamelCase', 'baidu.string.toHalfWidth', 'baidu.string.trim', 'baidu.string.wbr', 'baidu.swf', 'baidu.swf.create', 'baidu.swf.createHTML', 'baidu.swf.getMovie', 'baidu.swf.Proxy', 'baidu.swf.version', 'baidu.tools.log.Dialog', 'baidu.ui', 'baidu.ui.Accordion', 'baidu.ui.Base', 'baidu.ui.Base.dispose', 'baidu.ui.Base.getBody', 'baidu.ui.Base.getCallRef', 'baidu.ui.Base.getCallString', 'baidu.ui.Base.getClass', 'baidu.ui.Base.getId', 'baidu.ui.Base.getMain', 'baidu.ui.Base.getParent', 'baidu.ui.Base.on', 'baidu.ui.Base.renderMain', 'baidu.ui.Base.setParent', 'baidu.ui.Base.uiType', 'baidu.ui.behavior', 'baidu.ui.behavior.coverable', 'baidu.ui.behavior.decorator', 'baidu.ui.behavior.draggable', 'baidu.ui.behavior.droppable', 'baidu.ui.behavior.posable', 'baidu.ui.behavior.posable.setPositionByElement', 'baidu.ui.behavior.posable.setPositionByMouse', 'baidu.ui.behavior.resizable', 'baidu.ui.behavior.sortable', 'baidu.ui.behavior.statable', 'baidu.ui.Button', 'baidu.ui.button.Button$capture', 'baidu.ui.Calendar', 'baidu.ui.Carousel', 'baidu.ui.ColorPalette', 'baidu.ui.ColorPicker', 'baidu.ui.ColorPicker.ColorPicker$click', 'baidu.ui.ColorPicker.ColorPicker$more', 'baidu.ui.Combox', 'baidu.ui.create', 'baidu.ui.createPopup', 'baidu.ui.createUI', 'baidu.ui.DatePicker', 'baidu.ui.Decorator', 'baidu.ui.Dialog', 'baidu.ui.get', 'baidu.ui.getAttribute', 'baidu.ui.getUI', 'baidu.ui.Input', 'baidu.ui.ItemSet', 'baidu.ui.Login', 'baidu.ui.Menubar', 'baidu.ui.Modal', 'baidu.ui.Pager', 'baidu.ui.Popup', 'baidu.ui.ProgressBar', 'baidu.ui.ScrollBar', 'baidu.ui.ScrollPanel', 'baidu.ui.setup', 'baidu.ui.Slider', 'baidu.ui.StarRate', 'baidu.ui.Suggestion', 'baidu.ui.Tab', 'baidu.ui.Table', 'baidu.ui.Toolbar', 'baidu.ui.Tooltip', 'baidu.ui.Tree', 'baidu.ui.Tree.TreeNode', 'baidu.url', 'baidu.url.escapeSymbol', 'baidu.url.getQueryValue', 'baidu.url.jsonToQuery', 'baidu.url.queryToJson', 'baidu.widget', 'baidu.widget.create', 'baidu.widget.dispose', 'baidu.widget.get', 'baidu.widget.getPath', 'baidu.widget.load', 'T.dom.fixable'],
	docMap: {'baidu.ajax.form': {name: 'form', type: 'XMLHttpRequest', desc: '将一个表单用ajax方式提交', options: [{name: 'form', type: 'HTMLFormElement', desc: '需要提交的表单元素'}, {name: 'options', type: 'Object', desc: '发送请求的选项参数'}, {name: 'options.async', type: 'Boolean', desc: '是否异步请求。默认为true（异步）'}, {name: 'options.username', type: 'String', desc: '用户名'}, {name: 'options.password', type: 'String', desc: '密码'}, {name: 'options.headers', type: 'Object', desc: '要设置的http request header'}, {name: 'options.replacer', type: 'Function', desc: '对参数值特殊处理的函数,replacer(string value, string key)'}, {name: 'options.onbeforerequest', type: 'Function', desc: '发送请求之前触发，function(XMLHttpRequest xhr)。'}, {name: 'options.onsuccess', type: 'Function', desc: '请求成功时触发，function(XMLHttpRequest xhr, string responseText)。'}, {name: 'options.onfailure', type: 'Function', desc: '请求失败时触发，function(XMLHttpRequest xhr)。'}, {name: 'options.on{STATUS_CODE}', type: 'Function', desc: '当请求为相应状态码时触发的事件，如on302、on404、on500，function(XMLHttpRequest xhr)。3XX的状态码浏览器无法获取，4xx的，可能因为未知问题导致获取失败。'}], returns: [{type: 'XMLHttpRequest', desc: '发送请求的XMLHttpRequest对象'}]}, 'baidu.ajax.get': {name: 'get', type: 'XMLHttpRequest', desc: '发送一个get请求', options: [{name: 'url', type: 'string', desc: '发送请求的url地址'}, {name: 'onsuccess', type: 'Function', desc: '请求成功之后的回调函数，function(XMLHttpRequest xhr, string responseText)'}], returns: [{type: 'XMLHttpRequest', desc: '发送请求的XMLHttpRequest对象'}]}, 'baidu.ajax.post': {name: 'post', type: 'XMLHttpRequest', desc: '发送一个post请求', options: [{name: 'url', type: 'string', desc: '发送请求的url地址'}, {name: 'data', type: 'string', desc: '发送的数据'}, {name: 'onsuccess', type: 'Function', desc: '请求成功之后的回调函数，function(XMLHttpRequest xhr, string responseText)'}], returns: [{type: 'XMLHttpRequest', desc: '发送请求的XMLHttpRequest对象'}]}, 'baidu.ajax.request': {name: 'request', type: 'XMLHttpRequest', desc: '发送一个ajax请求', options: [{name: 'url', type: 'string', desc: '发送请求的url'}, {name: 'opt_options', type: 'Object', desc: '发送请求的选项参数'}, {name: 'opt_options.method', type: 'String', desc: '请求发送的类型。默认为GET'}, {name: 'opt_options.async', type: 'Boolean', desc: '是否异步请求。默认为true（异步）'}, {name: 'opt_options.data', type: 'String', desc: '需要发送的数据。如果是GET请求的话，不需要这个属性'}, {name: 'opt_options.headers', type: 'Object', desc: '要设置的http request header'}, {name: 'opt_options.timeout', type: 'number', desc: '超时时间，单位ms'}, {name: 'opt_options.username', type: 'String', desc: '用户名'}, {name: 'opt_options.password', type: 'String', desc: '密码'}, {name: 'opt_options.onsuccess', type: 'Function', desc: '请求成功时触发，function(XMLHttpRequest xhr, string responseText)。'}, {name: 'opt_options.onfailure', type: 'Function', desc: '请求失败时触发，function(XMLHttpRequest xhr)。'}, {name: 'opt_options.onbeforerequest', type: 'Function', desc: '发送请求之前触发，function(XMLHttpRequest xhr)。'}, {name: 'opt_options.on{STATUS_CODE}', type: 'Function', desc: '当请求为相应状态码时触发的事件，如on302、on404、on500，function(XMLHttpRequest xhr)。3XX的状态码浏览器无法获取，4xx的，可能因为未知问题导致获取失败。'}, {name: 'opt_options.noCache', type: 'Boolean', desc: '是否需要缓存，默认为false（缓存），1.1.1起支持。'}], returns: [{type: 'XMLHttpRequest', desc: '发送请求的XMLHttpRequest对象'}]}, 'baidu.array.contains': {name: 'contains', type: 'boolean', desc: '判断一个数组中是否包含给定元素', options: [{name: 'source', type: 'Array', desc: '需要判断的数组.'}, {name: 'obj', type: 'Any', desc: '要查找的元素.'}], returns: [{type: 'boolean', desc: '判断结果.'}]}, 'baidu.array.each': {name: 'each', type: 'Array', desc: '遍历数组中所有元素', options: [{name: 'source', type: 'Array', desc: '需要遍历的数组'}, {name: 'iterator', type: 'Function', desc: '对每个数组元素进行调用的函数，该函数有两个参数，第一个为数组元素，第二个为数组索引值，function (item, index)。'}, {name: 'thisObject', type: 'Object', desc: '函数调用时的this指针，如果没有此参数，默认是当前遍历的数组'}], returns: [{type: 'Array', desc: '遍历的数组'}]}, 'baidu.array.empty': {name: 'empty', desc: '清空一个数组', options: [{name: 'source', type: 'Array', desc: '需要清空的数组.'}]}, 'baidu.array.every': {name: 'every', type: 'boolean', desc: '判断一个数组中是否所有元素都满足给定条件', options: [{name: 'source', type: 'Array', desc: '需要判断的数组.'}, {name: 'iterator', type: 'Function', desc: '判断函数.'}, {name: 'thisObject', type: 'Object', desc: '函数调用时的this指针，如果没有此参数，默认是当前遍历的数组'}], returns: [{type: 'boolean', desc: '判断结果.'}]}, 'baidu.array.filter': {name: 'filter', type: 'Array', desc: '从数组中筛选符合条件的元素', options: [{name: 'source', type: 'Array', desc: '需要筛选的数组'}, {name: 'iterator', type: 'Function', desc: '对每个数组元素进行筛选的函数，该函数有两个参数，第一个为数组元素，第二个为数组索引值，function (item, index)，函数需要返回true或false'}, {name: 'thisObject', type: 'Object', desc: '函数调用时的this指针，如果没有此参数，默认是当前遍历的数组'}], returns: [{type: 'Array', desc: '符合条件的数组项集合'}]}, 'baidu.array.find': {name: 'find', type: 'Any|null', desc: '从数组中寻找符合条件的第一个元素', options: [{name: 'source', type: 'Array', desc: '需要查找的数组'}, {name: 'iterator', type: 'Function', desc: '对每个数组元素进行查找的函数，该函数有两个参数，第一个为数组元素，第二个为数组索引值，function (item, index)，函数需要返回true或false'}], returns: [{type: 'Any|null', desc: '符合条件的第一个元素，找不到时返回null'}]}, 'baidu.array.hash': {name: 'hash', type: 'Object', desc: '将两个数组参数合并成一个类似hashMap结构的对象，这个对象使用第一个数组做为key，使用第二个数组做为值，如果第二个参数未指定，则把对象的所有值置为true。', options: [{name: 'keys', type: 'Array', desc: '作为key的数组'}, {name: 'values', type: 'Array', desc: '作为value的数组，未指定此参数时，默认值将对象的值都设为true。'}], returns: [{type: 'Object', desc: '合并后的对象{key : value}'}]}, 'baidu.array.indexOf': {name: 'indexOf', type: 'number', desc: '查询数组中指定元素的索引位置', options: [{name: 'source', type: 'Array', desc: '需要查询的数组'}, {name: 'match', type: 'Any', desc: '查询项'}, {name: 'fromIndex', type: 'number', desc: '查询的起始位索引位置，如果为负数，则从source.length+fromIndex往后开始查找'}], returns: [{type: 'number', desc: '指定元素的索引位置，查询不到时返回-1'}]}, 'baidu.array.lastIndexOf': {name: 'lastIndexOf', type: 'number', desc: '从后往前，查询数组中指定元素的索引位置', options: [{name: 'source', type: 'Array', desc: '需要查询的数组'}, {name: 'match', type: 'Any', desc: '查询项'}, {name: 'fromIndex', type: 'number', desc: '查询的起始位索引位置，如果为负数，则从source.length+fromIndex往前开始查找'}], returns: [{type: 'number', desc: '指定元素的索引位置，查询不到时返回-1'}]}, 'baidu.array.map': {name: 'map', type: 'Array', desc: '遍历数组中所有元素，将每一个元素应用方法进行转换，并返回转换后的新数组。', options: [{name: 'source', type: 'Array', desc: '需要遍历的数组.'}, {name: 'iterator', type: 'Function', desc: '对每个数组元素进行处理的函数.'}, {name: 'thisObject', type: 'Object', desc: '函数调用时的this指针，如果没有此参数，默认是当前遍历的数组'}], returns: [{type: 'Array', desc: 'map后的数组.'}]}, 'baidu.array.reduce': {name: 'reduce', type: 'Array', desc: '遍历数组中所有元素，将每一个元素应用方法进行合并，并返回合并后的结果。', options: [{name: 'source', type: 'Array', desc: '需要遍历的数组.'}, {name: 'iterator', type: 'Function', desc: '对每个数组元素进行处理的函数，函数接受四个参数：上一次reduce的结果（或初始值），当前元素值，索引值，整个数组.'}, {name: 'initializer', type: 'Object', desc: '合并的初始项，如果没有此参数，默认用数组中的第一个值作为初始值.'}], returns: [{type: 'Array', desc: 'reduce后的值.'}]}, 'baidu.array.remove': {name: 'remove', type: 'Array', desc: '移除数组中的项', options: [{name: 'source', type: 'Array', desc: '需要移除项的数组'}, {name: 'match', type: 'Any', desc: '要移除的项'}], returns: [{type: 'Array', desc: '移除后的数组'}]}, 'baidu.array.removeAt': {name: 'removeAt', type: 'Any', desc: '移除数组中的项', options: [{name: 'source', type: 'Array', desc: '需要移除项的数组'}, {name: 'index', type: 'number', desc: '要移除项的索引位置'}], returns: [{type: 'Any', desc: '被移除的数组项'}]}, 'baidu.array.some': {name: 'some', type: 'boolean', desc: '判断一个数组中是否有部分元素满足给定条件', options: [{name: 'source', type: 'Array', desc: '需要判断的数组.'}, {name: 'iterator', type: 'Function', desc: '判断函数.'}, {name: 'thisObject', type: 'Object', desc: '函数调用时的this指针，如果没有此参数，默认是当前遍历的数组'}], returns: [{type: 'boolean', desc: '判断结果.'}]}, 'baidu.array.unique': {name: 'unique', type: 'Array', desc: '过滤数组中的相同项。如果两个元素相同，会删除后一个元素。', options: [{name: 'source', type: 'Array', desc: '需要过滤相同项的数组'}, {name: 'compareFn', type: 'Function', desc: '比较两个数组项是否相同的函数,两个数组项作为函数的参数。'}], returns: [{type: 'Array', desc: '过滤后的新数组'}]}, 'baidu.async.get': {name: 'get', type: 'baidu.async.Deferred', desc: '支持异步的ajax.get封装.', options: [{name: 'url', type: 'String', desc: '请求地址.'}], returns: [{type: 'baidu.async.Deferred', desc: 'Deferred对象,支持链式调用.'}]}, 'baidu.async.post': {name: 'post', type: 'baidu.async.Deferred', desc: '支持异步的ajax.post封装.', options: [{name: 'url', type: 'String', desc: '请求地址.'}, {name: 'data', type: 'String', desc: '请求数据.'}], returns: [{type: 'baidu.async.Deferred', desc: 'Deferred对象,支持链式调用.'}]}, 'baidu.async.when': {name: 'when', type: 'baidu.async.Deferred', desc: '保证onResolve或onReject可以按序执行. 若第一个参数为deferred,则deferred完成后执行.否则立即执行onResolve,并传入第一个参数.', options: [{name: 'deferredOrValue', type: 'baidu.async.Deferred|*', desc: 'deferred实例或任意值.'}, {name: 'onResolve', type: 'Function', desc: '成功时的回调函数.若第一个参数不是Deferred实例,则立即执行此方法.'}, {name: 'onReject', type: 'Function', desc: '失败时的回调函数.'}], returns: [{type: 'baidu.async.Deferred', desc: 'deferred.'}]}, 'baidu.browser.chrome': {name: 'chrome', desc: '判断是否为chrome浏览器'}, 'baidu.browser.firefox': {name: 'firefox', desc: '判断是否为firefox浏览器'}, 'baidu.browser.ie': {name: 'ie', desc: '判断是否为ie浏览器'}, 'baidu.browser.isGecko': {name: 'isGecko', desc: '判断是否为gecko内核'}, 'baidu.browser.isStrict': {name: 'isStrict', desc: '判断是否严格标准的渲染模式'}, 'baidu.browser.isWebkit': {name: 'isWebkit', desc: '判断是否为webkit内核'}, 'baidu.browser.maxthon': {name: 'maxthon', desc: '判断是否为maxthon浏览器'}, 'baidu.browser.opera': {name: 'opera', desc: '判断是否为opera浏览器'}, 'baidu.browser.safari': {name: 'safari', desc: '判断是否为safari浏览器, 支持ipad'}, 'baidu.cookie.get': {name: 'get', type: 'string|null', desc: '获取cookie的值，用decodeURIComponent进行解码', options: [{name: 'key', type: 'string', desc: '需要获取Cookie的键名'}], returns: [{type: 'string|null', desc: 'cookie的值，获取不到时返回null'}]}, 'baidu.cookie.getRaw': {name: 'getRaw', type: 'string|null', desc: '获取cookie的值，不对值进行解码', options: [{name: 'key', type: 'string', desc: '需要获取Cookie的键名'}], returns: [{type: 'string|null', desc: '获取的Cookie值，获取不到时返回null'}]}, 'baidu.cookie.remove': {name: 'remove', desc: '删除cookie的值', options: [{name: 'key', type: 'string', desc: '需要删除Cookie的键名'}, {name: 'options', type: 'Object', desc: '需要删除的cookie对应的 path domain 等值'}]}, 'baidu.cookie.set': {name: 'set', desc: '设置cookie的值，用encodeURIComponent进行编码', options: [{name: 'key', type: 'string', desc: '需要设置Cookie的键名'}, {name: 'value', type: 'string', desc: '需要设置Cookie的值'}, {name: 'options', type: 'Object', desc: '设置Cookie的其他可选参数'}, {name: 'options.path', type: 'string', desc: 'cookie路径'}, {name: 'options.expires', type: 'Date|number', desc: 'cookie过期时间,如果类型是数字的话, 单位是毫秒'}, {name: 'options.domain', type: 'string', desc: 'cookie域名'}, {name: 'options.secure', type: 'string', desc: 'cookie是否安全传输'}]}, 'baidu.cookie.setRaw': {name: 'setRaw', desc: '设置cookie的值，不对值进行编码', options: [{name: 'key', type: 'string', desc: '需要设置Cookie的键名'}, {name: 'value', type: 'string', desc: '需要设置Cookie的值'}, {name: 'options', type: 'Object', desc: '设置Cookie的其他可选参数'}, {name: 'options.path', type: 'string', desc: 'cookie路径'}, {name: 'options.expires', type: 'Date|number', desc: 'cookie过期时间,如果类型是数字的话, 单位是毫秒'}, {name: 'options.domain', type: 'string', desc: 'cookie域名'}, {name: 'options.secure', type: 'string', desc: 'cookie是否安全传输'}]}, 'baidu.data.dataSource.ajax': {name: 'ajax', desc: '异步调用数据源类', options: [{name: 'url', type: 'String', desc: '数据源地址'}, {name: 'options', type: 'Object', desc: '配置'}, {name: 'options.maxCache', type: 'Number', desc: '缓存数据的最大个数'}, {name: 'options.cache', type: 'Boolean', desc: '是否使用缓存'}, {name: 'optons.transition', type: 'Function', desc: '转换数据算法'}, {name: 'options.onbeforeget', type: 'Function', desc: 'beforeget事件'}]}, 'baidu.data.dataSource.local': {name: 'local', desc: '本地数据源类', options: [{name: 'source', type: 'Object', desc: '数据源'}, {name: 'options', type: 'Object', desc: '配置'}, {name: 'options.maxCache', type: 'Number', desc: '缓存数据的最大个数'}, {name: 'options.cache', type: 'Boolean', desc: '是否使用缓存'}, {name: 'optons.transition', type: 'Function', desc: '转换数据算法'}, {name: 'options.onbeforeget', type: 'Function', desc: 'beforeget事件'}]}, 'baidu.data.dataSource.sio': {name: 'sio', desc: '跨域数据源类', options: [{name: 'url', type: 'String', desc: '数据源地址'}, {name: 'options', type: 'Object', desc: '配置'}, {name: 'options.maxCache', type: 'Number', desc: '缓存数据的最大个数'}, {name: 'options.cache', type: 'Boolean', desc: '是否使用缓存'}, {name: 'optons.transition', type: 'Function', desc: '转换数据算法'}, {name: 'options.onbeforeget', type: 'Function', desc: 'beforeget事件'}]}, 'baidu.data.storage': {name: 'storage', desc: '一个本地存储对象，使用key-value的方式来存值，不具备夸浏览器通信功能，根据浏览器的不同自动选择userData或是localStorage或是cookie来存值.'}, 'baidu.data.XPC': {name: 'XPC', desc: 'XPC(cross page channel) 跨域通信模块', options: [{name: 'isParent', type: 'boolean', desc: '确定当前页面角色，如果是父页面，则为true，跨域的子页面为false，默认值为false.'}, {name: 'url', type: 'string', desc: '在对方域下部署的子页面，如果isParent为true，则此参数为必须，否则可以省略.'}, {name: 'timeout', type: 'number', desc: '设置超时时间(ms)，超过这个时间视为初始化失败，默认值是3000.'}]}, 'baidu.date.format': {name: 'format', type: 'string', desc: '对目标日期对象进行格式化', options: [{name: 'source', type: 'Date', desc: '目标日期对象'}, {name: 'pattern', type: 'string', desc: '日期格式化规则'}], methods: [{name: 'replacer', options: [{name: 'patternPart'}, {name: 'result'}]}], returns: [{type: 'string', desc: '格式化后的字符串'}]}, 'baidu.date.parse': {name: 'parse', type: 'Date', desc: '将目标字符串转换成日期对象', options: [{name: 'source', type: 'string', desc: '目标字符串'}], returns: [{type: 'Date', desc: '转换后的日期对象'}]}, 'baidu.dom.addClass': {name: 'addClass', type: 'HTMLElement', desc: '为目标元素添加className', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'className', type: 'string', desc: '要添加的className，允许同时添加多个class，中间使用空白符分隔'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.children': {name: 'children', type: 'Array', desc: '获取目标元素的直接子元素列表', options: [{name: 'element', type: 'HTMLElement|String', desc: '目标元素或目标元素的id'}], returns: [{type: 'Array', desc: '目标元素的子元素列表，没有子元素时返回空数组'}]}, 'baidu.dom.contains': {name: 'contains', type: 'boolean', desc: '判断一个元素是否包含另一个元素', options: [{name: 'container', type: 'HTMLElement|string', desc: '包含元素或元素的id'}, {name: 'contained', type: 'HTMLElement|string', desc: '被包含元素或元素的id'}], returns: [{type: 'boolean', desc: 'contained元素是否被包含于container元素的DOM节点上'}]}, 'baidu.dom.create': {name: 'create', type: 'HTMLElement', desc: '创建 Element 对象。', options: [{name: 'tagName', type: 'string', desc: '标签名称.'}, {name: 'opt_attributes', type: 'Object', desc: '元素创建时拥有的属性，如style和className.'}], returns: [{type: 'HTMLElement', desc: '创建的 Element 对象'}]}, 'baidu.dom.ddManager': {name: 'ddManager', type: 'DOMElement', desc: '拖曳管理器', options: [{name: 'element', type: 'HTMLElement|ID', desc: '被拖曳的元素'}, {name: 'options', type: 'JSON', desc: '拖曳配置项 {toggle, autoStop, interval, capture, range, ondragstart, ondragend, ondrag}'}], returns: [{type: 'DOMElement', desc: '可拖拽的元素'}]}, 'baidu.dom.drag': {name: 'drag', desc: '拖动指定的DOM元素', options: [{name: 'element', type: 'HTMLElement|string', desc: '元素或者元素的id'}, {name: 'options', type: 'Object', desc: '拖曳配置项'}, {name: 'options.range', type: 'Array', desc: '限制drag的拖拽范围，数组中必须包含四个值，分别是上、右、下、左边缘相对上方或左方的像素距离。默认无限制'}, {name: 'options.interval', type: 'Number', desc: '拖曳行为的触发频度（时间：毫秒）'}, {name: 'options.capture', type: 'Boolean', desc: '鼠标拖曳粘滞'}, {name: 'options.mouseEvent', type: 'Object', desc: '键名为clientX和clientY的object，若不设置此项，默认会获取当前鼠标位置'}, {name: 'options.ondragstart', type: 'Function', desc: 'drag开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'drag进行中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'drag结束时触发'}, {name: 'options.autoStop', type: 'function', desc: '是否在onmouseup时自动停止拖拽。默认为true'}]}, 'baidu.dom.draggable': {name: 'draggable', type: 'Draggable Instance', desc: '让一个DOM元素可拖拽', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID.'}, {name: 'options', type: 'Object', desc: '选项.'}, {name: 'options.range', type: 'Array', desc: '限制drag的拖拽范围，数组中必须包含四个值，分别是上、右、下、左边缘相对上方或左方的像素距离。默认无限制.'}, {name: 'options.interval', type: 'Number', desc: '拖曳行为的触发频度（时间：毫秒）.'}, {name: 'options.capture', type: 'Boolean', desc: '鼠标拖曳粘滞.'}, {name: 'options.mouseEvent', type: 'Object', desc: '键名为clientX和clientY的object，若不设置此项，默认会获取当前鼠标位置.'}, {name: 'options.onbeforedragstart', type: 'Function', desc: 'drag开始前触发（即鼠标按下时）.'}, {name: 'options.ondragstart', type: 'Function', desc: 'drag开始时触发.'}, {name: 'options.ondrag', type: 'Function', desc: 'drag进行中触发.'}, {name: 'options.ondragend', type: 'Function', desc: 'drag结束时触发.'}, {name: 'options.handler', type: 'HTMLElement', desc: '用于拖拽的手柄，比如dialog的title.'}, {name: 'options.toggle', type: 'Function', desc: '在每次ondrag的时候，会调用这个方法判断是否应该停止拖拽。如果此函数返回值为false，则停止拖拽.'}], methods: [{name: 'handlerMouseDown', options: [{name: 'e'}]}], returns: [{type: 'Draggable Instance', desc: '拖拽实例，包含cancel方法，可以停止拖拽.'}]}, 'baidu.dom.droppable': {name: 'droppable', type: 'Function', desc: '让一个DOM元素可以容纳被拖拽的DOM元素', options: [{name: 'element', type: 'HTMLElement|string', desc: '容器元素或者容器元素的ID'}, {name: 'options', type: 'Object', desc: '选项，拖拽元素对于容器元素的事件'}, {name: 'options.ondrop', type: 'Function', desc: '当元素放到容器元素内部触发'}, {name: 'options.ondropover', type: 'Function', desc: '当元素在容器元素上方时触发'}, {name: 'options.ondropout', type: 'Function', desc: '当元素移除容器元素时触发'}], returns: [{type: 'Function', desc: 'cancel取消拖拽'}]}, 'baidu.dom.empty': {name: 'empty', type: 'HTMLElement', desc: '删除一个节点下面的所有子节点。', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.first': {name: 'first', type: 'HTMLElement|null', desc: '获取目标元素的第一个元素节点', options: [{name: 'element', type: 'HTMLElement|String', desc: '目标元素或目标元素的id'}], returns: [{type: 'HTMLElement|null', desc: '目标元素的第一个元素节点，查找不到时返回null'}]}, 'baidu.dom.g': {name: 'g', type: 'HTMLElement|null', desc: '从文档中获取指定的DOM元素', options: [{name: 'id', type: 'string|HTMLElement', desc: '元素的id或DOM元素'}], returns: [{type: 'HTMLElement|null', desc: '获取的元素，查找不到时返回null,如果参数不合法，直接返回参数'}]}, 'baidu.dom.getAncestorBy': {name: 'getAncestorBy', type: 'HTMLElement|null', desc: '获取目标元素符合条件的最近的祖先元素', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'method', type: 'Function', desc: '判断祖先元素条件的函数，function (element)'}], returns: [{type: 'HTMLElement|null', desc: '符合条件的最近的祖先元素，查找不到时返回null'}]}, 'baidu.dom.getAncestorByClass': {name: 'getAncestorByClass', type: 'HTMLElement|null', desc: '获取目标元素指定元素className最近的祖先元素', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'className', type: 'string', desc: '祖先元素的class，只支持单个class'}], returns: [{type: 'HTMLElement|null', desc: '指定元素className最近的祖先元素，查找不到时返回null'}]}, 'baidu.dom.getAncestorByTag': {name: 'getAncestorByTag', type: 'HTMLElement|null', desc: '获取目标元素指定标签的最近的祖先元素', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'tagName', type: 'string', desc: '祖先元素的标签名'}], returns: [{type: 'HTMLElement|null', desc: '指定标签的最近的祖先元素，查找不到时返回null'}]}, 'baidu.dom.getAttr': {name: 'getAttr', type: 'string|null', desc: '获取目标元素的属性值', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'key', type: 'string', desc: '要获取的attribute键名'}], returns: [{type: 'string|null', desc: '目标元素的attribute值，获取不到时返回null'}]}, 'baidu.dom.getComputedStyle': {name: 'getComputedStyle', type: 'string', desc: '获取目标元素的computed style值。如果元素的样式值不能被浏览器计算，则会返回空字符串（IE）', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'key', type: 'string', desc: '要获取的样式名'}], returns: [{type: 'string', desc: '目标元素的computed style值'}]}, 'baidu.dom.getDocument': {name: 'getDocument', type: 'HTMLDocument', desc: '获取目标元素所属的document对象', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'HTMLDocument', desc: '目标元素所属的document对象'}]}, 'baidu.dom.getParent': {name: 'getParent', type: 'HTMLElement|null', desc: '获得元素的父节点', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'HTMLElement|null', desc: '父元素，如果找不到父元素，返回null'}]}, 'baidu.dom.getPosition': {name: 'getPosition', type: 'Object', desc: '获取目标元素相对于整个文档左上角的位置', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'Object', desc: '目标元素的位置，键值为top和left的Object。'}]}, 'baidu.dom.getStyle': {name: 'getStyle', type: 'string', desc: '获取目标元素的样式值', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'key', type: 'string', desc: '要获取的样式名'}], returns: [{type: 'string', desc: '目标元素的样式值'}]}, 'baidu.dom.getText': {name: 'getText', type: 'String', desc: '获得元素中的文本内容。', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'String', desc: '元素中文本的内容'}]}, 'baidu.dom.getWindow': {name: 'getWindow', type: 'window', desc: '获取目标元素所属的window对象', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'window', desc: '目标元素所属的window对象'}]}, 'baidu.dom.hasAttr': {name: 'hasAttr', type: 'Boolean', desc: '查询一个元素是否包含指定的属性', options: [{name: 'element', type: 'DOMElement|string', desc: 'DOM元素或元素的id'}, {name: 'name', type: 'string', desc: '要查找的属性名'}], returns: [{type: 'Boolean', desc: '是否包含此属性'}]}, 'baidu.dom.hasClass': {name: 'hasClass', type: 'Boolean', desc: '判断元素是否拥有指定的className', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'className', type: 'string', desc: '要判断的className，可以是用空格拼接的多个className'}], returns: [{type: 'Boolean', desc: '是否拥有指定的className，如果要查询的classname有一个或多个不在元素的className中，返回false'}]}, 'baidu.dom.hide': {name: 'hide', type: 'HTMLElement', desc: '隐藏目标元素', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.insertAfter': {name: 'insertAfter', type: 'HTMLElement', desc: '将目标元素添加到基准元素之后', options: [{name: 'newElement', type: 'HTMLElement|string', desc: '被添加的目标元素'}, {name: 'existElement', type: 'HTMLElement|string', desc: '基准元素'}], returns: [{type: 'HTMLElement', desc: '被添加的目标元素'}]}, 'baidu.dom.insertBefore': {name: 'insertBefore', type: 'HTMLElement', desc: '将目标元素添加到基准元素之前', options: [{name: 'newElement', type: 'HTMLElement|string', desc: '被添加的目标元素'}, {name: 'existElement', type: 'HTMLElement|string', desc: '基准元素'}], returns: [{type: 'HTMLElement', desc: '被添加的目标元素'}]}, 'baidu.dom.insertHTML': {name: 'insertHTML', type: 'HTMLElement', desc: '在目标元素的指定位置插入HTML代码', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'position', type: 'string', desc: '插入html的位置信息，取值为beforeBegin,afterBegin,beforeEnd,afterEnd'}, {name: 'html', type: 'string', desc: '要插入的html'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.intersect': {name: 'intersect', type: 'boolean', desc: '检查两个元素是否相交', options: [{name: 'element1', type: 'HTMLElement|string', desc: '要检查的元素或元素的id'}, {name: 'element2', type: 'HTMLElement|string', desc: '要检查的元素或元素的id'}], returns: [{type: 'boolean', desc: '两个元素是否相交的检查结果'}]}, 'baidu.dom.last': {name: 'last', type: 'HTMLElement|null', desc: '获取目标元素的最后一个元素节点', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'HTMLElement|null', desc: '目标元素的最后一个元素节点，查找不到时返回null'}]}, 'baidu.dom.next': {name: 'next', type: 'HTMLElement|null', desc: '获取目标元素的下一个兄弟元素节点', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'HTMLElement|null', desc: '目标元素的下一个兄弟元素节点，查找不到时返回null'}]}, 'baidu.dom.prev': {name: 'prev', type: 'HTMLElement|null', desc: '获取目标元素的上一个兄弟元素节点', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'HTMLElement|null', desc: '目标元素的上一个兄弟元素节点，查找不到时返回null'}]}, 'baidu.dom.q': {name: 'q', type: 'Array', desc: '通过className获取元素', options: [{name: 'className', type: 'string', desc: '元素的class，只能指定单一的class，如果为空字符串或者纯空白的字符串，返回空数组。'}, {name: 'element', type: 'string|HTMLElement', desc: '开始搜索的元素，默认是document。'}, {name: 'tagName', type: 'string', desc: '要获取元素的标签名，如果没有值或者值为空字符串或者纯空白的字符串，表示不限制标签名。'}], returns: [{type: 'Array', desc: '获取的元素集合，查找不到或className参数错误时返回空数组.'}]}, 'baidu.dom.query': {name: 'query', type: 'Array', desc: '提供css选择器功能   选择器支持所有的<a href=\"http://www.w3.org/TR/css3-selectors/\">css3选择器</a> ，核心实现采用sizzle。baidu.dom.query.matches 请参考<a href=\"http://wiki.github.com/jeresig/sizzle/\" target=\"_blank\">sizzle 文档</a>', options: [{name: 'selector', type: 'String', desc: '选择器定义'}, {name: 'context', type: 'HTMLElement | DOMDocument', desc: '查找的上下文'}, {name: 'results', type: 'Array', desc: '查找的结果会追加到这个数组中'}], returns: [{type: 'Array', desc: '包含所有筛选出的DOM元素的数组'}]}, 'baidu.dom.ready': {name: 'ready', desc: '使函数在页面dom节点加载完毕时调用', options: [{name: 'callback', type: 'Function', desc: '页面加载完毕时调用的函数.'}], methods: [{name: 'ready'}, {name: 'doScrollCheck'}, {name: 'bindReady'}]}, 'baidu.dom.remove': {name: 'remove', desc: '从DOM树上移除目标元素', options: [{name: 'element', type: 'HTMLElement|string', desc: '需要移除的元素或元素的id'}]}, 'baidu.dom.removeClass': {name: 'removeClass', type: 'HTMLElement', desc: '移除目标元素的className', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'className', type: 'string', desc: '要移除的className，允许同时移除多个class，中间使用空白符分隔'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.removeStyle': {name: 'removeStyle', type: 'HTMLElement', desc: '删除元素的某个样式', options: [{name: 'element', type: 'HTMLElement|String', desc: '需要删除样式的元素或者元素id'}, {name: 'styleName', type: 'string', desc: '需要删除的样式名字'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.resizable': {name: 'resizable', type: 'Object', desc: '绘制可以根据鼠标行为改变HTMLElement大小的resize handle', options: [{name: 'element', type: 'HTMLElement|string', desc: '需要改变大小的元素或者元素的id.'}, {name: 'options', type: 'Object', desc: 'resizable参数配置'}, {name: 'options.direction', type: 'Array', desc: '可以改变的方向[e,se,s,ws,w,wn,n,en]'}, {name: 'options.onresizestart', type: 'Function', desc: '开始改变大小时触发'}, {name: 'options.onresizeend', type: 'Function', desc: '大小改变结束时触发'}, {name: 'options.onresize', type: 'Function', desc: '大小改变后时触发'}, {name: 'options.maxWidth', type: 'Number|String', desc: '可改变的最大宽度'}, {name: 'options.maxHeight', type: 'Number|String', desc: '可改变的最大高度'}, {name: 'options.minWidth', type: 'Number|String', desc: '可改变的最小宽度'}, {name: 'options.minHeight', type: 'Number|String', desc: '可改变的最小高度'}, {name: 'options.classPrefix', type: 'String', desc: 'className 前缀'}, {name: 'options.directionHandlePosition', type: 'Object', desc: 'resizHandle的位置参数'}], methods: [{name: 'render', desc: '绘制resizable handle'}, {name: 'cancel', desc: 'cancel resizeHandle', returns: [{desc: 'void'}]}, {name: 'update', desc: 'update resizable', options: [{name: 'options', type: 'Object'}], returns: [{desc: 'null'}]}, {name: 'start', desc: 'resizeHandle相应mousedown事件的函数', options: [{name: 'e', type: 'Event'}], returns: [{desc: 'void'}]}], returns: [{type: 'Object', desc: '{cancel:Function} cancel函数'}]}, 'baidu.dom.setAttr': {name: 'setAttr', type: 'HTMLElement', desc: '设置目标元素的attribute值', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'key', type: 'string', desc: '要设置的attribute键名'}, {name: 'value', type: 'string', desc: '要设置的attribute值'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.setAttrs': {name: 'setAttrs', type: 'HTMLElement', desc: '批量设置目标元素的attribute值', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'attributes', type: 'Object', desc: '要设置的attribute集合'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.setBorderBoxHeight': {name: 'setBorderBoxHeight', type: 'HTMLElement', desc: '按照border-box模型设置元素的height值', options: [{name: 'element', type: 'HTMLElement|string', desc: 'DOM元素或元素的id'}, {name: 'height', type: 'number|string', desc: '要设置的height'}], returns: [{type: 'HTMLElement', desc: '设置好的元素'}]}, 'baidu.dom.setBorderBoxSize': {name: 'setBorderBoxSize', type: 'HTMLElement', desc: '按照border-box模型设置元素的height和width值。只支持元素的padding/border/height/width使用同一种计量单位的情况。<br/> 不支持：<br/> 1. 非数字值(medium)<br/> 2. em/px在不同的属性中混用', options: [{name: 'element', type: 'HTMLElement|string', desc: '元素或DOM元素的id'}, {name: 'size', type: 'object', desc: '包含height和width键名的对象'}], methods: [{name: 'getNumericalStyle', options: [{name: 'element'}, {name: 'name'}]}], returns: [{type: 'HTMLElement', desc: '设置好的元素'}]}, 'baidu.dom.setBorderBoxWidth': {name: 'setBorderBoxWidth', type: 'HTMLElement', desc: '按照border-box模型设置元素的width值', options: [{name: 'element', type: 'HTMLElement|string', desc: 'DOM元素或元素的id'}, {name: 'width', type: 'number|string', desc: '要设置的width'}], returns: [{type: 'HTMLElement', desc: '设置好的元素'}]}, 'baidu.dom.setPosition': {name: 'setPosition', type: 'HTMLElement', desc: '设置目标元素的top和left值到用户指定的位置', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'position', type: 'object', desc: '位置对象 {top: {number}, left : {number}}'}], returns: [{type: 'HTMLElement', desc: '进行设置的元素'}]}, 'baidu.dom.setStyle': {name: 'setStyle', type: 'HTMLElement', desc: '设置目标元素的style样式值', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'key', type: 'string', desc: '要设置的样式名'}, {name: 'value', type: 'string', desc: '要设置的样式值'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.setStyles': {name: 'setStyles', type: 'HTMLElement', desc: '批量设置目标元素的style样式值', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'styles', type: 'Object', desc: '要设置的样式集合'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.show': {name: 'show', type: 'HTMLElement', desc: '显示目标元素，即将目标元素的display属性还原成默认值。默认值可能在stylesheet中定义，或者是继承了浏览器的默认样式值', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.toggle': {name: 'toggle', type: 'HTMLElement', desc: '改变目标元素的显示/隐藏状态', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.dom.toggleClass': {name: 'toggleClass', desc: '添加或者删除一个节点中的指定class，如果已经有就删除，否则添加', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素的id'}, {name: 'className', type: 'String', desc: '指定的className。允许同时添加多个class，中间使用空白符分隔'}]}, 'baidu.element.each': {name: 'each', desc: '以每一个匹配的元素作为上下文执行传递进来的函数，方便用户自行遍历dom。', options: [{name: 'iterator', type: 'Function', desc: '遍历Dom时调用的方法'}]}, 'baidu.element.Element': {name: 'Element', type: 'ElementObj', desc: 'Element类，所有扩展到链条上的方法都会被放在这里面', options: [{name: 'node', type: 'DOMElement|NodeList', desc: '目标元素，可以是数组或者单个node节点'}], methods: [{name: 'each', options: [{name: 'iterator'}]}], returns: [{type: 'ElementObj', desc: '包装后的DOM对象'}]}, 'baidu.element.events': {name: 'events', type: 'baidu.element', desc: '方法提供了事件绑定的快捷方式，事件发生时会触发传递进来的函数。events代指事件方法的总和。', options: [{name: 'fn', type: 'Function', desc: '事件触发时要调用的方法'}], returns: [{type: 'baidu.element', desc: 'Element对象'}]}, 'baidu.element.extend': {name: 'extend', type: 'baidu.element.Element', desc: '为element对象扩展一个方法。', options: [{name: 'json', type: 'Object', desc: '要扩展的方法名以及方法'}], returns: [{type: 'baidu.element.Element', desc: 'Element对象'}]}, 'baidu.event.EventArg': {name: 'EventArg', desc: '事件对象构造器，屏蔽浏览器差异的事件类', options: [{name: 'event', type: 'Event', desc: '事件对象'}, {name: 'win', type: 'Window', desc: '窗口对象，默认为window'}], methods: [{name: 'preventDefault'}, {name: 'stopPropagation'}, {name: 'stop'}]}, 'baidu.event.fire': {name: 'fire', type: 'HTMLElement', desc: '触发已经注册的事件。注：在ie下不支持load和unload事件', options: [{name: 'element', type: 'HTMLElement|string|window', desc: '目标元素或目标元素id'}, {name: 'type', type: 'string', desc: '事件类型'}, {name: 'options', type: 'Object', desc: '触发的选项'}, {name: 'options.bubbles', type: 'Boolean', desc: '是否冒泡'}, {name: 'options.cancelable', type: 'Boolean', desc: '是否可以阻止事件的默认操作'}, {name: 'options.view', type: 'window|null', desc: '指定 Event 的 AbstractView'}, {name: 'options.detail', type: '1|Number', desc: '指定 Event 的鼠标单击量'}, {name: 'options.screenX', type: 'Number', desc: '指定 Event 的屏幕 x 坐标'}, {name: 'options.screenY', type: 'Number', desc: 'number 指定 Event 的屏幕 y 坐标'}, {name: 'options.clientX', type: 'Number', desc: '指定 Event 的客户端 x 坐标'}, {name: 'options.clientY', type: 'Number', desc: '指定 Event 的客户端 y 坐标'}, {name: 'options.ctrlKey', type: 'Boolean', desc: '指定是否在 Event 期间按下 ctrl 键'}, {name: 'options.altKey', type: 'Boolean', desc: '指定是否在 Event 期间按下 alt 键'}, {name: 'options.shiftKey', type: 'Boolean', desc: '指定是否在 Event 期间按下 shift 键'}, {name: 'options.metaKey', type: 'Boolean', desc: '指定是否在 Event 期间按下 meta 键'}, {name: 'options.button', type: 'Number', desc: '指定 Event 的鼠标按键'}, {name: 'options.keyCode', type: 'Number', desc: '指定 Event 的键盘按键'}, {name: 'options.charCode', type: 'Number', desc: '指定 Event 的字符编码'}, {name: 'options.relatedTarget', type: 'HTMLElement', desc: '指定 Event 的相关 EventTarget'}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.event.get': {name: 'get', type: 'EventArg', desc: '获取扩展的EventArg对象', options: [{name: 'event', type: 'Event', desc: '事件对象'}, {name: 'win', type: 'window', desc: '触发事件元素所在的window'}], returns: [{type: 'EventArg', desc: '扩展的事件对象'}]}, 'baidu.event.getKeyCode': {name: 'getKeyCode', type: 'number', desc: '获取键盘事件的键值', options: [{name: 'event', type: 'Event', desc: '事件对象'}], returns: [{type: 'number', desc: '键盘事件的键值'}]}, 'baidu.event.getPageX': {name: 'getPageX', type: 'number', desc: '获取鼠标事件的鼠标x坐标', options: [{name: 'event', type: 'Event', desc: '事件对象'}], returns: [{type: 'number', desc: '鼠标事件的鼠标x坐标'}]}, 'baidu.event.getPageY': {name: 'getPageY', type: 'number', desc: '获取鼠标事件的鼠标y坐标', options: [{name: 'event', type: 'Event', desc: '事件对象'}], returns: [{type: 'number', desc: '鼠标事件的鼠标y坐标'}]}, 'baidu.event.getTarget': {name: 'getTarget', type: 'HTMLElement', desc: '获取事件的触发元素', options: [{name: 'event', type: 'Event', desc: '事件对象'}], returns: [{type: 'HTMLElement', desc: '事件的触发元素'}]}, 'baidu.event.on': {name: 'on', type: 'HTMLElement|window', desc: '为目标元素添加事件监听器', options: [{name: 'element', type: 'HTMLElement|string|window', desc: '目标元素或目标元素id'}, {name: 'type', type: 'string', desc: '事件类型'}, {name: 'listener', type: 'Function', desc: '需要添加的监听器'}], methods: [{name: 'realListener', options: [{name: 'ev'}]}], returns: [{type: 'HTMLElement|window', desc: '目标元素'}]}, 'baidu.event.once': {name: 'once', type: 'HTMLElement', desc: '为目标元素添加一次事件绑定', options: [{name: 'element', type: 'HTMLElement|string', desc: '目标元素或目标元素id'}, {name: 'type', type: 'string', desc: '事件类型'}, {name: 'listener', type: 'Function', desc: '需要添加的监听器'}], methods: [{name: 'onceListener', options: [{name: 'event'}]}], returns: [{type: 'HTMLElement', desc: '目标元素'}]}, 'baidu.event.preventDefault': {name: 'preventDefault', desc: '阻止事件的默认行为', options: [{name: 'event', type: 'Event', desc: '事件对象'}]}, 'baidu.event.stop': {name: 'stop', desc: '停止事件', options: [{name: 'event', type: 'Event', desc: '事件对象'}]}, 'baidu.event.stopPropagation': {name: 'stopPropagation', desc: '阻止事件传播', options: [{name: 'event', type: 'Event', desc: '事件对象'}]}, 'baidu.event.un': {name: 'un', type: 'HTMLElement|window', desc: '为目标元素移除事件监听器', options: [{name: 'element', type: 'HTMLElement|string|window', desc: '目标元素或目标元素id'}, {name: 'type', type: 'string', desc: '事件类型'}, {name: 'listener', type: 'Function', desc: '需要移除的监听器'}], returns: [{type: 'HTMLElement|window', desc: '目标元素'}]}, 'baidu.flash.avatarMaker': {name: 'avatarMaker', desc: '创建flash based avatarMaker', options: [{name: 'createOptions', type: 'Object', desc: '创建flash时需要的参数，请参照baidu.swf.create文档'}, {name: 'createOptions.vars', type: 'Object', desc: '创建avatarMaker时所需要的参数'}, {name: 'createOptions.vars.locale', type: 'String', desc: '地区,现在支持vi、th、ar三种，分别是越南语、泰语和阿拉伯语，当使用阿拉伯语时，界面会变成rtl形式,默认为[zh-cn]'}, {name: 'createOptions.vars.bigFileName', type: 'String', desc: '80*80图片文件数据字段名，默认为\'bigFile\''}, {name: 'createOptions.vars.middleFileName', type: 'String', desc: '60*60图片文件数据字段名，默认为\'middleFile\''}, {name: 'createOptions.vars.smallFileName', type: 'String', desc: '60*60图片文件数据字段名，默认为’middleFile‘'}, {name: 'createOptions.vars.imageQuality', type: 'Number', desc: '图片的压缩质量0-100， 默认为 80'}, {name: 'createOptions.uploadURL', type: 'String', desc: '上传图片到的url地址'}, {name: 'createOptions.tipHandler', type: 'Function|String', desc: 'js提示函数，当flash发生异常，调用此函数显示出错信息。该函数接收一个String类型的参数，为需要显示的文字'}, {name: 'createOptions.uploadCallBack', type: 'Function|String', desc: '上传之后的回调函数'}]}, 'baidu.flash.fileUploader': {name: 'fileUploader', desc: '创建flash based fileUploader', options: [{name: 'createOptions', type: 'Object', desc: '创建flash时需要的参数，请参照baidu.swf.create文档'}, {name: 'width', type: 'String'}, {name: 'height', type: 'String'}, {name: 'selectiFile', type: 'Function|String'}, {name: 'exceedMaxSize', type: 'Function|String'}, {name: 'deleteFile', type: 'Function|String'}, {name: 'uploadStart', type: 'Function|String'}, {name: 'uploadComplete', type: 'Function|String'}, {name: 'uploadError', type: 'Function|String'}, {name: 'uploadProgress', type: 'Function|String'}]}, 'baidu.flash.imageUploader': {name: 'imageUploader', desc: '创建flash based imageUploader', options: [{name: 'createOptions', type: 'Object', desc: '创建flash时需要的参数，请参照baidu.swf.create文档'}, {name: 'createOptions.vars', type: 'Object', desc: '创建imageUploader时所需要的参数'}, {name: 'createOptions.vars.url', type: 'String', desc: '图片上传的url地址,默认值\'Upload.php\''}, {name: 'createOptions.vars.fileType', type: 'String', desc: '可上传的图片的类型字符串，默认值                 \'{\"description\":\"图片\", \"extension\":\"*.gif; *.jpeg; *.png; *.jpg; *.bmp\"}\''}, {name: 'createOptions.vars.maxNum', type: 'Number', desc: '允许上传的最大图片数量，默认值32'}, {name: 'createOptions.vars.maxSize', type: 'Number', desc: '允许上传的单张图片的最大体积,默认值3MB'}, {name: 'createOptions.vars.compressSize', type: 'Number', desc: '超过多少MB的图片需要压缩,默认值3MB'}, {name: 'createOptions.vars.compressLength', type: 'Number', desc: '允许上传的图片最大尺寸,默认值1200px'}, {name: 'createOptions.vars.uploadDataFieldName', type: 'String', desc: '上传的图片数据在POST请求中的key值,默认值\'uploadDataField\''}, {name: 'createOptions.vars.picDescFieldName', type: 'String', desc: '图片的描述信息在POST请求中的key值,默认值\'uploadDescField\''}, {name: 'createOptions.vars.ext', type: 'object', desc: '其他需要通过post上传的参数，默认值null'}, {name: 'createOptions.vars.supportGif', type: 'Number', desc: '是否支持动态gif图片,取值范围[0,1]，默认值为0'}]}, 'baidu.fn.abstractMethod': {name: 'abstractMethod', desc: '定义一个抽象方法'}, 'baidu.fn.bind': {name: 'bind', type: 'Function', desc: '为对象绑定方法和作用域', options: [{name: 'handler', type: 'Function|String', desc: '要绑定的函数，或者一个在作用域下可用的函数名'}, {name: 'obj', type: 'Object', desc: '执行运行时this，如果不传入则运行时this为函数本身'}, {name: 'args', type: 'args* 0..n', desc: '函数执行时附加到执行时函数前面的参数'}], returns: [{type: 'Function', desc: '封装后的函数'}]}, 'baidu.fn.blank': {name: 'blank', desc: '这是一个空函数，用于需要排除函数作用域链干扰的情况.'}, 'baidu.fn.methodize': {name: 'methodize', type: 'Function', desc: '将一个静态函数变换成一个对象的方法，使其的第一个参数为this，或this[attr]', options: [{name: 'func', type: 'Function', desc: '要方法化的函数'}, {name: 'attr', type: 'string', desc: '属性'}], returns: [{type: 'Function', desc: '已方法化的函数'}]}, 'baidu.fn.multize': {name: 'multize', type: 'Function', desc: '对函数进行集化，使其在第一个参数为array时，结果也返回一个数组', options: [{name: 'func', type: 'Function', desc: '需要包装的函数'}, {name: 'recursive', type: 'Boolean', desc: '是否递归包装（如果数组里面一项仍然是数组，递归），可选'}, {name: 'joinArray', type: 'Boolean', desc: '将操作的结果展平后返回（如果返回的结果是数组，则将多个数组合成一个），可选'}], methods: [{name: 'newFunc'}], returns: [{type: 'Function', desc: '已集化的函数'}]}, 'baidu.fn.wrapReturnValue': {name: 'wrapReturnValue', type: 'function', desc: '包装函数的返回值，使其在能按照index指定的方式返回。<br/>如果其值为-1，直接返回返回值。 <br/>如果其值为0，返回\"返回值\"的包装结果。<br/> 如果其值大于0，返回第i个位置的参数的包装结果（从1开始计数）', options: [{name: 'func', type: 'function', desc: '需要包装的函数'}, {name: 'wrapper', type: 'function', desc: '包装器'}, {name: '包装第几个参数', type: 'number'}], returns: [{type: 'function', desc: '包装后的函数'}]}, 'baidu.form.Validate': {name: 'Validate', desc: '表单验证组件', options: [{name: 'form', type: 'HTMLElement|String', desc: '一个表单对象的引用或是该id的字符串标识'}, {name: 'fieldRule', type: 'Object', desc: '对验证规则的配置，一个验证域需要的配置包括验证域名称，验证规则，提示信息(可选，需要Validator$message支持)，提示信息存放容器(可选，需要Validator$message支持)，验证触发事件(可选)，一个完整的配置大致如：fieldName: {rule: {required: {param: true, message: {success: \'success msg\', failure: \'failure msg\'}}, maxlength: {param: 50, message: \'failure msg\'}, email: true}, messageContainer: \'myMsgElement\', eventName: \'keyup,blur\'}'}, {name: 'options参数描述', type: 'Object'}, {name: 'options参数描述.validateEvent：描述全局的各个验证域的触发验证事件，如\'blur,click\'，默认是blur', type: 'String'}, {name: 'options参数描述.validateOnSubmit：描述是否当提交表单时做验证，默认是true.', type: 'Boolean'}, {name: 'options参数描述.onvalidatefield:', type: 'Function', desc: '验证单个验证域结束时的触发事件，function(event){}，event.field返回当次验证域的名称，event.resultList返回验证失败的项目数组(当验证成功时该数组长度为0)，各个项是json数据，格式如：{type: 类型, field: 被验证域名称}.'}, {name: 'options参数描述.onvalidate：验证全部验证域结束时的触发事件，function(event){}，event.resultList返回验证失败的项目数组(当验证成功时该数组长度为0)，各个项是json数据，格式如：{type:', type: 'Function', desc: '类型, field: 被验证域名称}.'}]}, 'baidu.form.ValidRule': {name: 'ValidRule', desc: '验证规则组件，提供各种基础验证，默认的验证方式有以下几种：required(必填)，remote(Ajax验证)，email(电子邮件验证)，number(数字验证)，maxlength(最大长度验证)，minlength(最小长度验证)，rangelength(长度范围验证)，equal(等于验证)，telephone(电话号码)', methods: [{name: 'match', desc: '用一个验证方法对一个已经存在的值进行验证，并将结果返回到回调中。说明：如果是一个remote验证，则是一个ajax验证，请让服务器返回true或是false来表示验证结果', options: [{name: 'name', type: 'String', desc: '验证方法的名称，如：required,email等'}, {name: 'val', type: 'String', desc: '需要被验证的字符串值，如果是remote该参数可以忽视'}, {name: 'callback', type: 'Function', desc: '验证结束的回调，第一参数为验证结果'}, {name: 'options', type: 'Object', desc: '表示验证需要的参数，如当验证类型是maxlength时，需要options是{param:10}'}]}, {name: 'addRule', desc: '增加一条验证规则', options: [{name: 'name', type: 'String', desc: '验证规则的名称'}, {name: 'handler', type: 'Function|RegExp', desc: '执行验证的函数或是正则表达式，如果是函数，需要返回一个boolean'}]}]}, 'baidu.fx.collapse': {name: 'collapse', desc: '从下向上收拢DOM元素的效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.orientation', type: 'String', desc: '动画收拢方向，取值：vertical（默认），horizontal'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//在onafterfinish与oncancel时默认调用'}]}, 'baidu.fx.create': {name: 'create', type: 'baidu.fx.Timeline', desc: '效果基类。', options: [{name: 'element', type: 'HTMLElement', desc: '添加效果的DOM元素'}, {name: 'options', type: 'JSON', desc: '时间线的配置参数对象'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}, {name: 'fxName', type: 'String', desc: '效果名（可选）'}], returns: [{type: 'baidu.fx.Timeline', desc: '时间线类的一个实例'}]}, 'baidu.fx.current': {name: 'current', type: 'Array', desc: '获取DOM元素正在运行的效果实例列表', options: [{name: 'element', type: 'string|HTMLElement', desc: '被查询的DOM元素或元素id'}], returns: [{type: 'Array', desc: '效果对象'}]}, 'baidu.fx.expand': {name: 'expand', desc: '自上而下展开DOM元素的效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.orientation', type: 'String', desc: '动画展开方向，取值：vertical（默认），horizontal'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.fadeIn': {name: 'fadeIn', desc: '渐现渐变效果。注意，如果元素的visibility属性如果为hidden，效果将表现不出来。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.fadeOut': {name: 'fadeOut', desc: '渐隐渐变效果，效果执行结束后会将元素完全隐藏起来。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.getTransition': {name: 'getTransition', type: 'function', desc: '获取线型函数', options: [{name: 'name', type: 'String', desc: 'transition的名称'}], returns: [{type: 'function', desc: '线型函数'}]}, 'baidu.fx.highlight': {name: 'highlight', desc: '这个方法改变DOM元素的背景色，实现高亮的效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.beginColor', type: 'String', desc: '渐变开始时的背景色，如果设置了背景色则以设置的颜色为默认开始颜色，否则默认为\'#FFFF00\''}, {name: 'options.endColor', type: 'String', desc: '渐变结束时的背景色，如果设置了背景色则以设置的颜色为默认结束颜色，否则默认为\'#FFFFFF\''}, {name: 'options.finalColor', type: 'String', desc: '渐变结束时的背景色，如果设置了背景色则以设置的颜色为结束时背景色，否则默认为endColor值'}, {name: 'options.textColor', type: 'String', desc: '渐变结束时的背景色，如果设置了背景色则以设置的颜色为结束时文本的颜色，否则默认为原文本色值'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.mask': {name: 'mask', desc: '面具遮罩效果。注意：只适用于绝对定位的DOM元素.', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.startOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标。取值包括像素(含px字符)，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '0,//效果起始值。介于0到1之间的一个数字，默认为0。'}, {name: 'options.to', type: 'Number', desc: '1,//效果结束值。介于0到1之间的一个数字，默认为1。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.move': {name: 'move', desc: '移动元素，将参数元素移动到指定位置。注意：对static定位的DOM元素无效。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.x', type: 'Number', desc: '0,//横坐标移动的偏移量，默认值为0px。'}, {name: 'options.y', type: 'Number', desc: '0,//纵坐标移动的偏移量，默认值为0px。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.moveBy': {name: 'moveBy', desc: '移动渐变效果。这个效果会使目标元素移动指定的距离。注意: 对static定位的DOM元素无效。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'distance', type: 'Array|Object', desc: '偏移距离。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向；单位：px，默认值为：0。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.restore', type: 'Function', desc: 'restore方法,在onafterfinish与oncancel时默认调用'}, {name: 'options.restoreAfterFinish', type: 'Boolean', desc: '默认为true，在onafterfinish与oncancel事件中调用restore方法。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.moveTo': {name: 'moveTo', desc: '移动渐变效果，该效果使元素移动到指定的位置。注意：对static定位的DOM元素无效。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'point', type: 'Array|Object', desc: '目标点坐标。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向；单位：px，默认值：元素本来的坐标。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.opacity': {name: 'opacity', desc: '控制元素的透明度 渐变', options: [{name: 'element', type: 'String|Object', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.from', type: 'Number', desc: '0,//效果起始值。介于0到1之间的一个数字，默认为0。'}, {name: 'options.to', type: 'Number', desc: '1,//效果结束值。介于0到1之间的一个数字，默认为1。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.puff': {name: 'puff', desc: '将DOM元素放大，关逐渐透明消失。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '800,//效果持续时间，默认值为800ms。'}, {name: 'options.to', type: 'Number', desc: '1.8,//放大倍数，默认1.8。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.pulsate': {name: 'pulsate', desc: '心跳闪现效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'loop', type: 'Number', desc: '心跳次数，小于0则为永远跳动，默认为0次。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.remove': {name: 'remove', desc: '删除元素的时候使用fadeOut效果', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.scale': {name: 'scale', desc: '将元素放大或缩小的效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.transformOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标，取值包括像素(含px字符，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '效果起始值，介于0到1之间的一个数字。'}, {name: 'options.to', type: 'Number', desc: '效果结束值，介于0到1之间的一个数字。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.fade', type: 'Boolean', desc: 'true，//渐变，默认为true'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.scrollBy': {name: 'scrollBy', desc: '按指定量移动滚动条。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'distance', type: 'Array|JSON', desc: '移动的距离 [,] | {x,y}，支持数组与JSON格式'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.scrollTo': {name: 'scrollTo', desc: '滚动条滚动到指定位置。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'point', type: 'Array|JSON', desc: '移动的距离 [,] | {x,y}，支持数组与JSON格式'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.shake': {name: 'shake', desc: '颤动的效果。说明：在效果执行过程中会修改DOM元素的position属性，可能会对包含的DOM元素带来影响', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'offset', type: 'Array|Object', desc: '震动范围。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向；单位：px，默认值：元素本来的坐标。'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}], methods: [{name: 'tt'}]}, 'baidu.fx.Timeline': {name: 'Timeline', desc: '提供一个按时间进程的时间线类本类提供两个方法： cancel()    取消操作 end()       直接结束使用本类时需要实现五个接口： initialize()            用于类初始化时的操作 transition(percent)    重新计算时间线进度曲线 finish()                用于类结束时时的操作 render(schedule)        每个脉冲在DOM上的效果展现 restore()               效果被取消时作的恢复操作', options: [{name: 'arguments.interval', type: 'Number', desc: '脉冲间隔时间（毫秒）'}, {name: 'arguments.duration', type: 'Number', desc: '时间线总时长（毫秒）'}, {name: 'arguments.percent', type: 'Number', desc: '时间线进度的百分比'}]}, 'baidu.fx.zoomIn': {name: 'zoomIn', desc: '将元素放大的展现效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.transformOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标，取值包括像素(含px字符)，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '0.1,//效果默认起始值'}, {name: 'options.to', type: 'Number', desc: '1,//效果结束默认值，输入的数值越大，图片显示的越大。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.fx.zoomOut': {name: 'zoomOut', desc: '将元素缩小的消失效果。', options: [{name: 'element', type: 'string|HTMLElement', desc: '元素或者元素的ID'}, {name: 'options', type: 'Object', desc: '选项。参数的详细说明如下表所示'}, {name: 'options.transformOrigin', type: 'String', desc: '\"0px 0px\",//起始坐标描述。\"x y\"：x方向和y方向坐标，取值包括像素(含px字符)，百分比，top、left、center、bottom、right，默认\"0px 0px\"。'}, {name: 'options.from', type: 'Number', desc: '1,//效果起始值。介于0到1之间的一个数字，默认为1。'}, {name: 'options.to', type: 'Number', desc: '0.1,//效果结束值。介于0到1之间的一个数字，默认为0.1。'}, {name: 'options.duration', type: 'Number', desc: '500,//效果持续时间，默认值为500ms。'}, {name: 'options.interval', type: 'Number', desc: '16, //动画帧间隔时间，默认值为16ms。'}, {name: 'options.transition', type: 'Function', desc: 'function(schedule){return schedule;},时间线函数'}, {name: 'options.onbeforestart', type: 'Function', desc: 'function(){},//效果开始前执行的回调函数'}, {name: 'options.onbeforeupdate', type: 'Function', desc: 'function(){},//每次刷新画面之前会调用的回调函数'}, {name: 'options.onafterupdate', type: 'Function', desc: 'function(){},//每次刷新画面之后会调用的回调函数'}, {name: 'options.onafterfinish', type: 'Function', desc: 'function(){},//效果结束后会执行的回调函数'}, {name: 'options.oncancel', type: 'Function', desc: 'function(){},//效果被撤销时的回调函数'}]}, 'baidu.json.decode': {name: 'decode', type: 'JSON', desc: '将字符串解析成json对象，为过时接口，今后会被baidu.json.parse代替', options: [{name: 'source', type: 'string', desc: '需要解析的字符串'}], returns: [{type: 'JSON', desc: '解析结果json对象'}]}, 'baidu.json.encode': {name: 'encode', type: 'string', desc: '将json对象序列化，为过时接口，今后会被baidu.json.stringify代替', options: [{name: 'value', type: 'JSON', desc: '需要序列化的json对象'}], returns: [{type: 'string', desc: '序列化后的字符串'}]}, 'baidu.json.parse': {name: 'parse', type: 'JSON', desc: '将字符串解析成json对象。注：不会自动祛除空格', options: [{name: 'source', type: 'string', desc: '需要解析的字符串'}], returns: [{type: 'JSON', desc: '解析结果json对象'}]}, 'baidu.json.stringify': {name: 'stringify', type: 'string', desc: '将json对象序列化', options: [{name: 'value', type: 'JSON', desc: '需要序列化的json对象'}], returns: [{type: 'string', desc: '序列化后的字符串'}]}, 'baidu.lang.createClass': {name: 'createClass', type: 'Object', desc: '创建一个类，包括创造类的构造器、继承基类Class', options: [{name: 'constructor', type: 'Function', desc: '类的构造器函数'}, {name: 'options', type: 'Object'}, {name: 'options.className', type: 'string', desc: '类名'}, {name: 'options.superClass', type: 'Function', desc: '父类，默认为baidu.lang.Class'}], methods: [{name: 'fn'}, {name: 'C'}], returns: [{type: 'Object', desc: '一个类对象'}]}, 'baidu.lang.createSingle': {name: 'createSingle', type: 'Object', desc: '创建一个baidu.lang.Class的单例实例', options: [{name: 'json', type: 'Object', desc: '直接挂载到这个单例里的预定属性/方法'}], returns: [{type: 'Object', desc: '一个实例'}]}, 'baidu.lang.decontrol': {name: 'decontrol', desc: '解除instance中对指定类实例的引用关系。', options: [{name: 'guid', type: 'string', desc: '类的唯一标识'}]}, 'baidu.lang.eventCenter': {name: 'eventCenter', desc: '事件中心', methods: [{name: 'addEventListener', desc: '注册全局事件监听器。', options: [{name: 'type', type: 'string', desc: '自定义事件的名称'}, {name: 'handler', type: 'Function', desc: '自定义事件被触发时应该调用的回调函数'}, {name: 'key', type: 'string', desc: '为事件监听函数指定的名称，可在移除时使用。如果不提供，方法会默认为它生成一个全局唯一的key。'}]}]}, 'baidu.lang.eventCenter.addEventListener': {name: 'addEventListener', desc: '注册全局事件监听器。', options: [{name: 'type', type: 'string', desc: '自定义事件的名称'}, {name: 'handler', type: 'Function', desc: '自定义事件被触发时应该调用的回调函数'}, {name: 'key', type: 'string', desc: '为事件监听函数指定的名称，可在移除时使用。如果不提供，方法会默认为它生成一个全局唯一的key。'}]}, 'baidu.lang.getModule': {name: 'getModule', type: '?Object', desc: '根据变量名或者命名空间来查找对象', options: [{name: 'name', type: 'string', desc: '变量或者命名空间的名字.'}, {name: 'opt_obj', type: 'Object=', desc: '从这个对象开始查找，默认是window;'}], returns: [{type: '?Object', desc: '返回找到的对象，如果没有找到返回null.'}]}, 'baidu.lang.guid': {name: 'guid', type: 'String', desc: '返回一个当前页面的唯一标识字符串。', returns: [{type: 'String', desc: '当前页面的唯一标识字符串'}]}, 'baidu.lang.inherits': {name: 'inherits', desc: '为类型构造器建立继承关系', options: [{name: 'subClass', type: 'Function', desc: '子类构造器'}, {name: 'superClass', type: 'Function', desc: '父类构造器'}, {name: 'className', type: 'string', desc: '类名标识'}]}, 'baidu.lang.instance': {name: 'instance', type: 'Object|null', desc: '根据参数(guid)的指定，返回对应的实例对象引用', options: [{name: 'guid', type: 'string', desc: '需要获取实例的guid'}], returns: [{type: 'Object|null', desc: '如果存在的话，返回;否则返回null。'}]}, 'baidu.lang.isArray': {name: 'isArray', type: 'boolean', desc: '判断目标参数是否Array对象', options: [{name: 'source', type: 'Any', desc: '目标参数'}], returns: [{type: 'boolean', desc: '类型判断结果'}]}, 'baidu.lang.isBoolean': {name: 'isBoolean', type: 'boolean', desc: '判断目标参数是否Boolean对象', options: [{name: 'source', type: 'Any', desc: '目标参数'}], returns: [{type: 'boolean', desc: '类型判断结果'}]}, 'baidu.lang.isDate': {name: 'isDate', type: 'boolean', desc: '判断目标参数是否为Date对象', options: [{name: 'source', type: 'Any', desc: '目标参数'}], returns: [{type: 'boolean', desc: '类型判断结果'}]}, 'baidu.lang.isElement': {name: 'isElement', type: 'boolean', desc: '判断目标参数是否为Element对象', options: [{name: 'source', type: 'Any', desc: '目标参数'}], returns: [{type: 'boolean', desc: '类型判断结果'}]}, 'baidu.lang.isFunction': {name: 'isFunction', type: 'boolean', desc: '判断目标参数是否为function或Function实例', options: [{name: 'source', type: 'Any', desc: '目标参数'}], returns: [{type: 'boolean', desc: '类型判断结果'}]}, 'baidu.lang.isNumber': {name: 'isNumber', type: 'boolean', desc: '判断目标参数是否number类型或Number对象', options: [{name: 'source', type: 'Any', desc: '目标参数'}], returns: [{type: 'boolean', desc: '类型判断结果'}]}, 'baidu.lang.isObject': {name: 'isObject', type: 'boolean', desc: '判断目标参数是否为Object对象', options: [{name: 'source', type: 'Any', desc: '目标参数'}], returns: [{type: 'boolean', desc: '类型判断结果'}]}, 'baidu.lang.isString': {name: 'isString', type: 'boolean', desc: '判断目标参数是否string类型或String对象', options: [{name: 'source', type: 'Any', desc: '目标参数'}], returns: [{type: 'boolean', desc: '类型判断结果'}]}, 'baidu.lang.module': {name: 'module', desc: '增加自定义模块扩展,默认创建在当前作用域', options: [{name: 'name', type: 'string', desc: '需要创建的模块名.'}, {name: 'module', type: 'Any', desc: '需要创建的模块对象.'}, {name: 'owner', type: 'Object', desc: '模块创建的目标环境，默认为window.'}]}, 'baidu.lang.toArray': {name: 'toArray', type: 'array', desc: '将一个变量转换成array', options: [{name: 'source', type: 'mix', desc: '需要转换成array的变量'}], returns: [{type: 'array', desc: '转换后的array'}]}, 'baidu.number.comma': {name: 'comma', type: 'string', desc: '为目标数字添加逗号分隔', options: [{name: 'source', type: 'number', desc: '需要处理的数字'}, {name: 'length', type: 'number', desc: '两次逗号之间的数字位数，默认为3位'}], returns: [{type: 'string', desc: '添加逗号分隔后的字符串'}]}, 'baidu.number.pad': {name: 'pad', type: 'string', desc: '对目标数字进行0补齐处理', options: [{name: 'source', type: 'number', desc: '需要处理的数字'}, {name: 'length', type: 'number', desc: '需要输出的长度'}], returns: [{type: 'string', desc: '对目标数字进行0补齐处理后的结果'}]}, 'baidu.number.randomInt': {name: 'randomInt', type: 'number', desc: '生成随机整数，范围是[min, max]', options: [{name: 'min', type: 'number', desc: '随机整数的最小值'}, {name: 'max', type: 'number', desc: '随机整数的最大值'}], returns: [{type: 'number', desc: '生成的随机整数'}]}, 'baidu.object.clone': {name: 'clone', type: 'Object', desc: '对一个object进行深度拷贝', options: [{name: 'source', type: 'Object', desc: '需要进行拷贝的对象'}], returns: [{type: 'Object', desc: '拷贝后的新对象'}]}, 'baidu.object.each': {name: 'each', type: 'Object', desc: '遍历Object中所有元素，1.1.1增加', options: [{name: 'source', type: 'Object', desc: '需要遍历的Object'}, {name: 'iterator', type: 'Function', desc: '对每个Object元素进行调用的函数，function (item, key)'}], returns: [{type: 'Object', desc: '遍历的Object'}]}, 'baidu.object.extend': {name: 'extend', type: 'Object', desc: '将源对象的所有属性拷贝到目标对象中', options: [{name: 'target', type: 'Object', desc: '目标对象'}, {name: 'source', type: 'Object', desc: '源对象'}], returns: [{type: 'Object', desc: '目标对象'}]}, 'baidu.object.isEmpty': {name: 'isEmpty', type: 'boolean', desc: '检测一个对象是否是空的.需要注意的是：如果污染了Object.prototype或者Array.prototype，那么baidu.object.isEmpty({})或者baidu.object.isEmpty([])可能返回的就是false.', options: [{name: 'obj', type: 'Object', desc: '需要检测的对象.'}], returns: [{type: 'boolean', desc: '如果是空的对象就返回true.'}]}, 'baidu.object.isPlain': {name: 'isPlain', type: 'Boolean', desc: '判断一个对象是不是字面量对象，即判断这个对象是不是由{}或者new Object类似方式创建', options: [{name: 'source', type: 'Object', desc: '需要检查的对象'}], returns: [{type: 'Boolean', desc: '检查结果'}]}, 'baidu.object.keys': {name: 'keys', type: 'Array', desc: '获取目标对象的键名列表', options: [{name: 'source', type: 'Object', desc: '目标对象'}], returns: [{type: 'Array', desc: '键名列表'}]}, 'baidu.object.map': {name: 'map', type: 'Array', desc: '遍历object中所有元素，将每一个元素应用方法进行转换，返回转换后的新object。', options: [{name: 'source', type: 'Array', desc: '需要遍历的object'}, {name: 'iterator', type: 'Function', desc: '对每个object元素进行处理的函数'}], returns: [{type: 'Array', desc: 'map后的object'}]}, 'baidu.object.merge': {name: 'merge', type: 'object', desc: '合并源对象的属性到目标对象。', options: [{name: 'target', type: 'Function', desc: '目标对象.'}, {name: 'source', type: 'Function', desc: '源对象.'}, {name: 'opt_options', type: 'Object', desc: 'optional merge选项.'}, {name: 'opt_options.overwrite', type: 'boolean', desc: 'optional 如果为真，源对象属性会覆盖掉目标对象上的已有属性，默认为假.'}, {name: 'opt_options.whiteList', type: 'string[]', desc: 'optional 白名单，默认为空，如果存在，只有在这里的属性才会被处理.'}, {name: 'opt_options.recursive', type: 'boolean', desc: 'optional 是否递归合并对象里面的object，默认为否.'}], returns: [{type: 'object', desc: 'merge后的object.'}]}, 'baidu.object.values': {name: 'values', type: 'Array', desc: '获取目标对象的值列表', options: [{name: 'source', type: 'Object', desc: '目标对象'}], returns: [{type: 'Array', desc: '值列表'}]}, 'baidu.page.createStyleSheet': {name: 'createStyleSheet', type: 'baidu.page.createStyleSheet.StyleSheet', desc: '在页面中创建样式表对象', options: [{name: 'options', type: 'Object', desc: '配置信息'}, {name: 'options.document', type: 'Document', desc: '指定在哪个document下创建，默认是当前文档'}, {name: 'options.url', type: 'String', desc: 'css文件的URL'}, {name: 'options.index', type: 'Number', desc: '在文档里的排序索引（注意，仅IE下有效）'}], returns: [{type: 'baidu.page.createStyleSheet.StyleSheet', desc: 'styleSheet对象(注意: 仅IE下,其他浏览器均返回null)'}]}, 'baidu.page.getHeight': {name: 'getHeight', type: 'number', desc: '获取页面高度', returns: [{type: 'number', desc: '页面高度'}]}, 'baidu.page.getMousePosition': {name: 'getMousePosition', type: 'object', desc: '获得页面里的目前鼠标所在的坐标', returns: [{type: 'object', desc: '鼠标坐标值{x:[Number], y:[Number]}'}]}, 'baidu.page.getScrollLeft': {name: 'getScrollLeft', type: 'number', desc: '获取横向滚动量', returns: [{type: 'number', desc: '横向滚动量'}]}, 'baidu.page.getScrollTop': {name: 'getScrollTop', type: 'number', desc: '获取纵向滚动量', returns: [{type: 'number', desc: '纵向滚动量'}]}, 'baidu.page.getViewHeight': {name: 'getViewHeight', type: 'number', desc: '获取页面视觉区域高度', returns: [{type: 'number', desc: '页面视觉区域高度'}]}, 'baidu.page.getViewWidth': {name: 'getViewWidth', type: 'number', desc: '获取页面视觉区域宽度', returns: [{type: 'number', desc: '页面视觉区域宽度'}]}, 'baidu.page.getWidth': {name: 'getWidth', type: 'number', desc: '获取页面宽度', returns: [{type: 'number', desc: '页面宽度'}]}, 'baidu.page.lazyLoadImage': {name: 'lazyLoadImage', desc: '延迟加载图片. 默认只加载可见高度以上的图片, 随着窗口滚动加载剩余图片.注意: 仅支持垂直方向.', options: [{name: 'options', type: 'Object'}, {name: 'options.className', type: 'String', desc: '延迟加载的IMG的className,如果不传入该值将延迟加载所有IMG.'}, {name: 'options.preloadHeight', type: 'Number', desc: '预加载的高度, 可见窗口下该高度内的图片将被加载.'}, {name: 'options.placeHolder', type: 'String', desc: '占位图url.'}, {name: 'options.onlazyload', type: 'Function', desc: '延迟加载回调函数,在实际加载时触发.'}]}, 'baidu.page.load': {name: 'load', desc: '加载一组资源，支持多种格式资源的串/并行加载，支持每个文件有单独回调函数。', options: [{name: 'resources', type: 'Array', desc: '资源描述数组，单个resource含如下属性.'}, {name: 'resources.url', type: 'String', desc: '链接地址.'}, {name: 'resources.type', type: 'String', desc: '取值[\"css\",\"js\",\"html\"]，默认参考文件后缀.'}, {name: 'resources.requestType', type: 'String', desc: '取值[\"dom\",\"ajax\"]，默认js和css用dom标签，html用ajax.'}, {name: 'resources.onload', type: 'Function', desc: '当前resource加载完成的回调函数，若requestType为ajax，参数为xhr(可能失效)，responseText；若requestType为dom，无参数，执行时this为相应dom标签。.'}, {name: 'options', type: 'Object', desc: '可选参数.'}, {name: 'options.onload', type: 'Function', desc: '资源全部加载完成的回调函数，无参数。.'}, {name: 'options.parallel', type: 'Boolean', desc: '是否并行加载，默认为false，串行。.'}, {name: 'ignoreAllLoaded', type: 'Boolean', desc: '全部加载之后不触发回调事件.主要用于内部实现.'}], methods: [{name: 'allLoadedChecker'}, {name: 'loadByDom', options: [{name: 'res'}, {name: 'callback'}]}, {name: 'loadResources', options: [{name: 'res'}]}]}, 'baidu.page.loadCssFile': {name: 'loadCssFile', desc: '动态在页面上加载一个外部css文件', options: [{name: 'path', type: 'string', desc: 'css文件路径'}]}, 'baidu.page.loadJsFile': {name: 'loadJsFile', desc: '动态在页面上加载一个外部js文件', options: [{name: 'path', type: 'string', desc: 'js文件路径'}]}, 'baidu.platform.isAndroid': {name: 'isAndroid', desc: '判断是否为android平台'}, 'baidu.platform.isIpad': {name: 'isIpad', desc: '判断是否为ipad平台'}, 'baidu.platform.isIphone': {name: 'isIphone', desc: '判断是否为iphone平台'}, 'baidu.platform.isMacintosh': {name: 'isMacintosh', desc: '判断是否为macintosh平台'}, 'baidu.platform.isWindows': {name: 'isWindows', desc: '判断是否为windows平台'}, 'baidu.platform.isX11': {name: 'isX11', desc: '判断是否为x11平台'}, 'baidu.sio.callByBrowser': {name: 'callByBrowser', desc: '通过script标签加载数据，加载完成由浏览器端触发回调', options: [{name: 'url', type: 'string', desc: '加载数据的url'}, {name: 'opt_callback', type: 'Function|string', desc: '数据加载结束时调用的函数或函数名'}, {name: 'opt_options', type: 'Object', desc: '其他可选项'}, {name: 'opt_options.charset', type: 'String', desc: 'script的字符集'}, {name: 'opt_options.timeOut', type: 'Integer', desc: '超时时间，超过这个时间将不再响应本请求，并触发onfailure函数'}, {name: 'opt_options.onfailure', type: 'Function', desc: 'timeOut设定后才生效，到达超时时间时触发本函数'}]}, 'baidu.sio.callByServer': {name: 'callByServer', desc: '通过script标签加载数据，加载完成由服务器端触发回调', options: [{name: 'url', type: 'string', desc: '加载数据的url.'}, {name: 'callback', type: 'Function|string', desc: '服务器端调用的函数或函数名。如果没有指定本参数，将在URL中寻找options[\'queryField\']做为callback的方法名.'}, {name: 'opt_options', type: 'Object', desc: '加载数据时的选项.'}, {name: 'opt_options.charset', type: 'string', desc: 'script的字符集'}, {name: 'opt_options.queryField', type: 'string', desc: '服务器端callback请求字段名，默认为callback'}, {name: 'opt_options.timeOut', type: 'Integer', desc: '超时时间(单位：ms)，超过这个时间将不再响应本请求，并触发onfailure函数'}, {name: 'opt_options.onfailure', type: 'Function', desc: 'timeOut设定后才生效，到达超时时间时触发本函数'}], methods: [{name: 'getCallBack', options: [{name: 'onTimeOut'}]}]}, 'baidu.sio.log': {name: 'log', desc: '通过请求一个图片的方式令服务器存储一条日志author: int08h,leeight', options: [{name: 'url', type: 'string', desc: '要发送的地址.'}]}, 'baidu.string.decodeHTML': {name: 'decodeHTML', type: 'string', desc: '对目标字符串进行html解码', options: [{name: 'source', type: 'string', desc: '目标字符串'}], returns: [{type: 'string', desc: 'html解码后的字符串'}]}, 'baidu.string.encodeHTML': {name: 'encodeHTML', type: 'string', desc: '对目标字符串进行html编码', options: [{name: 'source', type: 'string', desc: '目标字符串'}], returns: [{type: 'string', desc: 'html编码后的字符串'}]}, 'baidu.string.escapeReg': {name: 'escapeReg', type: 'string', desc: '将目标字符串中可能会影响正则表达式构造的字符串进行转义。', options: [{name: 'source', type: 'string', desc: '目标字符串'}], returns: [{type: 'string', desc: '转义后的字符串'}]}, 'baidu.string.filterFormat': {name: 'filterFormat', type: 'string', desc: '对目标字符串进行格式化,支持过滤', options: [{name: 'source', type: 'string', desc: '目标字符串'}, {name: 'opts', type: 'Object|string...', desc: '提供相应数据的对象'}], methods: [{name: 'escapeJs', type: 'String', desc: '对js片段的字符做安全转义,编码低于255的都将转换成\x加16进制数', options: [{name: 'source', type: 'String', desc: '待转义字符串'}], returns: [{type: 'String', desc: '转义之后的字符串'}]}, {name: 'escapeString', type: 'String', desc: '对字符串做安全转义,转义字符包括: 单引号,双引号,左右小括号,斜杠,反斜杠,上引号.', options: [{name: 'source', type: 'String', desc: '待转义字符串'}], returns: [{type: 'String', desc: '转义之后的字符串'}]}, {name: 'toInt', type: 'Number', desc: '对数字做安全转义,确保是十进制数字;否则返回0.', options: [{name: 'source', type: 'String', desc: '待转义字符串'}], returns: [{type: 'Number', desc: '转义之后的数字'}]}], returns: [{type: 'string', desc: '格式化后的字符串'}]}, 'baidu.string.filterFormat.escapeJs': {name: 'escapeJs', type: 'String', desc: '对js片段的字符做安全转义,编码低于255的都将转换成\x加16进制数', options: [{name: 'source', type: 'String', desc: '待转义字符串'}], returns: [{type: 'String', desc: '转义之后的字符串'}]}, 'baidu.string.filterFormat.escapeString': {name: 'escapeString', type: 'String', desc: '对字符串做安全转义,转义字符包括: 单引号,双引号,左右小括号,斜杠,反斜杠,上引号.', options: [{name: 'source', type: 'String', desc: '待转义字符串'}], returns: [{type: 'String', desc: '转义之后的字符串'}]}, 'baidu.string.filterFormat.toInt': {name: 'toInt', type: 'Number', desc: '对数字做安全转义,确保是十进制数字;否则返回0.', options: [{name: 'source', type: 'String', desc: '待转义字符串'}], returns: [{type: 'Number', desc: '转义之后的数字'}]}, 'baidu.string.format': {name: 'format', type: 'string', desc: '对目标字符串进行格式化', options: [{name: 'source', type: 'string', desc: '目标字符串'}, {name: 'opts', type: 'Object|string...', desc: '提供相应数据的对象或多个字符串'}], returns: [{type: 'string', desc: '格式化后的字符串'}]}, 'baidu.string.formatColor': {name: 'formatColor', type: 'string', desc: '将各种浏览器里的颜色值转换成 #RRGGBB 的格式', options: [{name: 'color', type: 'string', desc: '颜色值字符串'}], returns: [{type: 'string', desc: '#RRGGBB格式的字符串或空'}]}, 'baidu.string.getByteLength': {name: 'getByteLength', type: 'number', desc: '获取目标字符串在gbk编码下的字节长度', options: [{name: 'source', type: 'string', desc: '目标字符串'}], returns: [{type: 'number', desc: '字节长度'}]}, 'baidu.string.stripTags': {name: 'stripTags', type: 'string', desc: '去掉字符串中的html标签', options: [{name: 'source', type: 'string', desc: '要处理的字符串.'}], returns: [{type: 'string'}]}, 'baidu.string.subByte': {name: 'subByte', type: 'string', desc: '对目标字符串按gbk编码截取字节长度', options: [{name: 'source', type: 'string', desc: '目标字符串'}, {name: 'length', type: 'number', desc: '需要截取的字节长度'}, {name: 'tail', type: 'string', desc: '追加字符串,可选.'}], returns: [{type: 'string', desc: '字符串截取结果'}]}, 'baidu.string.toCamelCase': {name: 'toCamelCase', type: 'string', desc: '将目标字符串进行驼峰化处理', options: [{name: 'source', type: 'string', desc: '目标字符串'}], returns: [{type: 'string', desc: '驼峰化处理后的字符串'}]}, 'baidu.string.toHalfWidth': {name: 'toHalfWidth', type: 'string', desc: '将目标字符串中常见全角字符转换成半角字符', options: [{name: 'source', type: 'string', desc: '目标字符串'}], returns: [{type: 'string', desc: '转换后的字符串'}]}, 'baidu.string.trim': {name: 'trim', type: 'string', desc: '删除目标字符串两端的空白字符', options: [{name: 'source', type: 'string', desc: '目标字符串'}], returns: [{type: 'string', desc: '删除两端空白字符后的字符串'}]}, 'baidu.string.wbr': {name: 'wbr', type: 'string', desc: '为目标字符串添加wbr软换行', options: [{name: 'source', type: 'string', desc: '目标字符串'}], returns: [{type: 'string', desc: '添加软换行后的字符串'}]}, 'baidu.swf.create': {name: 'create', desc: '在页面中创建一个flash对象', options: [{name: 'options', type: 'Object', desc: '创建flash的选项参数'}, {name: 'options.id', type: 'string', desc: '要创建的flash的标识'}, {name: 'options.url', type: 'string', desc: 'flash文件的url'}, {name: 'options.errorMessage', type: 'String', desc: '未安装flash player或flash player版本号过低时的提示'}, {name: 'options.ver', type: 'string', desc: '最低需要的flash player版本号'}, {name: 'options.width', type: 'string', desc: 'flash的宽度'}, {name: 'options.height', type: 'string', desc: 'flash的高度'}, {name: 'options.align', type: 'string', desc: 'flash的对齐方式，允许值：middle/left/right/top/bottom'}, {name: 'options.base', type: 'string', desc: '设置用于解析swf文件中的所有相对路径语句的基本目录或URL'}, {name: 'options.bgcolor', type: 'string', desc: 'swf文件的背景色'}, {name: 'options.salign', type: 'string', desc: '设置缩放的swf文件在由width和height设置定义的区域内的位置。允许值：l/r/t/b/tl/tr/bl/br'}, {name: 'options.menu', type: 'boolean', desc: '是否显示右键菜单，允许值：true/false'}, {name: 'options.loop', type: 'boolean', desc: '播放到最后一帧时是否重新播放，允许值： true/false'}, {name: 'options.play', type: 'boolean', desc: 'flash是否在浏览器加载时就开始播放。允许值：true/false'}, {name: 'options.quality', type: 'string', desc: '设置flash播放的画质，允许值：low/medium/high/autolow/autohigh/best'}, {name: 'options.scale', type: 'string', desc: '设置flash内容如何缩放来适应设置的宽高。允许值：showall/noborder/exactfit'}, {name: 'options.wmode', type: 'string', desc: '设置flash的显示模式。允许值：window/opaque/transparent'}, {name: 'options.allowscriptaccess', type: 'string', desc: '设置flash与页面的通信权限。允许值：always/never/sameDomain'}, {name: 'options.allownetworking', type: 'string', desc: '设置swf文件中允许使用的网络API。允许值：all/internal/none'}, {name: 'options.allowfullscreen', type: 'boolean', desc: '是否允许flash全屏。允许值：true/false'}, {name: 'options.seamlesstabbing', type: 'boolean', desc: '允许设置执行无缝跳格，从而使用户能跳出flash应用程序。该参数只能在安装Flash7及更高版本的Windows中使用。允许值：true/false'}, {name: 'options.devicefont', type: 'boolean', desc: '设置静态文本对象是否以设备字体呈现。允许值：true/false'}, {name: 'options.swliveconnect', type: 'boolean', desc: '第一次加载flash时浏览器是否应启动Java。允许值：true/false'}, {name: 'options.vars', type: 'Object', desc: '要传递给flash的参数，支持JSON或string类型。'}, {name: 'container', type: 'HTMLElement|string', desc: 'flash对象的父容器元素，不传递该参数时在当前代码位置创建flash对象。'}]}, 'baidu.swf.createHTML': {name: 'createHTML', type: 'string', desc: '创建flash对象的html字符串', options: [{name: 'options', type: 'Object', desc: '创建flash的选项参数'}, {name: 'options.id', type: 'string', desc: '要创建的flash的标识'}, {name: 'options.url', type: 'string', desc: 'flash文件的url'}, {name: 'options.errorMessage', type: 'String', desc: '未安装flash player或flash player版本号过低时的提示'}, {name: 'options.ver', type: 'string', desc: '最低需要的flash player版本号'}, {name: 'options.width', type: 'string', desc: 'flash的宽度'}, {name: 'options.height', type: 'string', desc: 'flash的高度'}, {name: 'options.align', type: 'string', desc: 'flash的对齐方式，允许值：middle/left/right/top/bottom'}, {name: 'options.base', type: 'string', desc: '设置用于解析swf文件中的所有相对路径语句的基本目录或URL'}, {name: 'options.bgcolor', type: 'string', desc: 'swf文件的背景色'}, {name: 'options.salign', type: 'string', desc: '设置缩放的swf文件在由width和height设置定义的区域内的位置。允许值：l/r/t/b/tl/tr/bl/br'}, {name: 'options.menu', type: 'boolean', desc: '是否显示右键菜单，允许值：true/false'}, {name: 'options.loop', type: 'boolean', desc: '播放到最后一帧时是否重新播放，允许值： true/false'}, {name: 'options.play', type: 'boolean', desc: 'flash是否在浏览器加载时就开始播放。允许值：true/false'}, {name: 'options.quality', type: 'string', desc: '设置flash播放的画质，允许值：low/medium/high/autolow/autohigh/best'}, {name: 'options.scale', type: 'string', desc: '设置flash内容如何缩放来适应设置的宽高。允许值：showall/noborder/exactfit'}, {name: 'options.wmode', type: 'string', desc: '设置flash的显示模式。允许值：window/opaque/transparent'}, {name: 'options.allowscriptaccess', type: 'string', desc: '设置flash与页面的通信权限。允许值：always/never/sameDomain'}, {name: 'options.allownetworking', type: 'string', desc: '设置swf文件中允许使用的网络API。允许值：all/internal/none'}, {name: 'options.allowfullscreen', type: 'boolean', desc: '是否允许flash全屏。允许值：true/false'}, {name: 'options.seamlesstabbing', type: 'boolean', desc: '允许设置执行无缝跳格，从而使用户能跳出flash应用程序。该参数只能在安装Flash7及更高版本的Windows中使用。允许值：true/false'}, {name: 'options.devicefont', type: 'boolean', desc: '设置静态文本对象是否以设备字体呈现。允许值：true/false'}, {name: 'options.swliveconnect', type: 'boolean', desc: '第一次加载flash时浏览器是否应启动Java。允许值：true/false'}, {name: 'options.vars', type: 'Object', desc: '要传递给flash的参数，支持JSON或string类型。'}], returns: [{type: 'string', desc: 'flash对象的html字符串'}]}, 'baidu.swf.getMovie': {name: 'getMovie', type: 'HTMLElement', desc: '获得flash对象的实例', options: [{name: 'name', type: 'string', desc: 'flash对象的名称'}], returns: [{type: 'HTMLElement', desc: 'flash对象的实例'}]}, 'baidu.swf.Proxy': {name: 'Proxy', desc: 'Js 调用 Flash方法的代理类.', options: [{name: 'id', type: 'string', desc: 'Flash的元素id.object标签id, embed标签name.'}, {name: 'property', type: 'string', desc: 'Flash的方法或者属性名称，用来检测Flash是否初始化好了.'}, {name: 'loadedHandler', type: 'Function', desc: '初始化之后的回调函数.'}], methods: [{name: 'getFlash', type: 'HTMLElement', desc: '获取flash对象.', returns: [{type: 'HTMLElement', desc: 'Flash对象.'}]}, {name: 'isReady', desc: '判断Flash是否初始化完成,可以与js进行交互.'}, {name: 'call', desc: '调用Flash中的某个方法', options: [{name: 'methodName', type: 'string', desc: '方法名.'}, {name: 'var_args', type: '...*', desc: '方法的参数.'}]}]}, 'baidu.swf.version': {name: 'version', desc: '浏览器支持的flash插件版本'}, 'baidu.ui.Base': {name: 'Base', desc: 'UI基类，所有的UI都应该从这个类中派生出去', methods: [{name: 'getId', type: 'string', desc: '获得当前控件的id', options: [{name: 'optional', type: 'string', desc: 'key'}], returns: [{type: 'string', desc: 'id'}]}, {name: 'getClass', type: 'string', desc: '获得class，支持skin', options: [{name: 'optional', type: 'string', desc: 'key'}], returns: [{type: 'string', desc: 'className'}]}, {name: 'getMain'}, {name: 'getBody'}, {name: 'getCallRef', desc: '获取调用的字符串的引用前缀'}, {name: 'getCallString', desc: '获取调用的字符串', options: [{name: 'fn'}]}, {name: 'on', desc: '添加事件. 避免析构中漏掉注销事件.', options: [{name: 'element', type: 'HTMLElement|string|window', desc: '目标元素或目标元素id'}, {name: 'type', type: 'string', desc: '事件类型'}, {name: 'listener', type: 'Function', desc: '需要添加的监听器'}]}, {name: 'renderMain', type: 'HTMLElement', desc: '渲染控件到指定的元素', options: [{name: 'main', type: 'HTMLElement', desc: 'optional   要渲染到的元素，可选。                                     如果不传此参数，则会在body下创建一个绝对定位的div做为main'}], returns: [{type: 'HTMLElement', desc: 'main 渲染到的元素'}]}, {name: 'dispose', desc: '销毁当前实例'}, {name: 'setParent', desc: '设置UI控件的父控件', options: [{name: '父控件', type: 'UI'}]}, {name: 'getParent', type: 'UI', desc: '获取UI控件的父控件', returns: [{type: 'UI', desc: '父控件'}]}]}, 'baidu.ui.Base.dispose': {name: 'dispose', desc: '销毁当前实例'}, 'baidu.ui.Base.getCallRef': {name: 'getCallRef', desc: '获取调用的字符串的引用前缀'}, 'baidu.ui.Base.getCallString': {name: 'getCallString', desc: '获取调用的字符串', options: [{name: 'fn'}]}, 'baidu.ui.Base.getClass': {name: 'getClass', type: 'string', desc: '获得class，支持skin', options: [{name: 'optional', type: 'string', desc: 'key'}], returns: [{type: 'string', desc: 'className'}]}, 'baidu.ui.Base.getId': {name: 'getId', type: 'string', desc: '获得当前控件的id', options: [{name: 'optional', type: 'string', desc: 'key'}], returns: [{type: 'string', desc: 'id'}]}, 'baidu.ui.Base.getParent': {name: 'getParent', type: 'UI', desc: '获取UI控件的父控件', returns: [{type: 'UI', desc: '父控件'}]}, 'baidu.ui.Base.on': {name: 'on', desc: '添加事件. 避免析构中漏掉注销事件.', options: [{name: 'element', type: 'HTMLElement|string|window', desc: '目标元素或目标元素id'}, {name: 'type', type: 'string', desc: '事件类型'}, {name: 'listener', type: 'Function', desc: '需要添加的监听器'}]}, 'baidu.ui.Base.renderMain': {name: 'renderMain', type: 'HTMLElement', desc: '渲染控件到指定的元素', options: [{name: 'main', type: 'HTMLElement', desc: 'optional   要渲染到的元素，可选。                                     如果不传此参数，则会在body下创建一个绝对定位的div做为main'}], returns: [{type: 'HTMLElement', desc: 'main 渲染到的元素'}]}, 'baidu.ui.Base.setParent': {name: 'setParent', desc: '设置UI控件的父控件', options: [{name: '父控件', type: 'UI'}]}, 'baidu.ui.Base.uiType': {name: 'uiType', desc: '控件类型：如dialog'}, 'baidu.ui.behavior': {name: 'behavior', desc: '为各个控件增加装饰器。', methods: [{name: 'statable'}, {name: 'posable', methods: [{name: 'setPositionByElement', desc: '将控件或者指定元素与指定的元素对齐', options: [{name: 'target', type: 'HTMLElement|string', desc: '要对齐到的元素.'}, {name: 'element', type: 'HTMLElement|string', desc: 'optional 要对齐的元素或元素id，如果不指定，默认为当前控件的主元素.'}, {name: 'options', type: 'Object', desc: 'optional 选项，同setPosition方法.'}]}, {name: 'setPositionByMouse', desc: '将控件或者指定元素放置到当前鼠标位置', options: [{name: 'element', type: 'HTMLElement|string', desc: 'optional 要对齐的元素或元素id，如果不指定，默认为当前控件的主元素.'}, {name: 'options', type: 'Object', desc: 'optional 选项，同setPosition方法.'}]}]}, {name: 'coverable'}, {name: 'draggable'}, {name: 'resizable'}, {name: 'droppable'}, {name: 'decorator'}, {name: 'sortable'}]}, 'baidu.ui.behavior.posable.setPositionByElement': {name: 'setPositionByElement', desc: '将控件或者指定元素与指定的元素对齐', options: [{name: 'target', type: 'HTMLElement|string', desc: '要对齐到的元素.'}, {name: 'element', type: 'HTMLElement|string', desc: 'optional 要对齐的元素或元素id，如果不指定，默认为当前控件的主元素.'}, {name: 'options', type: 'Object', desc: 'optional 选项，同setPosition方法.'}]}, 'baidu.ui.behavior.posable.setPositionByMouse': {name: 'setPositionByMouse', desc: '将控件或者指定元素放置到当前鼠标位置', options: [{name: 'element', type: 'HTMLElement|string', desc: 'optional 要对齐的元素或元素id，如果不指定，默认为当前控件的主元素.'}, {name: 'options', type: 'Object', desc: 'optional 选项，同setPosition方法.'}]}, 'baidu.ui.Button': {name: 'Button', type: 'Button', desc: 'button基类，创建一个button实例', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.content', type: 'String', desc: '按钮文本信息'}, {name: 'options.disabled', type: 'Boolean', desc: '按钮是否有效，默认为false（有效）。'}, {name: 'options.onmouseover', type: 'Function', desc: '鼠标悬停在按钮上时触发'}, {name: 'options.onmousedown', type: 'Function', desc: '鼠标按下按钮时触发'}, {name: 'options.onmouseup', type: 'Function', desc: '按钮弹起时触发'}, {name: 'options.onmouseout', type: 'Function', desc: '鼠标移出按钮时触发'}, {name: 'options.onclick', type: 'Function', desc: '鼠标点击按钮时触发'}, {name: 'options.onupdate', type: 'Function', desc: '更新按钮时触发'}, {name: 'options.onload', type: 'Function', desc: '页面加载时触发'}, {name: 'options.ondisable', type: 'Function', desc: '当调用button的实例方法disable，使得按钮失效时触发。'}, {name: 'options.onenable', type: 'Function', desc: '当调用button的实例方法enable，使得按钮有效时触发。'}], methods: [{name: 'render', desc: '将button绘制到DOM树中。', options: [{name: 'target', type: 'HTMLElement|String', desc: '需要渲染到的元素'}]}, {name: 'isDisabled', type: 'Boolean', desc: '判断按钮是否处于失效状态。', returns: [{type: 'Boolean', desc: '是否失效的状态'}]}, {name: 'dispose', desc: '销毁实例。'}, {name: 'disable', desc: '设置disabled属性'}, {name: 'enable', desc: '删除disabled属性'}, {name: 'fire', desc: '触发button事件', options: [{name: 'eventName', type: 'String', desc: '要触发的事件名称'}, {name: 'e', type: 'Object', desc: '事件event'}]}, {name: 'update', desc: '更新button的属性', options: [{name: 'options', type: 'Object', desc: '更新button的属性'}, {name: 'options.content', type: 'String', desc: '按钮文本信息'}, {name: 'options.disabled', type: 'Boolean', desc: '按钮是否有效，默认为false（有效）。'}, {name: 'options.onmouseover', type: 'Function', desc: '鼠标悬停在按钮上时触发'}, {name: 'options.onmousedown', type: 'Function', desc: '鼠标按下按钮时触发'}, {name: 'options.onmouseup', type: 'Function', desc: '按钮弹起时触发'}, {name: 'options.onmouseout', type: 'Function', desc: '鼠标移出按钮时触发'}, {name: 'options.onclick', type: 'Function', desc: '鼠标点击按钮时触发'}, {name: 'options.onupdate', type: 'Function', desc: '更新按钮时触发'}, {name: 'options.onload', type: 'Function', desc: '页面加载时触发'}, {name: 'options.ondisable', type: 'Function', desc: '当调用button的实例方法disable，使得按钮失效时触发。'}, {name: 'options.onenable', type: 'Function', desc: '当调用button的实例方法enable，使得按钮有效时触发。'}]}], returns: [{type: 'Button', desc: 'Button类'}]}, 'baidu.ui.button.Button$capture': {name: 'Button$capture', desc: '使按钮支持capture，实现在按钮上点击并保持鼠标按着状态拖离鼠标，请在构造函数的options中定义capture参数为true来激活该状态', options: [{name: 'options', type: 'Object', desc: '创建scrollBar的自定义参数.'}, {name: 'options.capture', type: 'Boolean', desc: '当为true时表示需要使按钮是一个capture的按钮.'}]}, 'baidu.ui.Calendar': {name: 'Calendar', desc: '创建一个简单的日历对象', options: [{name: 'options', type: 'Object', desc: 'config参数'}, {name: 'options.weekStart', type: 'String', desc: '定义周的第一天，取值:\'Mon\'|\'Tue\'|\'Web\'|\'Thu\'|\'Fri\'|\'Sat\'|\'Sun\'，默认值\'Sun\''}, {name: 'options.initDate', type: 'Date', desc: '以某个本地日期打开日历，默认值是当前日期'}, {name: 'options.highlightDates', type: 'Array', desc: '设定需要高亮显示的某几个日期或日期区间，格式:[date, {start:date, end:date}, date, date...]'}, {name: 'options.disableDates', type: 'Array', desc: '设定不可使用的某几个日期或日期区间，格式:[date, {start:date, end:date}, date, date...]'}, {name: 'options.flipContent', type: 'Object', desc: '设置翻转月份按钮的内容，格式{prev: \'\', next: \'\'}'}, {name: 'options.language', type: 'string', desc: '日历显示的语言，默认为中文'}, {name: 'options.onclickdate', type: 'function', desc: '当点击某个日期的某天时触发该事件'}], methods: [{name: 'renderTitle', desc: '渲染日历表的标题说明，如果对标题说明有特列要求，可以覆盖方法来实现', methods: [{name: 'getOptions', options: [{name: 'pos'}]}]}, {name: 'render', desc: '渲染日期组件到参数指定的容器中', options: [{name: 'target', type: 'HTMLElement', desc: '一个用来存放组件的容器对象'}]}, {name: 'update', desc: '更新日期的参数', options: [{name: 'options', type: 'Object', desc: '参数，具体请参照构造中的options'}]}, {name: 'gotoDate', desc: '跳转到某一天', options: [{name: 'date', type: 'Date', desc: '一个非本地化的日期对象'}]}, {name: 'gotoYear', desc: '跳转到某一年', options: [{name: 'year', type: 'Number', desc: '年份'}]}, {name: 'gotoMonth', desc: '跳转到当前年份的某个月份', options: [{name: 'month', type: 'Number', desc: '月份，取值(0, 11)'}]}, {name: 'getToday', type: 'Date', desc: '取得一个本地化的当天的日期', returns: [{type: 'Date', desc: '返回一个本地当天的时间'}]}, {name: 'getDate', type: 'Date', desc: '返回一个当前选中的当地日期对象', returns: [{type: 'Date', desc: '返回一个本地日期对象'}]}, {name: 'setDate', desc: '用一个本地化的日期设置当前的显示日期', options: [{name: 'date', type: 'Date', desc: '一个当地的日期对象'}]}, {name: 'prevMonth', desc: '翻页到上一个月份，当在年初时会翻到上一年的最后一个月份'}, {name: 'nextMonth', desc: '翻页到下一个月份，当在年末时会翻到下一年的第一个月份'}, {name: 'dispose', desc: '析构函数'}]}, 'baidu.ui.Carousel': {name: 'Carousel', desc: '创建一个简单的滚动组件', options: [{name: 'options', type: 'Object', desc: 'config参数.'}, {name: 'options.orientation', type: 'String', desc: '描述该组件是创建一个横向滚动组件或是竖向滚动组件，取值：horizontal:横向, vertical:竖向'}, {name: 'options.contentText', type: 'Object', desc: '定义carousel组件每一项的字符数据，格式：[{content: \'text-0\'}, {content: \'text-1\'}, {content: \'text-2\'}...]'}, {name: 'options.flip', type: 'String', desc: '定义组件的翻页方式，取值：item:一次滚动一个项, page:一次滚动一页'}, {name: 'options.pageSize', type: 'Number', desc: '描述一页显示多少个滚动项，默认值是3'}, {name: 'options.onload', type: 'function', desc: '当渲染完组件时触发该事件'}, {name: 'options.onbeforescroll', type: 'function', desc: '当开始滚动时触发该事件，该事件的event参数中可以得到四个属性：index:当前需要滚动的索引, scrollOffset:滚动到可视区域的位置, direction:滚动方向, scrollUnit:需要滚动过多少个项'}, {name: 'options.onafterscroll', type: 'function', desc: '当结束一次滚动时触发该事件，该事件的event参数中可以得到四个属性：index:当前需要滚动的索引, scrollOffset:滚动到可视区域的位置, direction:滚动方向, scrollUnit:需要滚动过多少个项'}, {name: 'options.onprev', type: 'function', desc: '当翻到前一项或前一页时触发该事件'}, {name: 'options.onnext', type: 'function', desc: '当翻到下一项或下一页时触发该事件'}, {name: 'options.onitemclick', type: 'function', desc: '当点击某个项时触发该事件'}], methods: [{name: 'render', desc: '渲染滚动组件到参数指定的容器中', options: [{name: 'target', type: 'HTMLElement', desc: '一个用来存放组件的容器对象.'}]}, {name: 'getCurrentIndex', type: 'Number', desc: '取得当前得到焦点项在所有数据项中的索引值', returns: [{type: 'Number', desc: '索引值.'}]}, {name: 'getTotalCount', type: 'Number', desc: '取得数据项的总数目', returns: [{type: 'Number', desc: '总数.'}]}, {name: 'getItem', type: 'HTMLElement', desc: '根据数据的索引值取得对应在页面的DOM节点，当节点不存时返回null', options: [{name: 'index', type: 'Number', desc: '在数据中的索引值.'}], returns: [{type: 'HTMLElement', desc: '返回一个DOM节点.'}]}, {name: 'scrollTo', desc: '从当前项滚动到index指定的项，并将该项放在scrollOffset的位置', options: [{name: 'index', type: 'Number', desc: '在滚动数据中的索引.'}, {name: 'scrollOffset', type: 'Number', desc: '在页面的显示位置，该参数如果不填默认值取0.'}, {name: 'direction', type: 'String', desc: '滚动方向，取值: prev:强制滚动到上一步, next:强制滚动到下一步，当不给出该值时，会自动运算一个方向来滚动.'}]}, {name: 'prev', desc: '翻到上一项或是翻到上一页'}, {name: 'next', desc: '翻到下一项或是翻到下一页'}, {name: 'isFirst', type: 'Boolean', desc: '是否已经处在第一项或第一页', returns: [{type: 'Boolean', desc: 'true:当前已是到第一项或第一页.'}]}, {name: 'isLast', type: 'Boolean', desc: '是否已经处在末项或是末页', returns: [{type: 'Boolean', desc: 'true:当前已是到末项或末页.'}]}, {name: 'focus', desc: '使某一项得到焦点', options: [{name: 'index', type: 'Number', desc: '需要得到焦点项的索引.'}]}, {name: 'getScrollContainer', type: 'HTMLElement', desc: '取得存放所有项的上层容器', returns: [{type: 'HTMLElement', desc: '一个HTML元素.'}]}, {name: 'dispose', desc: '析构函数'}, {name: 'startAutoScroll', desc: '从停止状态开始自动滚动'}, {name: 'stopAutoScroll', desc: '停止当前自动滚动状态'}, {name: 'addText', desc: '将一个字符串的内容插入到索引指定的位置', options: [{name: 'content', type: 'String', desc: '需要插入项的字符内容'}, {name: 'index', type: 'Number', desc: '插入位置'}]}, {name: 'addItem', options: [{name: 'element', type: 'HTMLElement', desc: '将一个element项的内容插入到索引指定的位置'}, {name: 'index', type: 'Number', desc: '插入位置'}]}, {name: 'removeItem', type: 'HTMLElement', desc: '移除索引指定的某一项', options: [{name: 'index', type: 'Number', desc: '要移除项的索引'}], returns: [{type: 'HTMLElement', desc: '当移除项存在于页面时返回该节点'}]}, {name: 'addTableItem', desc: '在指定索引处插入一个新的多行多列表格', options: [{name: 'data', type: 'Object', desc: '需要插入的数据（一维数组），格式：[{content: \'col-0\'}, {content: \'col-1\'}, {content: \'col-2\'}....]'}, {name: 'index', type: 'Number', desc: '在指定的索引处插入，默认在末端插入'}]}, {name: 'removeTableItem', type: 'HTMLElement', desc: '移除由索引指定的项', options: [{name: 'index', type: 'Number', desc: '需要移除的索引项'}], returns: [{type: 'HTMLElement', desc: '被移除的表格对象，不存在该对象或不存在于当前页面的返回null'}]}, {name: 'getTable', type: 'baidu.ui.Table', desc: '根据索引取得表格', options: [{name: 'index', type: 'Number', desc: '索引'}], returns: [{type: 'baidu.ui.Table', desc: '该索引对应的表格对象，不存在该表格对象的返回null'}]}, {name: 'getString', type: 'string', desc: '获得控件字符串', returns: [{type: 'string', desc: 'HTML string.'}]}, {name: 'update', desc: '更新progressBar状态', options: [{name: 'options', type: 'object', desc: '参数.'}]}, {name: 'getValue', type: 'number', desc: '获得当前的value', returns: [{type: 'number', desc: 'value.'}]}, {name: 'disable', desc: '禁用进度条'}, {name: 'enable', desc: '启用进度条'}, {name: 'getTarget', type: 'HTMLElement', desc: '获取target元素', returns: [{type: 'HTMLElement', desc: 'target.'}]}, {name: 'getBar', type: 'HTMLElement', desc: '获取进度条元素', returns: [{type: 'HTMLElement', desc: 'bar.'}]}, {name: 'getProgressBarString', desc: '根据tplProgressbar生成一个容器用来存入progressBar组件'}, {name: 'addCheckbox', desc: '添加单个checkbox到行中', options: [{name: 'rowId', type: 'String', desc: '该行的id'}, {name: 'index'}]}, {name: 'removeCheckbox', desc: '移除一个checkbox', options: [{name: 'rowId', type: 'Object', desc: '该行的id'}]}, {name: 'getTitleCheckbox', type: 'html-element', desc: '取得表格标题的全选checkbox', returns: [{type: 'html-element'}]}, {name: 'setTitleCheckbox', desc: '设置一个自定义的全选checkbox', options: [{name: 'checkboxId', type: 'String', desc: '该checkbox的id'}]}, {name: 'select', desc: '根据给定的数组索引选中checkbox', options: [{name: 'indexArr', type: 'Object', desc: '格式：[1, 3, 8]'}]}, {name: 'unselect', desc: '根据给定的数组索引反选checkbox', options: [{name: 'indexArr', type: 'Object'}]}, {name: 'toggle', desc: '单项的切换选中或反选', options: [{name: 'rsid', type: 'Object'}]}, {name: 'selectAll', desc: '全部选中checkbox'}, {name: 'unselectAll', desc: '全部反选checkbox'}, {name: 'toggleAll', desc: '当全选的checkbox存在时才可以切换全选和全反选'}, {name: 'getSelected', type: 'TypeName', desc: '取得已经选中的数据，如果该行的row.data中设置id则返回所选中的id数组，否则返回该row的data', returns: [{type: 'TypeName'}]}, {name: 'gotoPage', desc: '直接翻到索引指定的页数', options: [{name: 'index', type: 'Object'}]}, {name: 'prevPage', desc: '翻到上一页'}, {name: 'nextPage', desc: '翻到下一页'}, {name: 'getTotalPage', type: 'number', desc: '取得总页数', returns: [{type: 'number'}]}, {name: 'getCurrentPage', type: 'number', desc: '取得当前页数', returns: [{type: 'number'}]}, {name: 'addRow', desc: '新增一个行，', options: [{name: 'options', type: 'Object', desc: '格式同table的addRow'}, {name: 'index', type: 'Number', desc: '在索引的行之前插入，可选项，默认值是在最后插入'}]}, {name: 'removeRow', desc: '移除一个行', options: [{name: 'index', type: 'Object', desc: '需要移除的行的索引'}]}, {name: 'attachEdit', desc: '绑定一行中的某列拥有双击事件', options: [{name: 'row', type: 'baidu.ui.table.Row', desc: '行对象'}]}, {name: 'getPagerContainer', type: 'html-element', desc: '取得存放pager的容器', returns: [{type: 'html-element'}]}, {name: 'resize', desc: '重设pager容器的大小'}, {name: 'getTitleBody', type: 'html-element', desc: '取得表格的table对象', returns: [{type: 'html-element'}]}, {name: 'getDaysInMonth', type: 'Number', desc: '获取某年某个月的天数', options: [{name: 'year', type: 'Number', desc: '年份.'}, {name: 'month', type: 'Number', desc: '月份.'}], returns: [{type: 'Number'}]}, {name: 'isLeapYear', type: 'Boolean', desc: '判断传入年份是否时润年', options: [{name: 'year', type: 'Number', desc: '年份.'}], returns: [{type: 'Boolean'}]}, {name: 'toLocaleDate', type: 'Date', desc: '将传入的date对象转换成指定地区的date对象', options: [{name: 'dateObject', type: 'Date'}, {name: 'sLocale', type: 'String', desc: 'dateObject 的地区标识，可选参数，传则以dateObject中获取的为准'}, {name: 'tLocale', type: 'String', desc: '地区名称简写字符.'}], returns: [{type: 'Date'}]}, {name: 'onRegisterSuccess', options: [{name: 'obj'}, {name: 'json'}]}, {name: 'onRegisterFailure', options: [{name: 'obj'}, {name: 'json'}]}, {name: 'open'}, {name: 'changeTab', options: [{name: 'type'}]}, {name: 'renderReg'}, {name: 'setData', options: [{name: 'word'}, {name: 'data'}, {name: 'noShow'}]}, {name: 'beforedeactivateHandler'}, {name: 'getTargetKeydownHandler', methods: [{name: 'keyUpDown', options: [{name: 'up'}]}]}, {name: 'getWindowResizeHandler'}, {name: 'adjustPosition', options: [{name: 'onlyAdjustShown'}]}, {name: 'bodyClick', desc: 'body点击事件，点击body关闭菜单', options: [{name: 'e', type: 'Object', desc: '事件.'}]}, {name: 'trim', type: 'String', desc: '按照某种语言的格式去掉字符串两边的空白字符', options: [{name: 'source', type: 'String', desc: '需要格式化的语言'}, {name: 'locale', type: 'String', desc: '目标语言'}], returns: [{type: 'String'}]}, {name: 'translation', type: 'String', desc: '将传入的字符串翻译成目标语言', options: [{name: 'source', type: 'String', desc: '需要进行翻译的字符串'}, {name: 'locale', type: 'String', desc: '目标语言'}], returns: [{type: 'String'}]}, {name: 'createButton', desc: '创建底部按钮', options: [{name: 'option', type: 'Object', desc: '创建按钮的options'}, {name: 'name', type: 'String', desc: '按钮的唯一标识符'}], returns: [{desc: 'void'}]}, {name: 'removeButton', desc: '删除底部按钮', options: [{name: 'name', type: 'String', desc: '按钮的唯一标识符'}], returns: [{desc: 'void'}]}, {name: 'hideModal'}, {name: 'format', type: 'String', desc: '将传入的数字或者文字某种语言的格式进行格式化', options: [{name: 'number', type: 'String|Number', desc: '需要进行格式化的数字或者文字'}, {name: 'sLocale', type: 'String', desc: '可选参数，若传入的number格式为字符串，则该参数必须传入'}, {name: 'tLocale', type: 'String', desc: '目标语言'}], returns: [{type: 'String'}]}]}, 'baidu.ui.ColorPalette': {name: 'ColorPalette', desc: '复杂颜色拾取器', options: [{name: 'options', type: 'Object', desc: '配置.'}, {name: 'options.sliderLength', type: 'Number', desc: '滑动条长度.'}, {name: 'options.coverImgSrc', type: 'String', desc: '调色板渐变背景图片地址.'}, {name: 'options.sliderImgSrc', type: 'String', desc: '滑动条背景图片地址.'}]}, 'baidu.ui.ColorPicker': {name: 'ColorPicker', desc: '颜色拾取器', options: [{name: 'options', type: 'Object', desc: '配置.'}, {name: 'options.gridSize', type: 'Number', desc: '一行显示的颜色块个数.'}, {name: 'options.onchosen', type: 'Function', desc: '颜色选择事件.'}]}, 'baidu.ui.ColorPicker.ColorPicker$click': {name: 'ColorPicker$click', desc: '创建一个鼠标点击触发的colorPicker'}, 'baidu.ui.ColorPicker.ColorPicker$more': {name: 'ColorPicker$more', desc: 'ColorPalette 插件', options: [{name: 'options.sliderLength', type: 'Number', desc: '滑动条长度.'}, {name: 'options.coverImgSrc', type: 'String', desc: '调色板背景渐变图片路径.'}, {name: 'options.sliderImgSrc', type: 'String', desc: '滑动条背景图片路径.'}, {name: 'options.titleText', type: 'String', desc: '标题文字.'}, {name: 'options.dilogOption', type: 'Object', desc: '填出对话框配置.'}, {name: 'options.more', type: 'Object', desc: '是否开启插件功能.'}]}, 'baidu.ui.Combox': {name: 'Combox', desc: 'combox类', options: [{name: 'options', type: 'Object', desc: '选项，用于创建combox。'}, {name: 'options.target', type: 'Element', desc: 'combox的触发元素'}, {name: 'options.width', type: 'Number|String', desc: '宽度值。当指定element时，默认为element宽度；否则不设置（可以通过css指定）。'}, {name: 'options.height', type: 'Number|String', desc: '高度值。当指定element时，默认为element宽度；否则不设置（可以通过css指定）。'}, {name: 'options.skin', type: 'String', desc: '自定义样式前缀'}, {name: 'options.editable', type: 'Boolean', desc: '是否可以输入'}, {name: 'options.data', type: 'Array', desc: '储存combox每个条目的数据。每个条目数据格式: { content: \'some html string\', value : \'\'}。'}, {name: 'options.offset', type: 'Array|Object', desc: '偏移量，若为数组，索引0为x方向，索引1为y方向; 若为Object，键x为x方向，键y为y方向。单位：px，默认值：[0,0]。'}, {name: 'options.zIndex', type: 'Number', desc: '浮起combox层的z-index值，默认为1200。'}, {name: 'options.onitemclick', type: 'Function', desc: 'combox中单个条目鼠标点击的回调函数，参数:{data : {value: Item对应的数据, index : Item索引值}}'}, {name: 'options.onitemclick', type: 'Function', desc: 'combox中单个条目鼠标点击的回调函数，function(evt){}，evt.index返回item的索引，evt.value返回一个json，{content: \'\', value: \'\'}'}, {name: 'options.onbeforeclose', type: 'Function', desc: '关闭之前触发'}, {name: 'options.onclose', type: 'Function', desc: '关闭时触发'}, {name: 'options.onbeforeopen', type: 'Function', desc: '打开之前触发'}, {name: 'options.onopen', type: 'Function', desc: '打开时触发'}, {name: 'options.onmouseover', type: 'Function', desc: '悬停时触发'}, {name: 'options.onmouseout', type: 'Function', desc: '离开时触发'}, {name: 'options.onmousedown', type: 'Function', desc: '鼠标按下时触发'}, {name: 'options.onmouseup', type: 'Function', desc: '鼠标抬起时触发'}], methods: [{name: 'filter', desc: '过滤方法', options: [{name: 'filterStr', type: 'String', desc: '需检索的字符串值'}, {name: 'data', type: 'Array', desc: '目标数据'}]}, {name: 'render', desc: '渲染控件', options: [{name: 'target', type: 'Object', desc: '目标渲染对象'}]}, {name: 'getInput', type: 'HTMLElement', desc: '获取input元素', returns: [{type: 'HTMLElement', desc: 'input元素'}]}, {name: 'getArrow', type: 'HTMLElement', desc: '获取下拉箭头元素', returns: [{type: 'HTMLElement', desc: 'arrow元素'}]}, {name: 'chooseItem', desc: '响应条目被选择,并发出 onitemclick 事件', options: [{name: 'data', type: 'Object', desc: '选中的数据'}]}, {name: 'setValue', desc: '设置input的值', options: [{name: 'value', type: 'String', desc: '值'}]}, {name: 'dispose', desc: '销毁Combox'}]}, 'baidu.ui.create': {name: 'create', type: 'object', desc: '创建一个ui控件', options: [{name: 'UI控件类或者uiType', type: 'object|String'}, {name: 'options', type: 'object', desc: 'optional 控件的初始化属性autoRender : 是否自动render，默认trueelement : render到的元素parent : 父控件'}], returns: [{type: 'object', desc: '创建好的控件实例'}]}, 'baidu.ui.createPopup': {name: 'createPopup', desc: '创建一个 Popup 层', options: [{name: 'options', type: 'JSON', desc: '配置信息'}], methods: [{name: 'initIframe', options: [{name: 'delay'}]}]}, 'baidu.ui.createUI': {name: 'createUI', type: 'object', desc: '创建一个UI控件类', options: [{name: 'constructor', type: 'function', desc: 'ui控件构造器'}, {name: 'options', type: 'object', desc: '选项'}], returns: [{type: 'object', desc: 'ui控件'}]}, 'baidu.ui.DatePicker': {name: 'DatePicker', desc: '创建一个日历对象绑定于一个input输入域', options: [{name: 'options', type: 'Object', desc: 'config参数'}, {name: 'options.width', type: 'Number', desc: '日历组件的宽度'}, {name: 'options.height', type: 'Number', desc: '日历组件的高度'}, {name: 'options.format', type: 'String', desc: '日历组件格式化日历的格式，默认：yyyy-MM-dd'}, {name: 'options.popupOptions', type: 'Object', desc: 'Picker组件的浮动层由Popup组件渲染，该参数用来设置Popup的属性，具体参考Popup'}, {name: 'options.calendarOptions', type: 'Object', desc: 'Picker组件的日历由Calendar组件渲染，该参数来用设置Calendar的属性，具体参考Calendar'}, {name: 'options.onpick', type: 'Function', desc: '当选中某个日期时的触发事件'}, {name: 'options.language', type: 'String', desc: '当前语言，默认为中文'}], methods: [{name: 'render', desc: '渲染日期组件到body中并绑定input', options: [{name: 'target', type: 'HTMLElement', desc: '一个input对象，该input和组件绑定'}]}, {name: 'pick', desc: '当点击某个日期时执行pick方法来向input写入日期', options: [{name: 'date', type: 'Date', desc: '将日期写到input中'}]}, {name: 'show', desc: '显示日历'}, {name: 'hide', desc: '隐藏日历'}, {name: 'dispose'}]}, 'baidu.ui.Decorator': {name: 'Decorator', desc: '装饰器控件基类'}, 'baidu.ui.Dialog': {name: 'Dialog', desc: 'Dialog基类，建立一个dialog实例', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.content', type: 'DOMElement', desc: '要放到dialog中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'dialog中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度，默认值为400，注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度，默认值为300'}, {name: 'options.top', type: 'String|Number', desc: 'dialog距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'dialog距离页面左方的距离'}, {name: 'options.titleText', type: 'String', desc: 'dialog标题文字'}, {name: 'options.classPrefix', type: 'String', desc: 'dialog样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'dialog的zIndex值，默认值为1000'}, {name: 'options.onopen', type: 'Function', desc: 'dialog打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'dialog关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'dialog关闭前触发，如果此函数返回false，则组织dialog关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'dialog更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭dialog。'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的title。'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}], methods: [{name: 'isShown', type: 'Boolean', desc: '查询当前窗口是否处于显示状态', returns: [{type: 'Boolean', desc: '是否处于显示状态'}]}, {name: 'render', type: 'HTMLElement', desc: '绘制dialog到页面', returns: [{type: 'HTMLElement', desc: 'mainDiv'}]}, {name: 'open', desc: '显示当前dialog'}, {name: 'close', desc: '隐藏当前dialog'}, {name: 'update', desc: '更新dialog状态', options: [{name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到dialog中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'dialog中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度，默认值为400，注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度，默认值为300'}, {name: 'options.top', type: 'String|Number', desc: 'dialog距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'dialog距离页面左方的距离'}, {name: 'options.titleText', type: 'String', desc: 'dialog标题文字'}, {name: 'options.classPrefix', type: 'String', desc: 'dialog样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'dialog的zIndex值，默认值为1000'}, {name: 'options.onopen', type: 'Function', desc: 'dialog打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'dialog关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'dialog关闭前触发，如果此函数返回false，则组织dialog关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'dialog更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭dialog。'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的title。'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}]}, {name: 'getTitle', type: 'HTMLElement', desc: '获得title对应的dom元素', returns: [{type: 'HTMLElement', desc: 'title'}]}, {name: 'getTitleInner', type: 'HTMLElement', desc: '获得title文字对应的dom元素', returns: [{type: 'HTMLElement', desc: 'titleInner'}]}, {name: 'getContent', type: 'HTMLElement', desc: '获得content对应的dom元素', returns: [{type: 'HTMLElement', desc: 'content'}]}, {name: 'getFooter', type: 'HTMLElement', desc: '获得footer对应的dom元素', returns: [{type: 'HTMLElement', desc: 'footer'}]}, {name: 'dispose', desc: '销毁dialog实例'}]}, 'baidu.ui.get': {name: 'get', type: 'object', desc: '获取元素所在的控件', options: [{name: '要查找的元素，如果是字符串，则查找这个guid为此字符串的控件', type: 'HTMLElement|string'}, {name: 'optional', type: 'string', desc: 'type 匹配查找指定类型的控件【暂未支持】'}], returns: [{type: 'object', desc: 'ui控件'}]}, 'baidu.ui.getAttribute': {name: 'getAttribute', desc: '从指定的dom元素中获取ui控件的属性值 todo: &datasource支持', options: [{name: 'element'}]}, 'baidu.ui.getUI': {name: 'getUI', type: 'object', desc: '通过uiType找到UI类查找规则：suggestion -> baidu.ui.Suggestiontoolbar-spacer -> baidu.ui.Toolbar.Spacer.', options: [{name: 'uiType', type: 'String'}], returns: [{type: 'object', desc: 'UI类'}]}, 'baidu.ui.Input': {name: 'Input', type: 'Boolean', desc: 'Input基类，创建一个input实例。', options: [{name: 'target', type: 'String|HTMLElement', desc: '存放input控件的元素，input控件会渲染到该元素内。'}, {name: 'options', type: 'Object', desc: '选项'}, {name: 'options.text', type: 'String', desc: 'input文本信息'}, {name: 'options.disabled', type: 'Boolean', desc: '控件是否有效，默认为false（有效）。'}, {name: 'options.onfocus', type: 'Function', desc: '聚焦时触发'}, {name: 'options.onblur', type: 'Function', desc: '失去焦点时触发'}, {name: 'options.onchage', type: 'Function', desc: 'input内容改变时触发'}, {name: 'options.onkeydown', type: 'Function', desc: '按下键盘时触发'}, {name: 'options.onkeyup', type: 'Function', desc: '释放键盘时触发'}, {name: 'options.onmouseover', type: 'Function', desc: '鼠标悬停在input上时触发'}, {name: 'options.onmouseout', type: 'Function', desc: '鼠标移出input时触发'}, {name: 'options.ondisable', type: 'Function', desc: '当调用input的实例方法disable，使得input失效时触发。'}, {name: 'options.onenable', type: 'Function', desc: '当调用input的实例方法enable，使得input有效时触发。'}, {name: 'options.ondispose', type: 'Function', desc: '销毁实例时触发'}], methods: [{name: 'render', desc: '将input绘制到DOM树中。target参数不可省，否则无法渲染。', options: [{name: 'target', type: 'String|HTMLElement', desc: '目标渲染对象'}]}, {name: 'isDisabled', type: 'Boolean', desc: '判断input是否处于失效状态。', returns: [{type: 'Boolean', desc: '是否处于失效状态'}]}, {name: 'getText', type: 'String', desc: '获得input文字。', returns: [{type: 'String', desc: '输入框的文字'}]}, {name: 'enable', desc: '使input控件有效。'}, {name: 'disable', desc: '使input控件失效。'}, {name: 'dispose', desc: '销毁实例。'}], returns: [{type: 'Boolean', desc: '是否有效，true(失效)/false(有效)。'}]}, 'baidu.ui.ItemSet': {name: 'ItemSet', desc: 'ItemSet是accordion, tab等多item操作的抽象', options: [{name: 'options', type: 'Object', desc: 'config参数.'}, {name: 'options.switchType', type: 'String', desc: '事件激发类型，item由什么类型的事件来打开，取值如：click, mouseover等等'}, {name: 'options.defaultIndex', type: 'Number', desc: '初始化后的默认找开项索引，默认值是0'}]}, 'baidu.ui.Login': {name: 'Login', desc: '应用实现 login 备注：涉及passport的API接口参数可以参见http://fe.baidu.com/doc/zhengxin/passport/openapi_help.text', options: [{name: 'content', type: 'String|DOMElement', desc: '内容或者内容对应的元素'}, {name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到dialog中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'dialog中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度，注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'dialog距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'dialog距离页面左方的距离'}, {name: 'options.titleText', type: 'String', desc: 'dialog标题文字'}, {name: 'options.classPrefix', type: 'String', desc: 'dialog样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'dialog的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'dialog打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'dialog关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'dialog关闭前触发，如果此函数返回false，则组织dialog关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'dialog更新内容时触发 * @config {Boolean}            closeOnEscape         keyboardSupport模块提供支持，当esc键按下时关闭dialog。 * @config {String}             closeText             closeButton模块提供支持，关闭按钮上的title。'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}, {name: 'options.autoOpen', type: 'Boolean', desc: '是否一开始就打开，默认为true'}, {name: 'options.loginURL', type: 'String', desc: '登陆地址,无须改动'}, {name: 'options.regURL', type: 'String', desc: '注册地址,无须改动'}, {name: 'options.loginJumpURL', type: 'String', desc: '登陆跳转地址,必须，为提交表单跨域使用，可前往 http://fe.baidu.com/~zhengxin/passport/jump.html  下载，或者线上 http://passport.baidu.com/jump.html'}, {name: 'options.regJumpURL', type: 'String', desc: '注册跳转地址,必须，为提交表单跨域使用，可前往 http://fe.baidu.com/~zhengxin/passport/jump.html  下载，或者线上http://passport.baidu.com/jump.html'}, {name: 'options.defaultStatus', type: 'String', desc: '弹出时初始状态(登录或注册),取值 [\'login\',\'reg\'],默认为 login'}, {name: 'options.onLoginSuccess', type: 'Function', desc: '登录成功回调 TODO 默认处理函数 json.un'}, {name: 'options.onLoginFailure', type: 'Function', desc: '登录失败回调 TODO 默认处理函数, json.error'}, {name: 'options.onRegisterSuccess', type: 'Function', desc: '注册成功回调函数'}, {name: 'options.onRegisterFailure', type: 'Function', desc: '注册失败回调函数'}]}, 'baidu.ui.Modal': {name: 'Modal', desc: '为控件增加遮罩。', methods: [{name: 'getContainer', type: 'HTMLElement', desc: '获取modal的Container', returns: [{type: 'HTMLElement', desc: 'container.'}]}, {name: 'render', type: 'NULL', desc: '渲染遮罩层', returns: [{type: 'NULL'}]}, {name: 'show', type: 'NULL', desc: '显示遮罩层', options: [{name: 'options', type: 'Object', desc: '显示选项,任何合法的style属性.'}], returns: [{type: 'NULL'}]}, {name: 'hide', type: 'NULL', desc: '隐藏遮罩层', returns: [{type: 'NULL'}]}, {name: 'getWindowHandle', type: 'NULL', desc: 'window.resize & window.scroll 事件调用的function', returns: [{type: 'NULL'}]}, {name: 'update', type: 'NULL', desc: '更新遮罩层', options: [{name: 'options', type: 'Object', desc: '显示选项，同show.'}], returns: [{type: 'NULL'}]}, {name: 'dispose', type: 'Null', desc: '销毁', returns: [{type: 'Null'}]}]}, 'baidu.ui.Pager': {name: 'Pager', desc: '生成分页功能，默认会有一个横向的页面跳转链接列表，其两端有首页，尾页，上一页，下一页。若要自定义样式（如隐藏某些部件），请使用css（注：控件中各部件的css类名都有控件的tangram类名前缀）首页：first，尾页：last，上一页：previous，下一页：next，当前页：current。若要自定义控件生成的HTML，请参考源代码中以tpl开头的模板属性，类中的属性和方法都可以通过options动态覆盖。', options: [{name: 'options', type: 'Object', desc: '更新选项，若选项值不符合规则，则此次更新不予更新任何选项'}, {name: 'options.beginPage', type: 'Number', desc: '页码范围：起始页码，默认值1。'}, {name: 'options.endPage', type: 'Number', desc: '页码范围：最后页码+1，必须大于起始页码，默认值100。'}, {name: 'options.currentPage', type: 'Number', desc: '必须在页码范围内，若未指定currentPage且当前页码已超出页码范围，则会自动将currentPage更新到beginPage。'}, {name: 'options.itemCount', type: 'Number', desc: '默认显示多少个页面的链接（不包括“首页”等特殊链接），默认值10。'}, {name: 'options.leftItemCount', type: 'Number', desc: '当前页面链接在页面链接列表中的默认位置，必须小于itemCount，默认值4。'}, {name: 'options.specialLabelMap', type: 'Object', desc: '设置首页，上一页，下一页链接显示的内容。默认为{first:\'首页\',next:\'下一页\',previous:\'上一页\'}'}, {name: 'options.tplHref', type: 'String', desc: '链接显示样式，默认为\"##{page}\"'}, {name: 'options.tplLabel', type: 'String', desc: '页码显示样式，默认为\"[#{page}]\"'}, {name: 'options.tplCurrentLabel', type: 'String', desc: '选中页码的显示样式'}], methods: [{name: 'update', desc: '更新设置', options: [{name: 'options', type: 'Object', desc: '更新设置'}, {name: 'options.beginPage', type: 'Number', desc: '开始页'}, {name: 'options.endPage', type: 'Number', desc: '结束页'}, {name: 'options.currentPage', type: 'Number', desc: '跳转目标页的索引'}, {name: 'options.itemCount', type: 'Number', desc: '默认列出多少个a标签'}, {name: 'options.leftItemCount', type: 'Function', desc: '当前页的显示位置, 有默认实现'}]}, {name: 'render', desc: '将控件渲染到目标元素', options: [{name: 'container', type: 'String|HTMLElement', desc: '目标元素或元素id'}]}, {name: 'dispose', desc: '销毁控件', methods: [{name: 'callee'}]}]}, 'baidu.ui.Popup': {name: 'Popup', type: 'baidu.ui.Popup', desc: 'popup基类，建立一个popup实例', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.content', type: 'DOMElement', desc: '要放到popup中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'popup中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度。注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'popup距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'popup距离页面左方的距离'}, {name: 'options.classPrefix', type: 'String', desc: 'popup样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'popup的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'popup打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'popup关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'popup关闭前触发，如果此函数返回false，则组织popup关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'popup更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭popup'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的文字'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}], methods: [{name: 'isShown', type: 'Boolean', desc: '查询当前窗口是否处于显示状态', returns: [{type: 'Boolean', desc: '是否处于显示状态'}]}, {name: 'open', desc: '显示当前popup', options: [{name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到popup中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'popup中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度。注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'popup距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'popup距离页面左方的距离'}, {name: 'options.classPrefix', type: 'String', desc: 'popup样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'popup的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'popup打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'popup关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'popup关闭前触发，如果此函数返回false，则组织popup关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'popup更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭popup'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的文字'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}]}, {name: 'close', desc: '隐藏当前popup'}, {name: 'update', desc: '更新popup状态', options: [{name: 'options', type: 'Object', desc: '选项参数'}, {name: 'options.content', type: 'DOMElement', desc: '要放到popup中的元素，如果传此参数时同时传contentText，则忽略contentText。'}, {name: 'options.contentText', type: 'String', desc: 'popup中的内容'}, {name: 'options.width', type: 'String|Number', desc: '内容区域的宽度。注意，这里的内容区域指getContent()得到元素的区域，不包含title和footer。'}, {name: 'options.height', type: 'String|Number', desc: '内容区域的高度'}, {name: 'options.top', type: 'String|Number', desc: 'popup距离页面上方的距离'}, {name: 'options.left', type: 'String|Number', desc: 'popup距离页面左方的距离'}, {name: 'options.classPrefix', type: 'String', desc: 'popup样式的前缀'}, {name: 'options.zIndex', type: 'Number', desc: 'popup的zIndex值'}, {name: 'options.onopen', type: 'Function', desc: 'popup打开时触发'}, {name: 'options.onclose', type: 'Function', desc: 'popup关闭时触发'}, {name: 'options.onbeforeclose', type: 'Function', desc: 'popup关闭前触发，如果此函数返回false，则组织popup关闭。'}, {name: 'options.onupdate', type: 'Function', desc: 'popup更新内容时触发'}, {name: 'options.closeOnEscape', type: 'Boolean', desc: 'keyboardSupport模块提供支持，当esc键按下时关闭popup'}, {name: 'options.closeText', type: 'String', desc: 'closeButton模块提供支持，关闭按钮上的文字'}, {name: 'options.modal', type: 'Boolean', desc: 'modal模块支持，是否显示遮罩'}, {name: 'options.modalColor', type: 'String', desc: 'modal模块支持，遮罩的颜色'}, {name: 'options.modalOpacity', type: 'Number', desc: 'modal模块支持，遮罩的透明度'}, {name: 'options.modalZIndex', type: 'Number', desc: 'modal模块支持，遮罩的zIndex值'}, {name: 'options.draggable', type: 'Boolean', desc: 'draggable模块支持，是否支持拖拽'}, {name: 'options.ondragstart', type: 'Function', desc: 'draggable模块支持，当拖拽开始时触发'}, {name: 'options.ondrag', type: 'Function', desc: 'draggable模块支持，拖拽过程中触发'}, {name: 'options.ondragend', type: 'Function', desc: 'draggable模块支持，拖拽结束时触发'}]}, {name: 'dispose', desc: '销毁控件'}], returns: [{type: 'baidu.ui.Popup', desc: 'Popup类'}]}, 'baidu.ui.ProgressBar': {name: 'ProgressBar', desc: '进度条控件', options: [{name: 'options'}]}, 'baidu.ui.ScrollBar': {name: 'ScrollBar', desc: '创建一个简单的滚动条', options: [{name: 'options', type: 'Object', desc: 'config参数.'}, {name: 'options.orientation', type: 'String', desc: '设置横向或是竖向滚动条，默认值：vertical,可取值：horizontal.'}, {name: 'options.value', type: 'Number', desc: '滚动条滚动的百分比值，定义域(0, 100)'}, {name: 'options.dimension', type: 'Number', desc: '滚动条滑块占全部内容的百分比，定义域(0, 100)'}, {name: 'options.step', type: 'Number', desc: '用户自定义当点击滚动按钮时每次滚动百分比距离，定义域(0, 100)'}, {name: 'options.onscroll', type: 'Function', desc: '当滚动时触发该事件，function(evt){}，evt.value可以取得滚动的百分比'}], methods: [{name: 'render', desc: '将scrollBar的body渲染到用户给出的target', options: [{name: 'target', type: 'String|HTMLElement', desc: '一个dom的id字符串或是dom对象.'}]}, {name: 'flushUI', desc: '更新组件的外观，通过传入的value来使滚动滑块滚动到指定的百分比位置，通过dimension来更新滑块所占整个内容的百分比宽度', options: [{name: 'value', type: 'Number', desc: '滑块滑动的百分比，定义域(0, 100).'}, {name: 'dimension', type: 'Number', desc: '滑块的宽点占内容的百分比，定义域(0, 100).'}]}, {name: 'scrollTo', desc: '滚动内容到参数指定的百分比位置', options: [{name: 'val', type: 'Number', desc: '一个百分比值.'}]}, {name: 'setVisible', desc: '设置滚动条的隐藏或显示', options: [{name: 'val', type: 'Boolean', desc: '布尔值 true:显示, false:隐藏.'}]}, {name: 'isVisible', type: 'Boolean', desc: '取得当前是隐藏或是显示状态', returns: [{type: 'Boolean', desc: 'true:显示, false:隐藏.'}]}, {name: 'getSize', type: 'Object', desc: '取得滚动条的宽度和高度', returns: [{type: 'Object', desc: '一个json，有width和height属性.'}]}, {name: 'update', desc: '更新滚动条的外观', options: [{name: 'options', type: 'Object', desc: '参考构造函数参数.'}]}, {name: 'dispose', desc: '销毁对象'}]}, 'baidu.ui.ScrollPanel': {name: 'ScrollPanel', desc: '创建一个panel来作为滚动条的容器', options: [{name: 'options', type: 'Object', desc: 'config参数.'}, {name: 'options.overflow', type: 'String', desc: '取值\'overflow-y\':创建竖向滚动, \'overflow-x\':创建横向滚动条, \'auto\':创建滚动条(默认)'}, {name: 'options.container', type: 'String|HTMLElement', desc: '需要被滚动条管理的容器对象'}], methods: [{name: 'render', desc: '渲染ScrollPanel到页面中', options: [{name: 'target', type: 'String|HTMLElement', desc: 'ScrollPanel依附于target来渲染.'}]}, {name: 'setVisible', desc: '设置滚动条的隐藏或是显示状态', options: [{name: 'val', type: 'Boolean', desc: '必选，true:显示, false:隐藏.'}, {name: 'pos', type: 'String', desc: '可选，当有两个滚动条时可以指定只隐藏其中之一，取值\'x\'或\'y\'，不传该参数隐藏或显示全部.'}]}, {name: 'isVisible', type: 'Boolean', desc: '取得滚动条的隐藏或显示状态', options: [{name: 'pos', type: 'String', desc: '取值\'x\'或是\'y\'来选择要取得哪个滚动条的隐藏或是显示状态.'}], returns: [{type: 'Boolean', desc: '返回布尔值来标示当前的隐藏或是显示状态.'}]}, {name: 'getScrollBar', type: 'ScrollBar|Array', desc: '取得滚动条对象', options: [{name: 'pos', type: 'String', desc: '取值\'x\'或是\'y\'来标示需取得哪个滚动条，当不传该参数则返回所有滚动条.'}], returns: [{type: 'ScrollBar|Array', desc: '返回滚动条对象或数组.'}]}, {name: 'update', desc: '更新所有滚动条的外观', options: [{name: 'options', type: 'Object', desc: '参数请参考构造函数参数.'}]}, {name: 'getPanel', type: 'HTMLElement', desc: '取得panel的dom节点', returns: [{type: 'HTMLElement'}]}, {name: 'getTarget', type: 'HTMLElement', desc: '取得用户传入的目标对象', returns: [{type: 'HTMLElement'}]}, {name: 'getContainer', type: 'HTMLElement', desc: '取得用户传入的container对象', returns: [{type: 'HTMLElement'}]}, {name: 'dispose', desc: '销毁对象'}]}, 'baidu.ui.setup': {name: 'setup', desc: '从当前页面批量setup所有控件（DOM - 控件）', options: [{name: 'element', type: 'DOMElement', desc: '渲染查找的根元素'}]}, 'baidu.ui.Slider': {name: 'Slider', desc: '拖动条控件，可用作音乐播放进度。', options: [{name: 'target', type: 'String|HTMLElement', desc: '存放滑块控件的元素，按钮会渲染到该元素内。'}, {name: 'options', type: 'Object', desc: '选项layout'}, {name: 'options.value', type: 'Number', desc: '记录滑块的当前进度值'}, {name: 'options.layout', type: 'Number', desc: '滑块的布局[水平：horizontal,垂直：vertical]'}, {name: 'options.min', type: 'Number', desc: '进度条最左边代表的值，默认值取0'}, {name: 'options.max', type: 'Number', desc: '进度条最右边代表的值，默认值取100'}, {name: 'options.range', type: 'Array', desc: '可拖动的范围，取值min到max之间，例如[30, 80]'}, {name: 'options.disabled', type: 'Boolean', desc: '是否禁用'}, {name: 'options.skin', type: 'String', desc: '自定义样式名称前缀'}]}, 'baidu.ui.Tab': {name: 'Tab', desc: 'Tab标签组', options: [{name: 'options', type: 'Object', desc: '选项'}, {name: 'options.items', type: 'Function', desc: 'tab中的内容<pre> [{head : \"label1\",body : \"<p>content1</p>\"},{head : \"label2\",body : \"<p>content2</p>\"},{head : \"label3\",body : \"<p>content3</p>\"}]</pre>'}], methods: [{name: 'insertItemHTML', desc: '插入item html', options: [{name: 'item', type: 'Object', desc: '选项内容'}, {name: 'index', type: 'int', desc: '选项的索引'}]}, {name: 'dispose', desc: '销毁实例的析构'}]}, 'baidu.ui.Table': {name: 'Table', desc: 'Table表格组件。', options: [{name: 'options', type: 'Object', desc: 'config参数'}, {name: 'options.data', type: 'Object', desc: '生成表格的数据，格式[{id: \"rsid0\", content : [\"column0\", \"column1\"]}, {id : \"rsid0\", content : [\"column0\", \"column1\"]}], id不是必要，当有选择列时用来定义用户的checkbox的value'}, {name: 'options.columns', type: 'Object', desc: '各个列的高级定义，格式[{index : 1, width : 100, type : \"select\"}, {index : 2, width : \"100%\", enableEdit : true}, {index : 3, width : \"200px\"}]'}]}, 'baidu.ui.Tooltip': {name: 'Tooltip', type: 'baidu.ui.Tooltip', desc: '弹出tip层,类似鼠标划过含title属性元素的效果', options: [{name: 'options', type: 'Object', desc: '选项.'}, {name: 'options.target', type: 'String|Array', desc: '目标元素或元素id。可直接设置多个目标元素'}, {name: 'options.type', type: 'String', desc: '（可选）触发展开的类型，可以为:hover和click。默认为click'}, {name: 'options.contentElement', type: 'Element', desc: '（可选）Tooltip元素的内部HTMLElement。'}, {name: 'options.content', type: 'String', desc: '（可选）Tooltip元素的内部HTML String。若target存在title，则以title为准'}, {name: 'options.width', type: 'String', desc: '（可选）宽度'}, {name: 'options.height', type: 'String', desc: '（可选）高度'}, {name: 'options.offset', type: 'Array|Object', desc: '（可选）偏移量。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向。单位：px，默认值：[0,0]。'}, {name: 'options.single', type: 'boolean', desc: '（可选）是否全局单例。若该值为true，则全局共用唯一的浮起tooltip元素，默认为true。'}, {name: 'options.zIndex', type: 'Number', desc: '（可选）浮起tooltip层的z-index值，默认为3000。'}, {name: 'options.positionBy', type: 'String', desc: '（可选）浮起tooltip层的位置参考，取值[\'mouse\',\'element\']，分别对应针对鼠标位置或者element元素计算偏移，默认mouse'}, {name: 'options.positionElement', type: 'Element', desc: '（可选）定位元素，设置此元素且positionBy为element时，根据改元素计算位置'}, {name: 'options.autoRender', type: 'Boolean', desc: '是否自动渲染。'}, {name: 'options.onopen', type: 'Function', desc: '（可选）打开tooltip时触发。'}, {name: 'options.onclose', type: 'Function', desc: '（可选）关闭tooltip时触发。'}, {name: 'options.onbeforeopen', type: 'Function', desc: '（可选）打开tooltip前触发。'}, {name: 'options.onbeforeclose', type: 'Function', desc: '（可选）关闭tooltip前触发。'}], methods: [{name: 'render', desc: '渲染Tooltip到HTML'}, {name: 'open', desc: '打开tooltip', options: [{name: 'target', type: 'HTMLElement', desc: '显示tooltip所参照的html元素'}]}, {name: 'update', desc: '更新options', options: [{name: 'options', type: 'Object', desc: '选项.'}, {name: 'options.target', type: 'String|Array', desc: '目标元素或元素id。可直接设置多个目标元素'}, {name: 'options.type', type: 'String', desc: '（可选）触发展开的类型，可以为:hover和click。默认为click'}, {name: 'options.contentElement', type: 'Element', desc: '（可选）Tooltip元素的内部HTMLElement。'}, {name: 'options.content', type: 'String', desc: '（可选）Tooltip元素的内部HTML String。若target存在title，则以title为准'}, {name: 'options.width', type: 'String', desc: '（可选）宽度'}, {name: 'options.height', type: 'String', desc: '（可选）高度'}, {name: 'options.offset', type: 'Array|Object', desc: '（可选）偏移量。若为数组，索引0为x方向，索引1为y方向；若为Object，键x为x方向，键y为y方向。单位：px，默认值：[0,0]。'}, {name: 'options.single', type: 'boolean', desc: '（可选）是否全局单例。若该值为true，则全局共用唯一的浮起tooltip元素，默认为true。'}, {name: 'options.zIndex', type: 'Number', desc: '（可选）浮起tooltip层的z-index值，默认为3000。'}, {name: 'options.positionBy', type: 'String', desc: '（可选）浮起tooltip层的位置参考，取值[\'mouse\',\'element\']，分别对应针对鼠标位置或者element元素计算偏移，默认mouse。'}, {name: 'options.positionElement', type: 'Element', desc: '（可选）定位元素，设置此元素且positionBy为element时，根据改元素计算位置'}, {name: 'options.autoRender', type: 'Boolean', desc: '是否自动渲染。'}, {name: 'options.onopen', type: 'Function', desc: '（可选）打开tooltip时触发。'}, {name: 'options.onclose', type: 'Function', desc: '（可选）关闭tooltip时触发。'}, {name: 'options.onbeforeopen', type: 'Function', desc: '（可选）打开tooltip前触发。'}, {name: 'options.onbeforeclose', type: 'Function', desc: '（可选）关闭tooltip前触发。'}]}, {name: 'close', desc: '关闭tooltip'}, {name: 'dispose', desc: '销毁控件'}], returns: [{type: 'baidu.ui.Tooltip', desc: 'Tooltip实例'}]}, 'baidu.ui.Tree.TreeNode': {name: 'TreeNode', desc: '树节点类', options: [{name: 'options', type: 'Object'}, {name: 'options.isExpand', type: 'Boolean', desc: '是否是展开, 默认值为false'}, {name: 'options.children', type: 'Array', desc: '子节点options数组  默认值为null'}, {name: 'options.isRoot', type: 'Boolean', desc: '是否是根节点,默认值为false'}, {name: 'options.type', type: 'Boolean', desc: '节点类型 trunk|leaf, 默认值为\'leaf\''}, {name: 'options.id', type: 'String', desc: '节点的唯一标识ID。默认为null'}, {name: 'options.text', type: 'String', desc: '节点显示名称. 默认值为null'}, {name: 'options.href', type: 'String', desc: '节点的链接href. 默认值为null'}, {name: 'options.target', type: 'String', desc: '节点链接的target,有href的时候才生效。默认值为null'}, {name: 'options.icon', type: 'String', desc: '节点图标的路径. 默认值为null'}, {name: 'options.skin', type: 'String', desc: '节点样式选择符. 默认值为null'}, {name: 'options.isToggle', type: 'Boolean', desc: '是否支持节点展开或收起 默认值为true'}], methods: [{name: 'getParentNode', type: 'TreeNode', desc: '取得节点的父节点', returns: [{type: 'TreeNode', desc: 'treeNode.'}]}, {name: 'setParentNode', desc: '设置节点的父节点', options: [{name: 'treeNode', type: 'TreeNode'}]}, {name: 'getChildNodes', type: 'Array', desc: '取得节点的子节点数组', returns: [{type: 'Array', desc: 'treeNodes.'}]}, {name: 'setTree', desc: '设置节点的对应的Tree', options: [{name: 'tree', type: 'Tree'}]}, {name: 'getTree', type: 'Tree', desc: '取得节点的对应的Tree', returns: [{type: 'Tree', desc: 'tree.'}]}, {name: 'appendData', desc: '增加一组children数据。数据格式:[{text:\"\",href:\"\",children:[{text:\"\",href:\"\"},{text:\"\",href:\"\"}]},{text:\"\"},{text:\"\"}]可以数组里面嵌套数组', options: [{name: 'array', type: 'Array'}]}, {name: 'isParent', desc: '递归判断本节点是否是传进来treeNode的父节点', options: [{name: 'treeNode', type: 'TreeNode', desc: '节点.'}]}, {name: 'appendTo', desc: '将已有节点添加到目标节点中，成为这个目标节点的子节点。', options: [{name: ':', desc: 'parentNode'}]}, {name: 'moveTo', desc: '将此节点移动至一个目标节点,成为这个目标节点的next节点', options: [{name: 'treeNode'}]}, {name: 'appendChild', type: 'TreeNode', desc: '新增一个子节点1.先判断子节点是否被渲染过，如果渲染过，就将子节点append到自己subNodes容器里  否则就inertHTML的子节点的getString2.对parentNode与childNodes进行变更。3.更新treeNode与tree的update', options: [{name: '需要加入的节点(分为已经渲染的节点和为被渲染的节点)', type: 'TreeNode', desc: '通过treeNode._getContainer()返回值来判断是否被渲染.'}, {name: '此节点做为', type: 'index', desc: '节点集合的[index+1]的值'}], returns: [{type: 'TreeNode', desc: 'treeNode 返回被新增的child'}]}, {name: 'removeAllChildren', desc: '批量删除一个节点下的所有子节点'}, {name: 'removeChild', desc: '删除一个子节点1.删除此节点对象的数据结构2.删除此节点所对应的dom元素对象', options: [{name: 'treeNode', type: 'TreeNode'}]}, {name: 'update', desc: '更新节点的一系列属性1.如有text,就更新text.2.如有icon', options: [{name: 'options', type: 'Object'}]}, {name: 'expand', desc: '展开节点分步渲染。第一次expand会渲染节点'}, {name: 'collapse', desc: '收起节点'}, {name: 'toggle', desc: '切换，收起或者展开'}, {name: 'blur', desc: '失去焦点,让当前节点取消高亮。'}, {name: 'focus', desc: '取得焦点,并且让当前节点高亮，让上一节点取消高亮。'}, {name: 'hide', desc: '隐藏节点，但不包括它的子节点。'}, {name: 'show', desc: '显示节点。'}, {name: 'expandAll', desc: '递归展开所有子节点'}, {name: 'collapseAll', desc: '递归收起所有子节点'}, {name: 'getIndex', type: 'int', desc: '取得本节点所对应父节点的索引', returns: [{type: 'int', desc: 'index.'}]}, {name: 'getNext', type: 'TreeNode', desc: '取得本节点的下一个节点如果没有就返回自己', returns: [{type: 'TreeNode', desc: 'next.'}]}, {name: 'getPrevious', type: 'TreeNode', desc: '取得本节点的上一个节点如果没有就返回自己', returns: [{type: 'TreeNode', desc: 'previous.'}]}, {name: 'getFirstChild', type: 'TreeNode', desc: '取得本节点的第一个子节点如果没有就返回null', returns: [{type: 'TreeNode', desc: 'previous.'}]}, {name: 'getLastChild', type: 'TreeNode', desc: '取得本节点的最后一个子节点如果没有就返回null', returns: [{type: 'TreeNode', desc: 'previous.'}]}, {name: 'isLastNode', type: 'Boolean', desc: '是否是最后一个节点在初始渲染节点的时候，自己维护了一个_isLast,就不用去动态算是否是最后一个子节点。而在动态新增，删除节点时，动态的处理是否是最后一个节点能方便代码实现，这样做的目的既能保证初始化时的性能，也能够方便动态功能的实现。.', options: [{name: 'isInit'}], returns: [{type: 'Boolean', desc: 'true | false.'}]}]}, 'baidu.url.escapeSymbol': {name: 'escapeSymbol', type: 'string, string', desc: '对字符串进行%&+/#=和空格七个字符进行url转义', options: [{name: 'source', type: 'string', desc: '需要转义的字符串'}], returns: [{type: 'string', desc: '转义之后的字符串.'}, {type: 'string', desc: '转义后的字符串'}]}, 'baidu.url.getQueryValue': {name: 'getQueryValue', type: 'string|null', desc: '根据参数名从目标URL中获取参数值', options: [{name: 'url', type: 'string', desc: '目标URL'}, {name: 'key', type: 'string', desc: '要获取的参数名'}], returns: [{type: 'string|null', desc: '- 获取的参数值，其中URI编码后的字符不会被解码，获取不到时返回null'}]}, 'baidu.url.jsonToQuery': {name: 'jsonToQuery', type: 'string', desc: '将json对象解析成query字符串', options: [{name: 'json', type: 'Object', desc: '需要解析的json对象'}, {name: 'replacer_opt', type: 'Function=', desc: '对值进行特殊处理的函数，function (value, key)'}], returns: [{type: 'string', desc: '- 解析结果字符串，其中值将被URI编码，{a:\'&1 \'} ==> \"a=%261%20\"。'}]}, 'baidu.url.queryToJson': {name: 'queryToJson', type: 'Object', desc: '解析目标URL中的参数成json对象', options: [{name: 'url', type: 'string', desc: '目标URL'}], returns: [{type: 'Object', desc: '- 解析为结果对象，其中URI编码后的字符不会被解码，\'a=%20\' ==> {a:\'%20\'}。'}]}, 'baidu.widget.create': {name: 'create', desc: '根据传入的widget名, 初始化方法等,创建widget.', options: [{name: 'id', type: 'String', desc: 'widget名.'}, {name: 'main', type: 'Function', desc: 'widget的初始化方法,第一个参数为获取依赖widget API的方法(require), 第二个参数为API挂载点(exports).'}, {name: 'options', type: 'Object', desc: '配置参数.'}, {name: 'options.depends', type: 'Array<String>|String', desc: '依赖列表, 支持逗号分隔的字符串描述.'}, {name: 'options.dispose', type: 'Function', desc: '析构函数,在dispose时调用.'}, {name: 'options.lazyLoad', type: 'Boolean', desc: '延迟加载.该参数为true时不加载依赖模块,也不执行初始化方法,需显示调用 baidu.widget.load方法.'}]}, 'baidu.widget.dispose': {name: 'dispose', desc: '析构widget. 如果widget有dispose方法,则执行.', options: [{name: 'name', type: 'String', desc: 'widget名.'}]}, 'baidu.widget.get': {name: 'get', type: 'Object', desc: '获取已加载的widget.', options: [{name: 'name', type: 'String', desc: 'widget名.'}], returns: [{type: 'Object', desc: 'widget'}]}, 'baidu.widget.getPath': {name: 'getPath', type: 'String', desc: '获取widget的url路径. <br/> 优先查找baidu.widget._pathInfo下的配置, 默认会将\"pkg1.pkg2.widget\" 映射成\"pkg1/pkg2/widget.js\"', options: [{name: 'name', type: 'String', desc: 'widget名.'}], returns: [{type: 'String', desc: 'widget路径.'}]}, 'baidu.widget.load': {name: 'load', desc: '加载widget, 并在widget加载完成后执行传入的方法.', options: [{name: 'widgets', type: 'Array<String>|String', desc: 'widget名称数组.'}, {name: 'executer', type: 'Function', desc: 'widget加载完成时执行,第一个参数为获取widget API的方法(require).'}]}, 'T.dom.fixable': {name: 'fixable', type: 'Object', desc: '使目标元素拥有可进行与页面可见区域相对位置保持不变的移动的能力', options: [{name: 'element', type: 'HTMLElement|String', desc: '目标元素或目标元素的id'}, {name: 'options', type: 'Object', desc: '配置项'}, {name: 'options.vertival', type: 'String', desc: '取值[top|bottom] 默认值 top'}, {name: 'options.horizontal', type: 'Strgin', desc: '取值[left|right] 默认值 left'}, {name: 'options.offset', type: 'Object', desc: '{x:String|Number, y:String|Number}} 横向与纵向的取值'}, {name: 'options.autofix', type: 'Boolean', desc: '是否自动进行fix，默认值为true'}, {name: 'options.onrender', type: 'Function', desc: '当被渲染时候触发'}, {name: 'options.onupdate', type: 'Function', desc: '当位置被更新的时候触发'}, {name: 'options.onrelease', type: 'Function', desc: '当被释放的时候触发'}], returns: [{type: 'Object', desc: '返回值一个对象，有三个方法：render、update、release'}]}}
}
