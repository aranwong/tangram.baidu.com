{!
function parse(str){
	return str.replace(/[\r\n\'\"\/]|\\/g, function(m){
		var val = '';
		switch(m){
		    case '\r':
		    case '\n':
		      val = '';
		      break;
		    case '\'':
		    case '"':
		      val = "\\" + m;
		      break;
		    case "\\":
		      val = "\\\\";
		      break;
		    default:
		   	  val = m;
		      break;
		}
		return val;
	});
}

function getJson(item){
    var array = [], options = [], methods = [], returns = [];
    item.name && array.push("name: '" + parse(item.name) + "'");
    item.type && array.push("type: '" + item.type + "'");
    item.desc && array.push("desc: '" + parse(item.desc) + "'");
    item.comment && array.push("grammar: '"+ item.comment.getTag('grammar') +"'");
    if(item.params && item.params.length > 0){
        item.params.forEach(function(it){
            options.push(getJson(it));
        });
        array.push('options: [' + options.join(', ') + ']');
    }
    if(item.methods && item.methods.length > 0){
        item.methods.forEach(function(it){
            methods.push(getJson(it));
        });
        array.push('methods: [' + methods.join(', ') + ']');
    }
    if(item.returns && item.returns.length > 0){
    	item.returns.forEach(function(it){
    		returns.push(getJson(it));
    	});
    	array.push('returns: [' + returns.join(', ') + ']');
    }
    return '{' + array.join(', ') + '}';
}
var nameSpaceArray = [],
	docMapArray = [],
	symbolSet = data.symbolSet;
data.list.forEach(function(item){
	var alias = item.alias,
		index = alias.lastIndexOf('.'),
		par = index > -1 ? alias.substring(0, index) : null,
		symbol = symbolSet.getSymbol(par);
	symbol && symbol.is("CONSTRUCTOR") && (par = par.substring(0, par.lastIndexOf('.')));/* tree, log */
	nameSpaceArray.push("{n: '"+ alias +"', p: '" +par+ "'}");
	item.desc && docMapArray.push('\'' + alias + '\': ' + getJson(item));
});
!}
var {+ data.ident +}_api = {
	nameSpace: [{+ nameSpaceArray.join(', ') +}],
	docMap: {{+ docMapArray.join(', ') +}}
}
